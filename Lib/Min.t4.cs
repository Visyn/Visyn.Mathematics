#region Copyright (c) 2015-2018 Visyn
//The MIT License(MIT)
//
//Copyright (c) 2015-2018 Visyn
//
//Permission is hereby granted, free of charge, to any person obtaining a copy
//of this software and associated documentation files (the "Software"), to deal
//in the Software without restriction, including without limitation the rights
//to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//copies of the Software, and to permit persons to whom the Software is
//furnished to do so, subject to the following conditions:

//The above copyright notice and this permission notice shall be included in all
//copies or substantial portions of the Software.

//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//SOFTWARE.
#endregion
#region Autogenerated T4 Text Template
// Autogenerated from T4 Text Template :	Min.tt
//											file:\C:\Customer\Lucent\Visyn.Mathematics\Lib\Min.tt
// Autogeneration date/time:				4/17/2018 4:17:56 PM
#endregion
using System;
using Visyn.Mathematics;

using System.Runtime.CompilerServices;

namespace Visyn.Mathematics 
{ 
	public static partial class Numbers
	{
		/// <summary>
	    /// Return the minimum value for the specified type
        /// </summary>
        /// <returns>Minimum value for the specified type</returns>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static T MinValue<T>() where T : INumeric<T>
		{ 
			if(typeof(T) == typeof(Int32)) return (T)(object)(Int32.MinValue);
			if(typeof(T) == typeof(Int64)) return (T)(object)(Int64.MinValue);
			if(typeof(T) == typeof(Int16)) return (T)(object)(Int16.MinValue);
			if(typeof(T) == typeof(Char)) return (T)(object)(Char.MinValue);
			if(typeof(T) == typeof(UInt32)) return (T)(object)(UInt32.MinValue);
			if(typeof(T) == typeof(UInt64)) return (T)(object)(UInt64.MinValue);
			if(typeof(T) == typeof(UInt16)) return (T)(object)(UInt16.MinValue);
			if(typeof(T) == typeof(Byte)) return (T)(object)(Byte.MinValue);
			if(typeof(T) == typeof(Double)) return (T)(object)(Double.MinValue);
			if(typeof(T) == typeof(Single)) return (T)(object)(Single.MinValue);
			if(typeof(T) == typeof(Decimal)) return (T)(object)(Decimal.MinValue);
			throw new NotImplementedException($"{nameof(MinValue)} not implemented for type {typeof(T).Name}");
		}

		/// <summary>
        /// Return the minimum of two values
        /// </summary>
        /// <param name="a">First value</param>
        /// <param name="b">Second value</param>
        /// <returns>Minimum value</returns>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Int32 Min(Int32 a, Int32 b) => a<b ? a : b;
		
	    /// <summary>
	    /// Return the minimum of two nullable values
	    /// </summary>
	    /// <param name="a">First value</param>
	    /// <param name="b">Second value</param>
	    /// <param name="defaultValue">Value to use for comparison if either of the parameters are null</param>
	    /// <returns>Minimum value</returns>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static Int32 Min(Int32? a, Int32? b, Int32 defaultValue=Int32.MaxValue)
		{
		    var aValue = a.GetValueOrDefault(defaultValue);
		    var bValue = b.GetValueOrDefault(defaultValue);
            return aValue < bValue ? aValue : bValue;
	    }
		/// <summary>
        /// Return the minimum of two values
        /// </summary>
        /// <param name="a">First value</param>
        /// <param name="b">Second value</param>
        /// <returns>Minimum value</returns>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Int64 Min(Int64 a, Int64 b) => a<b ? a : b;
		
	    /// <summary>
	    /// Return the minimum of two nullable values
	    /// </summary>
	    /// <param name="a">First value</param>
	    /// <param name="b">Second value</param>
	    /// <param name="defaultValue">Value to use for comparison if either of the parameters are null</param>
	    /// <returns>Minimum value</returns>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static Int64 Min(Int64? a, Int64? b, Int64 defaultValue=Int64.MaxValue)
		{
		    var aValue = a.GetValueOrDefault(defaultValue);
		    var bValue = b.GetValueOrDefault(defaultValue);
            return aValue < bValue ? aValue : bValue;
	    }
		/// <summary>
        /// Return the minimum of two values
        /// </summary>
        /// <param name="a">First value</param>
        /// <param name="b">Second value</param>
        /// <returns>Minimum value</returns>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Int16 Min(Int16 a, Int16 b) => a<b ? a : b;
		
	    /// <summary>
	    /// Return the minimum of two nullable values
	    /// </summary>
	    /// <param name="a">First value</param>
	    /// <param name="b">Second value</param>
	    /// <param name="defaultValue">Value to use for comparison if either of the parameters are null</param>
	    /// <returns>Minimum value</returns>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static Int16 Min(Int16? a, Int16? b, Int16 defaultValue=Int16.MaxValue)
		{
		    var aValue = a.GetValueOrDefault(defaultValue);
		    var bValue = b.GetValueOrDefault(defaultValue);
            return aValue < bValue ? aValue : bValue;
	    }
		/// <summary>
        /// Return the minimum of two values
        /// </summary>
        /// <param name="a">First value</param>
        /// <param name="b">Second value</param>
        /// <returns>Minimum value</returns>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Char Min(Char a, Char b) => a<b ? a : b;
		
	    /// <summary>
	    /// Return the minimum of two nullable values
	    /// </summary>
	    /// <param name="a">First value</param>
	    /// <param name="b">Second value</param>
	    /// <param name="defaultValue">Value to use for comparison if either of the parameters are null</param>
	    /// <returns>Minimum value</returns>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static Char Min(Char? a, Char? b, Char defaultValue=Char.MaxValue)
		{
		    var aValue = a.GetValueOrDefault(defaultValue);
		    var bValue = b.GetValueOrDefault(defaultValue);
            return aValue < bValue ? aValue : bValue;
	    }
		/// <summary>
        /// Return the minimum of two values
        /// </summary>
        /// <param name="a">First value</param>
        /// <param name="b">Second value</param>
        /// <returns>Minimum value</returns>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static UInt32 Min(UInt32 a, UInt32 b) => a<b ? a : b;
		
	    /// <summary>
	    /// Return the minimum of two nullable values
	    /// </summary>
	    /// <param name="a">First value</param>
	    /// <param name="b">Second value</param>
	    /// <param name="defaultValue">Value to use for comparison if either of the parameters are null</param>
	    /// <returns>Minimum value</returns>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static UInt32 Min(UInt32? a, UInt32? b, UInt32 defaultValue=UInt32.MaxValue)
		{
		    var aValue = a.GetValueOrDefault(defaultValue);
		    var bValue = b.GetValueOrDefault(defaultValue);
            return aValue < bValue ? aValue : bValue;
	    }
		/// <summary>
        /// Return the minimum of two values
        /// </summary>
        /// <param name="a">First value</param>
        /// <param name="b">Second value</param>
        /// <returns>Minimum value</returns>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static UInt64 Min(UInt64 a, UInt64 b) => a<b ? a : b;
		
	    /// <summary>
	    /// Return the minimum of two nullable values
	    /// </summary>
	    /// <param name="a">First value</param>
	    /// <param name="b">Second value</param>
	    /// <param name="defaultValue">Value to use for comparison if either of the parameters are null</param>
	    /// <returns>Minimum value</returns>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static UInt64 Min(UInt64? a, UInt64? b, UInt64 defaultValue=UInt64.MaxValue)
		{
		    var aValue = a.GetValueOrDefault(defaultValue);
		    var bValue = b.GetValueOrDefault(defaultValue);
            return aValue < bValue ? aValue : bValue;
	    }
		/// <summary>
        /// Return the minimum of two values
        /// </summary>
        /// <param name="a">First value</param>
        /// <param name="b">Second value</param>
        /// <returns>Minimum value</returns>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static UInt16 Min(UInt16 a, UInt16 b) => a<b ? a : b;
		
	    /// <summary>
	    /// Return the minimum of two nullable values
	    /// </summary>
	    /// <param name="a">First value</param>
	    /// <param name="b">Second value</param>
	    /// <param name="defaultValue">Value to use for comparison if either of the parameters are null</param>
	    /// <returns>Minimum value</returns>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static UInt16 Min(UInt16? a, UInt16? b, UInt16 defaultValue=UInt16.MaxValue)
		{
		    var aValue = a.GetValueOrDefault(defaultValue);
		    var bValue = b.GetValueOrDefault(defaultValue);
            return aValue < bValue ? aValue : bValue;
	    }
		/// <summary>
        /// Return the minimum of two values
        /// </summary>
        /// <param name="a">First value</param>
        /// <param name="b">Second value</param>
        /// <returns>Minimum value</returns>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Byte Min(Byte a, Byte b) => a<b ? a : b;
		
	    /// <summary>
	    /// Return the minimum of two nullable values
	    /// </summary>
	    /// <param name="a">First value</param>
	    /// <param name="b">Second value</param>
	    /// <param name="defaultValue">Value to use for comparison if either of the parameters are null</param>
	    /// <returns>Minimum value</returns>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static Byte Min(Byte? a, Byte? b, Byte defaultValue=Byte.MaxValue)
		{
		    var aValue = a.GetValueOrDefault(defaultValue);
		    var bValue = b.GetValueOrDefault(defaultValue);
            return aValue < bValue ? aValue : bValue;
	    }
		/// <summary>
        /// Return the minimum of two values
        /// </summary>
        /// <param name="a">First value</param>
        /// <param name="b">Second value</param>
        /// <returns>Minimum value</returns>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Double Min(Double a, Double b) => a<b ? a : b;
		
	    /// <summary>
	    /// Return the minimum of two nullable values
	    /// </summary>
	    /// <param name="a">First value</param>
	    /// <param name="b">Second value</param>
	    /// <param name="defaultValue">Value to use for comparison if either of the parameters are null</param>
	    /// <returns>Minimum value</returns>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static Double Min(Double? a, Double? b, Double defaultValue=Double.MaxValue)
		{
		    var aValue = a.GetValueOrDefault(defaultValue);
		    var bValue = b.GetValueOrDefault(defaultValue);
            return aValue < bValue ? aValue : bValue;
	    }
		/// <summary>
        /// Return the minimum of two values
        /// </summary>
        /// <param name="a">First value</param>
        /// <param name="b">Second value</param>
        /// <returns>Minimum value</returns>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Single Min(Single a, Single b) => a<b ? a : b;
		
	    /// <summary>
	    /// Return the minimum of two nullable values
	    /// </summary>
	    /// <param name="a">First value</param>
	    /// <param name="b">Second value</param>
	    /// <param name="defaultValue">Value to use for comparison if either of the parameters are null</param>
	    /// <returns>Minimum value</returns>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static Single Min(Single? a, Single? b, Single defaultValue=Single.MaxValue)
		{
		    var aValue = a.GetValueOrDefault(defaultValue);
		    var bValue = b.GetValueOrDefault(defaultValue);
            return aValue < bValue ? aValue : bValue;
	    }
		/// <summary>
        /// Return the minimum of two values
        /// </summary>
        /// <param name="a">First value</param>
        /// <param name="b">Second value</param>
        /// <returns>Minimum value</returns>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Decimal Min(Decimal a, Decimal b) => a<b ? a : b;
		
	    /// <summary>
	    /// Return the minimum of two nullable values
	    /// </summary>
	    /// <param name="a">First value</param>
	    /// <param name="b">Second value</param>
	    /// <param name="defaultValue">Value to use for comparison if either of the parameters are null</param>
	    /// <returns>Minimum value</returns>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static Decimal Min(Decimal? a, Decimal? b, Decimal defaultValue)
		{
		    var aValue = a.GetValueOrDefault(defaultValue);
		    var bValue = b.GetValueOrDefault(defaultValue);
            return aValue < bValue ? aValue : bValue;
	    }
 	    /// <summary>
	    /// Return the minimum of two nullable values
	    /// </summary>
	    /// <param name="a">First value</param>
	    /// <param name="b">Second value</param>
	    /// <returns>Minimum value</returns>
		public static Decimal Min(Decimal? a, Decimal? b) => Min(a, b,Decimal.MaxValue);
	}
}