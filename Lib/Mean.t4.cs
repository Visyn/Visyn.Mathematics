#region Copyright (c) 2015-2017 Visyn
//The MIT License(MIT)
//
//Copyright(c) 2015-2017 Visyn
//
//Permission is hereby granted, free of charge, to any person obtaining a copy
//of this software and associated documentation files (the "Software"), to deal
//in the Software without restriction, including without limitation the rights
//to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//copies of the Software, and to permit persons to whom the Software is
//furnished to do so, subject to the following conditions:

//The above copyright notice and this permission notice shall be included in all
//copies or substantial portions of the Software.

//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//SOFTWARE.
#endregion
#region Autogenerated T4 Text Template
// Autogenerated from T4 Text Template :	Mean.tt
//											file:\C:\git\proto.temp\Visyn.Mathematics\Lib\Mean.tt
// Autogeneration date/time:				8/13/2017 9:08:40 PM
#endregion
using System;
using Visyn.Mathematics;

using System.Collections;
using System.Collections.Generic;
using System.Linq;

namespace Visyn.Mathematics
{
	public static partial class MathExtensions
	{
        public static double Mean<T>(this ICollection<T> collection) where T : IComparable, IComparable<T>, IEquatable<T>
        {
					// Int32 
			if (typeof(T) == typeof(Int32)) return ((IEnumerable<Int32>)collection).Mean();
			// Int64 
			if (typeof(T) == typeof(Int64)) return ((IEnumerable<Int64>)collection).Mean();
			// Int16 
			if (typeof(T) == typeof(Int16)) return ((IEnumerable<Int16>)collection).Mean();
			// Char 
			if (typeof(T) == typeof(Char)) return ((IEnumerable<Char>)collection).Mean();
			// UInt32 
			if (typeof(T) == typeof(UInt32)) return ((IEnumerable<UInt32>)collection).Mean();
			// UInt64 
			if (typeof(T) == typeof(UInt64)) return ((IEnumerable<UInt64>)collection).Mean();
			// UInt16 
			if (typeof(T) == typeof(UInt16)) return ((IEnumerable<UInt16>)collection).Mean();
			// Byte 
			if (typeof(T) == typeof(Byte)) return ((IEnumerable<Byte>)collection).Mean();
			// Double 
			if (typeof(T) == typeof(Double)) return ((IEnumerable<Double>)collection).Mean();
			// Single 
			if (typeof(T) == typeof(Single)) return ((IEnumerable<Single>)collection).Mean();
			// Decimal 
			if (typeof(T) == typeof(Decimal)) return ((IEnumerable<Decimal>)collection).Mean();
            if (typeof(T).IsNumeric()) return Mean(collection.Select(i => i.ToDouble(null)));

            throw new NotImplementedException($"Average not implemented for Type={typeof(T)}");
        }

        /// <summary>
        /// Calculated the mean of the specified collection of numbers.
        /// </summary>
        /// <param name="numbers">The numbers to calculate mean of.</param>
        /// <returns>Mean value System.Double.</returns>
		public static double Mean (this ICollection<Int32> numbers) 
		{
			double sum = 0;
			int count = numbers.Count;
			foreach (var item in numbers)
			{
				sum += (double)item/count;
			}
			return sum;
		}
	    /// <summary>
        /// Calculated the mean of the specified collection of numbers.
        /// </summary>
        /// <param name="numbers">The numbers to calculate mean of.</param>
        /// <returns>Mean value System.Double.</returns>
		public static double Mean (this IEnumerable<Int32> numbers) 
		{
			double sum = 0;
			int count = 0;
			foreach (var item in numbers)
			{
				count++;
				sum += (double)item;
			}
			return sum/count;
		}

        /// <summary>
        /// Calculated the mean of the specified collection of numbers.
        /// </summary>
        /// <param name="numbers">The numbers to calculate mean of.</param>
        /// <returns>Mean value System.Double.</returns>
		public static double Mean (this ICollection<Int64> numbers) 
		{
			double sum = 0;
			int count = numbers.Count;
			foreach (var item in numbers)
			{
				sum += (double)item/count;
			}
			return sum;
		}
	    /// <summary>
        /// Calculated the mean of the specified collection of numbers.
        /// </summary>
        /// <param name="numbers">The numbers to calculate mean of.</param>
        /// <returns>Mean value System.Double.</returns>
		public static double Mean (this IEnumerable<Int64> numbers) 
		{
			double sum = 0;
			int count = 0;
			foreach (var item in numbers)
			{
				count++;
				sum += (double)item;
			}
			return sum/count;
		}

        /// <summary>
        /// Calculated the mean of the specified collection of numbers.
        /// </summary>
        /// <param name="numbers">The numbers to calculate mean of.</param>
        /// <returns>Mean value System.Double.</returns>
		public static double Mean (this ICollection<Int16> numbers) 
		{
			double sum = 0;
			int count = numbers.Count;
			foreach (var item in numbers)
			{
				sum += (double)item/count;
			}
			return sum;
		}
	    /// <summary>
        /// Calculated the mean of the specified collection of numbers.
        /// </summary>
        /// <param name="numbers">The numbers to calculate mean of.</param>
        /// <returns>Mean value System.Double.</returns>
		public static double Mean (this IEnumerable<Int16> numbers) 
		{
			double sum = 0;
			int count = 0;
			foreach (var item in numbers)
			{
				count++;
				sum += (double)item;
			}
			return sum/count;
		}

        /// <summary>
        /// Calculated the mean of the specified collection of numbers.
        /// </summary>
        /// <param name="numbers">The numbers to calculate mean of.</param>
        /// <returns>Mean value System.Double.</returns>
		public static double Mean (this ICollection<Char> numbers) 
		{
			double sum = 0;
			int count = numbers.Count;
			foreach (var item in numbers)
			{
				sum += (double)item/count;
			}
			return sum;
		}
	    /// <summary>
        /// Calculated the mean of the specified collection of numbers.
        /// </summary>
        /// <param name="numbers">The numbers to calculate mean of.</param>
        /// <returns>Mean value System.Double.</returns>
		public static double Mean (this IEnumerable<Char> numbers) 
		{
			double sum = 0;
			int count = 0;
			foreach (var item in numbers)
			{
				count++;
				sum += (double)item;
			}
			return sum/count;
		}

        /// <summary>
        /// Calculated the mean of the specified collection of numbers.
        /// </summary>
        /// <param name="numbers">The numbers to calculate mean of.</param>
        /// <returns>Mean value System.Double.</returns>
		public static double Mean (this ICollection<UInt32> numbers) 
		{
			double sum = 0;
			int count = numbers.Count;
			foreach (var item in numbers)
			{
				sum += (double)item/count;
			}
			return sum;
		}
	    /// <summary>
        /// Calculated the mean of the specified collection of numbers.
        /// </summary>
        /// <param name="numbers">The numbers to calculate mean of.</param>
        /// <returns>Mean value System.Double.</returns>
		public static double Mean (this IEnumerable<UInt32> numbers) 
		{
			double sum = 0;
			int count = 0;
			foreach (var item in numbers)
			{
				count++;
				sum += (double)item;
			}
			return sum/count;
		}

        /// <summary>
        /// Calculated the mean of the specified collection of numbers.
        /// </summary>
        /// <param name="numbers">The numbers to calculate mean of.</param>
        /// <returns>Mean value System.Double.</returns>
		public static double Mean (this ICollection<UInt64> numbers) 
		{
			double sum = 0;
			int count = numbers.Count;
			foreach (var item in numbers)
			{
				sum += (double)item/count;
			}
			return sum;
		}
	    /// <summary>
        /// Calculated the mean of the specified collection of numbers.
        /// </summary>
        /// <param name="numbers">The numbers to calculate mean of.</param>
        /// <returns>Mean value System.Double.</returns>
		public static double Mean (this IEnumerable<UInt64> numbers) 
		{
			double sum = 0;
			int count = 0;
			foreach (var item in numbers)
			{
				count++;
				sum += (double)item;
			}
			return sum/count;
		}

        /// <summary>
        /// Calculated the mean of the specified collection of numbers.
        /// </summary>
        /// <param name="numbers">The numbers to calculate mean of.</param>
        /// <returns>Mean value System.Double.</returns>
		public static double Mean (this ICollection<UInt16> numbers) 
		{
			double sum = 0;
			int count = numbers.Count;
			foreach (var item in numbers)
			{
				sum += (double)item/count;
			}
			return sum;
		}
	    /// <summary>
        /// Calculated the mean of the specified collection of numbers.
        /// </summary>
        /// <param name="numbers">The numbers to calculate mean of.</param>
        /// <returns>Mean value System.Double.</returns>
		public static double Mean (this IEnumerable<UInt16> numbers) 
		{
			double sum = 0;
			int count = 0;
			foreach (var item in numbers)
			{
				count++;
				sum += (double)item;
			}
			return sum/count;
		}

        /// <summary>
        /// Calculated the mean of the specified collection of numbers.
        /// </summary>
        /// <param name="numbers">The numbers to calculate mean of.</param>
        /// <returns>Mean value System.Double.</returns>
		public static double Mean (this ICollection<Byte> numbers) 
		{
			double sum = 0;
			int count = numbers.Count;
			foreach (var item in numbers)
			{
				sum += (double)item/count;
			}
			return sum;
		}
	    /// <summary>
        /// Calculated the mean of the specified collection of numbers.
        /// </summary>
        /// <param name="numbers">The numbers to calculate mean of.</param>
        /// <returns>Mean value System.Double.</returns>
		public static double Mean (this IEnumerable<Byte> numbers) 
		{
			double sum = 0;
			int count = 0;
			foreach (var item in numbers)
			{
				count++;
				sum += (double)item;
			}
			return sum/count;
		}

        /// <summary>
        /// Calculated the mean of the specified collection of numbers.
        /// </summary>
        /// <param name="numbers">The numbers to calculate mean of.</param>
        /// <returns>Mean value System.Double.</returns>
		public static double Mean (this ICollection<Double> numbers) 
		{
			double sum = 0;
			int count = numbers.Count;
			foreach (var item in numbers)
			{
				sum += (double)item/count;
			}
			return sum;
		}
	    /// <summary>
        /// Calculated the mean of the specified collection of numbers.
        /// </summary>
        /// <param name="numbers">The numbers to calculate mean of.</param>
        /// <returns>Mean value System.Double.</returns>
		public static double Mean (this IEnumerable<Double> numbers) 
		{
			double sum = 0;
			int count = 0;
			foreach (var item in numbers)
			{
				count++;
				sum += (double)item;
			}
			return sum/count;
		}

        /// <summary>
        /// Calculated the mean of the specified collection of numbers.
        /// </summary>
        /// <param name="numbers">The numbers to calculate mean of.</param>
        /// <returns>Mean value System.Double.</returns>
		public static double Mean (this ICollection<Single> numbers) 
		{
			double sum = 0;
			int count = numbers.Count;
			foreach (var item in numbers)
			{
				sum += (double)item/count;
			}
			return sum;
		}
	    /// <summary>
        /// Calculated the mean of the specified collection of numbers.
        /// </summary>
        /// <param name="numbers">The numbers to calculate mean of.</param>
        /// <returns>Mean value System.Double.</returns>
		public static double Mean (this IEnumerable<Single> numbers) 
		{
			double sum = 0;
			int count = 0;
			foreach (var item in numbers)
			{
				count++;
				sum += (double)item;
			}
			return sum/count;
		}

        /// <summary>
        /// Calculated the mean of the specified collection of numbers.
        /// </summary>
        /// <param name="numbers">The numbers to calculate mean of.</param>
        /// <returns>Mean value System.Double.</returns>
		public static double Mean (this ICollection<Decimal> numbers) 
		{
			double sum = 0;
			int count = numbers.Count;
			foreach (var item in numbers)
			{
				sum += (double)item/count;
			}
			return sum;
		}
	    /// <summary>
        /// Calculated the mean of the specified collection of numbers.
        /// </summary>
        /// <param name="numbers">The numbers to calculate mean of.</param>
        /// <returns>Mean value System.Double.</returns>
		public static double Mean (this IEnumerable<Decimal> numbers) 
		{
			double sum = 0;
			int count = 0;
			foreach (var item in numbers)
			{
				count++;
				sum += (double)item;
			}
			return sum/count;
		}

	}
}