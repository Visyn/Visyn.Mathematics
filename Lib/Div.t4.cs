#region Copyright (c) 2015-2018 Visyn
//The MIT License(MIT)
//
//Copyright (c) 2015-2018 Visyn
//
//Permission is hereby granted, free of charge, to any person obtaining a copy
//of this software and associated documentation files (the "Software"), to deal
//in the Software without restriction, including without limitation the rights
//to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//copies of the Software, and to permit persons to whom the Software is
//furnished to do so, subject to the following conditions:

//The above copyright notice and this permission notice shall be included in all
//copies or substantial portions of the Software.

//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//SOFTWARE.
#endregion
#region Autogenerated T4 Text Template
// Autogenerated from T4 Text Template :	Div.tt
//											file:\C:\git\proto.temp\Visyn.Mathematics\Lib\Div.tt
// Autogeneration date/time:				8/13/2017 9:07:53 PM
#endregion
using System;
using Visyn.Mathematics;


namespace Visyn.Mathematics 
{ 
	public static partial class Numbers
	{
        /// <summary>
        /// Divide with remainder retaining underlying type
        /// </summary>
        /// <param name="dividend"></param>
        /// <param name="divisor"></param>
        /// <param name="remainder"></param>
        /// <returns></returns>
        [Obsolete("Use Divide(...).  Identical implementation...",true)]
		public static Int32 Div(Int32 dividend, Int32 divisor, out Int32 remainder)
        {
			// ReSharper disable once CompareOfFloatsByEqualityOperator
			if(divisor == 0) throw new DivideByZeroException();
            double result = (double)dividend/(double)divisor;  // 82/10=8.2
			Int32 quotient = (Int32)(result);  // 8
            remainder = (Int32)Math.Round((result - quotient)*divisor);  // (8.2-8)*10=0.2*10=2
            return quotient;
        }

        /// <summary>
        /// Divide with remainder retaining underlying type
        /// </summary>
        /// <param name="dividend"></param>
        /// <param name="divisor"></param>
        /// <param name="remainder"></param>
        /// <returns></returns>
        [Obsolete("Use Divide(...).  Identical implementation...",true)]
		public static Int64 Div(Int64 dividend, Int64 divisor, out Int64 remainder)
        {
			// ReSharper disable once CompareOfFloatsByEqualityOperator
			if(divisor == 0) throw new DivideByZeroException();
            double result = (double)dividend/(double)divisor;  // 82/10=8.2
			Int64 quotient = (Int64)(result);  // 8
            remainder = (Int64)Math.Round((result - quotient)*divisor);  // (8.2-8)*10=0.2*10=2
            return quotient;
        }

        /// <summary>
        /// Divide with remainder retaining underlying type
        /// </summary>
        /// <param name="dividend"></param>
        /// <param name="divisor"></param>
        /// <param name="remainder"></param>
        /// <returns></returns>
        [Obsolete("Use Divide(...).  Identical implementation...",true)]
		public static Int16 Div(Int16 dividend, Int16 divisor, out Int16 remainder)
        {
			// ReSharper disable once CompareOfFloatsByEqualityOperator
			if(divisor == 0) throw new DivideByZeroException();
            double result = (double)dividend/(double)divisor;  // 82/10=8.2
			Int16 quotient = (Int16)(result);  // 8
            remainder = (Int16)Math.Round((result - quotient)*divisor);  // (8.2-8)*10=0.2*10=2
            return quotient;
        }

        /// <summary>
        /// Divide with remainder retaining underlying type
        /// </summary>
        /// <param name="dividend"></param>
        /// <param name="divisor"></param>
        /// <param name="remainder"></param>
        /// <returns></returns>
        [Obsolete("Use Divide(...).  Identical implementation...",true)]
		public static Char Div(Char dividend, Char divisor, out Char remainder)
        {
			// ReSharper disable once CompareOfFloatsByEqualityOperator
			if(divisor == 0) throw new DivideByZeroException();
            double result = (double)dividend/(double)divisor;  // 82/10=8.2
			Char quotient = (Char)(result);  // 8
            remainder = (Char)Math.Round((result - quotient)*divisor);  // (8.2-8)*10=0.2*10=2
            return quotient;
        }

        /// <summary>
        /// Divide with remainder retaining underlying type
        /// </summary>
        /// <param name="dividend"></param>
        /// <param name="divisor"></param>
        /// <param name="remainder"></param>
        /// <returns></returns>
        [Obsolete("Use Divide(...).  Identical implementation...",true)]
		public static UInt32 Div(UInt32 dividend, UInt32 divisor, out UInt32 remainder)
        {
			// ReSharper disable once CompareOfFloatsByEqualityOperator
			if(divisor == 0) throw new DivideByZeroException();
            double result = (double)dividend/(double)divisor;  // 82/10=8.2
			UInt32 quotient = (UInt32)(result);  // 8
            remainder = (UInt32)Math.Round((result - quotient)*divisor);  // (8.2-8)*10=0.2*10=2
            return quotient;
        }

        /// <summary>
        /// Divide with remainder retaining underlying type
        /// </summary>
        /// <param name="dividend"></param>
        /// <param name="divisor"></param>
        /// <param name="remainder"></param>
        /// <returns></returns>
        [Obsolete("Use Divide(...).  Identical implementation...",true)]
		public static UInt64 Div(UInt64 dividend, UInt64 divisor, out UInt64 remainder)
        {
			// ReSharper disable once CompareOfFloatsByEqualityOperator
			if(divisor == 0) throw new DivideByZeroException();
            double result = (double)dividend/(double)divisor;  // 82/10=8.2
			UInt64 quotient = (UInt64)(result);  // 8
            remainder = (UInt64)Math.Round((result - quotient)*divisor);  // (8.2-8)*10=0.2*10=2
            return quotient;
        }

        /// <summary>
        /// Divide with remainder retaining underlying type
        /// </summary>
        /// <param name="dividend"></param>
        /// <param name="divisor"></param>
        /// <param name="remainder"></param>
        /// <returns></returns>
        [Obsolete("Use Divide(...).  Identical implementation...",true)]
		public static UInt16 Div(UInt16 dividend, UInt16 divisor, out UInt16 remainder)
        {
			// ReSharper disable once CompareOfFloatsByEqualityOperator
			if(divisor == 0) throw new DivideByZeroException();
            double result = (double)dividend/(double)divisor;  // 82/10=8.2
			UInt16 quotient = (UInt16)(result);  // 8
            remainder = (UInt16)Math.Round((result - quotient)*divisor);  // (8.2-8)*10=0.2*10=2
            return quotient;
        }

        /// <summary>
        /// Divide with remainder retaining underlying type
        /// </summary>
        /// <param name="dividend"></param>
        /// <param name="divisor"></param>
        /// <param name="remainder"></param>
        /// <returns></returns>
        [Obsolete("Use Divide(...).  Identical implementation...",true)]
		public static Byte Div(Byte dividend, Byte divisor, out Byte remainder)
        {
			// ReSharper disable once CompareOfFloatsByEqualityOperator
			if(divisor == 0) throw new DivideByZeroException();
            double result = (double)dividend/(double)divisor;  // 82/10=8.2
			Byte quotient = (Byte)(result);  // 8
            remainder = (Byte)Math.Round((result - quotient)*divisor);  // (8.2-8)*10=0.2*10=2
            return quotient;
        }

        /// <summary>
        /// Divide with remainder retaining underlying type
        /// </summary>
        /// <param name="dividend"></param>
        /// <param name="divisor"></param>
        /// <param name="remainder"></param>
        /// <returns></returns>
        [Obsolete("Use Divide(...).  Identical implementation...",true)]
		public static Double Div(Double dividend, Double divisor, out Double remainder)
        {
			// ReSharper disable once CompareOfFloatsByEqualityOperator
			if(divisor == 0) throw new DivideByZeroException();
            double result = (double)dividend/(double)divisor;  // 82/10=8.2
			Double quotient = (Double) (Int64)(result);  // 8
            remainder = (Double)((Double)(result - (double)quotient)*divisor);  // (8.2-8)*10=0.2*10=2
            return quotient;
        }

        /// <summary>
        /// Divide with remainder retaining underlying type
        /// </summary>
        /// <param name="dividend"></param>
        /// <param name="divisor"></param>
        /// <param name="remainder"></param>
        /// <returns></returns>
        [Obsolete("Use Divide(...).  Identical implementation...",true)]
		public static Single Div(Single dividend, Single divisor, out Single remainder)
        {
			// ReSharper disable once CompareOfFloatsByEqualityOperator
			if(divisor == 0) throw new DivideByZeroException();
            double result = (double)dividend/(double)divisor;  // 82/10=8.2
			Single quotient = (Single) (Int64)(result);  // 8
            remainder = (Single)((Single)(result - (double)quotient)*divisor);  // (8.2-8)*10=0.2*10=2
            return quotient;
        }

        /// <summary>
        /// Divide with remainder retaining underlying type
        /// </summary>
        /// <param name="dividend"></param>
        /// <param name="divisor"></param>
        /// <param name="remainder"></param>
        /// <returns></returns>
        [Obsolete("Use Divide(...).  Identical implementation...",true)]
		public static Decimal Div(Decimal dividend, Decimal divisor, out Decimal remainder)
        {
			// ReSharper disable once CompareOfFloatsByEqualityOperator
			if(divisor == 0) throw new DivideByZeroException();
            double result = (double)dividend/(double)divisor;  // 82/10=8.2
			Decimal quotient = (Decimal) (Int64)(result);  // 8
            remainder = (Decimal)((Decimal)(result - (double)quotient)*divisor);  // (8.2-8)*10=0.2*10=2
            return quotient;
        }

	}
}