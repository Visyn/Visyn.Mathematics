#region Copyright (c) 2015-2017 Visyn
//The MIT License(MIT)
//
//Copyright(c) 2015-2017 Visyn
//
//Permission is hereby granted, free of charge, to any person obtaining a copy
//of this software and associated documentation files (the "Software"), to deal
//in the Software without restriction, including without limitation the rights
//to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//copies of the Software, and to permit persons to whom the Software is
//furnished to do so, subject to the following conditions:

//The above copyright notice and this permission notice shall be included in all
//copies or substantial portions of the Software.

//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//SOFTWARE.
#endregion
#region Autogenerated T4 Text Template
// Autogenerated from T4 Text Template :	Modulo.tt
//											file:\C:\git\proto.temp\Visyn.Mathematics\Lib\Modulo.tt
// Autogeneration date/time:				8/13/2017 9:09:01 PM
#endregion
using System;
using Visyn.Mathematics;


namespace Visyn.Mathematics 
{
	public static partial class Numbers
	{
        /// <summary>
        /// value % mod limited to positive values
        /// </summary>
        /// <param name="value">Value to evaluate</param>
        /// <param name="mod">modulo</param>
        /// <returns>Value % mod [0,mod)</returns>
		public static Int32 ModuloPositive (Int32 value, Int32 mod) 
		{
			Int32 result = (Int32)(value % mod);
			return result < 0 ? (Int32)(result + mod) : result;		// Signed, check for < 0
		}

        /// <summary>
        /// value % mod limited to positive values
        /// </summary>
        /// <param name="value">Value to evaluate</param>
        /// <param name="mod">modulo</param>
        /// <returns>Value % mod [0,mod)</returns>
		public static Int64 ModuloPositive (Int64 value, Int64 mod) 
		{
			Int64 result = (Int64)(value % mod);
			return result < 0 ? (Int64)(result + mod) : result;		// Signed, check for < 0
		}

        /// <summary>
        /// value % mod limited to positive values
        /// </summary>
        /// <param name="value">Value to evaluate</param>
        /// <param name="mod">modulo</param>
        /// <returns>Value % mod [0,mod)</returns>
		public static Int16 ModuloPositive (Int16 value, Int16 mod) 
		{
			Int16 result = (Int16)(value % mod);
			return result < 0 ? (Int16)(result + mod) : result;		// Signed, check for < 0
		}

        /// <summary>
        /// value % mod limited to positive values
        /// </summary>
        /// <param name="value">Value to evaluate</param>
        /// <param name="mod">modulo</param>
        /// <returns>Value % mod [0,mod)</returns>
		public static Char ModuloPositive (Char value, Char mod) 
		{
			Char result = (Char)(value % mod);
			return result < 0 ? (Char)(result + mod) : result;		// Signed, check for < 0
		}

        /// <summary>
        /// value % mod limited to positive values
        /// </summary>
        /// <param name="value">Value to evaluate</param>
        /// <param name="mod">modulo</param>
        /// <returns>Value % mod [0,mod)</returns>
		public static UInt32 ModuloPositive (UInt32 value, UInt32 mod) 
		{
			return (UInt32)(value % mod);		// Unsigned, simply return result of Mod 
		}

        /// <summary>
        /// value % mod limited to positive values
        /// </summary>
        /// <param name="value">Value to evaluate</param>
        /// <param name="mod">modulo</param>
        /// <returns>Value % mod [0,mod)</returns>
		public static UInt64 ModuloPositive (UInt64 value, UInt64 mod) 
		{
			return (UInt64)(value % mod);		// Unsigned, simply return result of Mod 
		}

        /// <summary>
        /// value % mod limited to positive values
        /// </summary>
        /// <param name="value">Value to evaluate</param>
        /// <param name="mod">modulo</param>
        /// <returns>Value % mod [0,mod)</returns>
		public static UInt16 ModuloPositive (UInt16 value, UInt16 mod) 
		{
			return (UInt16)(value % mod);		// Unsigned, simply return result of Mod 
		}

        /// <summary>
        /// value % mod limited to positive values
        /// </summary>
        /// <param name="value">Value to evaluate</param>
        /// <param name="mod">modulo</param>
        /// <returns>Value % mod [0,mod)</returns>
		public static Byte ModuloPositive (Byte value, Byte mod) 
		{
			return (Byte)(value % mod);		// Unsigned, simply return result of Mod 
		}

        /// <summary>
        /// value % mod limited to positive values
        /// </summary>
        /// <param name="value">Value to evaluate</param>
        /// <param name="mod">modulo</param>
        /// <returns>Value % mod [0,mod)</returns>
		public static Double ModuloPositive (Double value, Double mod) 
		{
			Double result = (Double)(value % mod);
			return result < 0 ? (Double)(result + mod) : result;		// Signed, check for < 0
		}

        /// <summary>
        /// value % mod limited to positive values
        /// </summary>
        /// <param name="value">Value to evaluate</param>
        /// <param name="mod">modulo</param>
        /// <returns>Value % mod [0,mod)</returns>
		public static Single ModuloPositive (Single value, Single mod) 
		{
			Single result = (Single)(value % mod);
			return result < 0 ? (Single)(result + mod) : result;		// Signed, check for < 0
		}

        /// <summary>
        /// value % mod limited to positive values
        /// </summary>
        /// <param name="value">Value to evaluate</param>
        /// <param name="mod">modulo</param>
        /// <returns>Value % mod [0,mod)</returns>
		public static Decimal ModuloPositive (Decimal value, Decimal mod) 
		{
			Decimal result = (Decimal)(value % mod);
			return result < 0 ? (Decimal)(result + mod) : result;		// Signed, check for < 0
		}

	}
}