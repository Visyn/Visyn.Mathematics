#region Copyright (c) 2015-2017 Visyn
//The MIT License(MIT)
//
//Copyright(c) 2015-2017 Visyn
//
//Permission is hereby granted, free of charge, to any person obtaining a copy
//of this software and associated documentation files (the "Software"), to deal
//in the Software without restriction, including without limitation the rights
//to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//copies of the Software, and to permit persons to whom the Software is
//furnished to do so, subject to the following conditions:

//The above copyright notice and this permission notice shall be included in all
//copies or substantial portions of the Software.

//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//SOFTWARE.
#endregion
#region Autogenerated T4 Text Template
// Autogenerated from T4 Text Template :	ClampTests.tt
//											file:\C:\git\proto.temp\Visyn.Mathematics\Test\ClampTests.tt
// Autogeneration date/time:				8/13/2017 9:17:56 PM
#endregion

using System;
using NUnit.Framework;
using Visyn.Mathematics.Rand;

namespace Visyn.Mathematics.Test
{
	public class ClampTests
	{
        [Test()]
        public void ClampTest_Int32()
        {
			IRandom random = Rng<FastRng>.Unique(null);
		    var values1 = random.ExclusiveList(-1000000, 1000000,100);
            var mins = random.ExclusiveList(-1000000, 1000000,100);
            var maxs = random.ExclusiveList(-1000000, 1000000, 100);

            for (int i=0;i<100;i++)
            {
                var value1 = (Int32)values1[i];
                var min = (Int32)mins[i];
                var max = (Int32)maxs[i];

                var result1 = value1.Clamp(min,max);
				Assert.AreEqual(min,(Int32)mins[i],$"Min changed: was {mins[i]} now {min}");
                Assert.AreEqual(max,(Int32)maxs[i],$"Max changed: was {maxs[i]} now {max}");
                Assert.AreEqual(value1,(Int32)values1[i],$"Value changed: was {values1[i]} now {value1}");

                Assert.GreaterOrEqual(result1,Math.Min(min,max),$"GreaterThan extension failed: {result1} < Math.Min({min},{max})");
                Assert.LessOrEqual(result1,Math.Max(min,max),$"LessThan extension failed: {result1} > Math.Max({min},{max})");

                var result2 = Numbers.Clamp(value1,min, max);
                Assert.GreaterOrEqual(result2,Math.Min(min,max),$"GreaterThan failed: {result2} < Math.Min({min},{max})");
                Assert.LessOrEqual(result2,Math.Max(min,max),$"LessThan failed: {result2} > Math.Max({min},{max})");
                Assert.AreEqual(result1,result2);

			}
		}
        [Test()]
        public void ClampTest_Int64()
        {
			IRandom random = Rng<FastRng>.Unique(null);
		    var values1 = random.ExclusiveList(-1000000, 1000000,100);
            var mins = random.ExclusiveList(-1000000, 1000000,100);
            var maxs = random.ExclusiveList(-1000000, 1000000, 100);

            for (int i=0;i<100;i++)
            {
                var value1 = (Int64)values1[i];
                var min = (Int64)mins[i];
                var max = (Int64)maxs[i];

                var result1 = value1.Clamp(min,max);
				Assert.AreEqual(min,(Int64)mins[i],$"Min changed: was {mins[i]} now {min}");
                Assert.AreEqual(max,(Int64)maxs[i],$"Max changed: was {maxs[i]} now {max}");
                Assert.AreEqual(value1,(Int64)values1[i],$"Value changed: was {values1[i]} now {value1}");

                Assert.GreaterOrEqual(result1,Math.Min(min,max),$"GreaterThan extension failed: {result1} < Math.Min({min},{max})");
                Assert.LessOrEqual(result1,Math.Max(min,max),$"LessThan extension failed: {result1} > Math.Max({min},{max})");

                var result2 = Numbers.Clamp(value1,min, max);
                Assert.GreaterOrEqual(result2,Math.Min(min,max),$"GreaterThan failed: {result2} < Math.Min({min},{max})");
                Assert.LessOrEqual(result2,Math.Max(min,max),$"LessThan failed: {result2} > Math.Max({min},{max})");
                Assert.AreEqual(result1,result2);

			}
		}
        [Test()]
        public void ClampTest_Int16()
        {
			IRandom random = Rng<FastRng>.Unique(null);
		    var values1 = random.ExclusiveList(-1000000, 1000000,100);
            var mins = random.ExclusiveList(-1000000, 1000000,100);
            var maxs = random.ExclusiveList(-1000000, 1000000, 100);

            for (int i=0;i<100;i++)
            {
                var value1 = (Int16)values1[i];
                var min = (Int16)mins[i];
                var max = (Int16)maxs[i];

                var result1 = value1.Clamp(min,max);
				Assert.AreEqual(min,(Int16)mins[i],$"Min changed: was {mins[i]} now {min}");
                Assert.AreEqual(max,(Int16)maxs[i],$"Max changed: was {maxs[i]} now {max}");
                Assert.AreEqual(value1,(Int16)values1[i],$"Value changed: was {values1[i]} now {value1}");

                Assert.GreaterOrEqual(result1,Math.Min(min,max),$"GreaterThan extension failed: {result1} < Math.Min({min},{max})");
                Assert.LessOrEqual(result1,Math.Max(min,max),$"LessThan extension failed: {result1} > Math.Max({min},{max})");

                var result2 = Numbers.Clamp(value1,min, max);
                Assert.GreaterOrEqual(result2,Math.Min(min,max),$"GreaterThan failed: {result2} < Math.Min({min},{max})");
                Assert.LessOrEqual(result2,Math.Max(min,max),$"LessThan failed: {result2} > Math.Max({min},{max})");
                Assert.AreEqual(result1,result2);

			}
		}
        [Test()]
        public void ClampTest_Char()
        {
			IRandom random = Rng<FastRng>.Unique(null);
		    var values1 = random.ExclusiveList(-1000000, 1000000,100);
            var mins = random.ExclusiveList(-1000000, 1000000,100);
            var maxs = random.ExclusiveList(-1000000, 1000000, 100);

            for (int i=0;i<100;i++)
            {
                var value1 = (Char)values1[i];
                var min = (Char)mins[i];
                var max = (Char)maxs[i];

                var result1 = value1.Clamp(min,max);
				Assert.AreEqual(min,(Char)mins[i],$"Min changed: was {mins[i]} now {min}");
                Assert.AreEqual(max,(Char)maxs[i],$"Max changed: was {maxs[i]} now {max}");
                Assert.AreEqual(value1,(Char)values1[i],$"Value changed: was {values1[i]} now {value1}");

                Assert.GreaterOrEqual(result1,Math.Min(min,max),$"GreaterThan extension failed: {result1} < Math.Min({min},{max})");
                Assert.LessOrEqual(result1,Math.Max(min,max),$"LessThan extension failed: {result1} > Math.Max({min},{max})");

                var result2 = Numbers.Clamp(value1,min, max);
                Assert.GreaterOrEqual(result2,Math.Min(min,max),$"GreaterThan failed: {result2} < Math.Min({min},{max})");
                Assert.LessOrEqual(result2,Math.Max(min,max),$"LessThan failed: {result2} > Math.Max({min},{max})");
                Assert.AreEqual(result1,result2);

			}
		}
        [Test()]
        public void ClampTest_UInt32()
        {
			IRandom random = Rng<FastRng>.Unique(null);
		    var values1 = random.ExclusiveList(-1000000, 1000000,100);
            var mins = random.ExclusiveList(-1000000, 1000000,100);
            var maxs = random.ExclusiveList(-1000000, 1000000, 100);

            for (int i=0;i<100;i++)
            {
                var value1 = (UInt32)values1[i];
                var min = (UInt32)mins[i];
                var max = (UInt32)maxs[i];

                var result1 = value1.Clamp(min,max);
				Assert.AreEqual(min,(UInt32)mins[i],$"Min changed: was {mins[i]} now {min}");
                Assert.AreEqual(max,(UInt32)maxs[i],$"Max changed: was {maxs[i]} now {max}");
                Assert.AreEqual(value1,(UInt32)values1[i],$"Value changed: was {values1[i]} now {value1}");

                Assert.GreaterOrEqual(result1,Math.Min(min,max),$"GreaterThan extension failed: {result1} < Math.Min({min},{max})");
                Assert.LessOrEqual(result1,Math.Max(min,max),$"LessThan extension failed: {result1} > Math.Max({min},{max})");

                var result2 = Numbers.Clamp(value1,min, max);
                Assert.GreaterOrEqual(result2,Math.Min(min,max),$"GreaterThan failed: {result2} < Math.Min({min},{max})");
                Assert.LessOrEqual(result2,Math.Max(min,max),$"LessThan failed: {result2} > Math.Max({min},{max})");
                Assert.AreEqual(result1,result2);

			}
		}
        [Test()]
        public void ClampTest_UInt64()
        {
			IRandom random = Rng<FastRng>.Unique(null);
		    var values1 = random.ExclusiveList(-1000000, 1000000,100);
            var mins = random.ExclusiveList(-1000000, 1000000,100);
            var maxs = random.ExclusiveList(-1000000, 1000000, 100);

            for (int i=0;i<100;i++)
            {
                var value1 = (UInt64)values1[i];
                var min = (UInt64)mins[i];
                var max = (UInt64)maxs[i];

                var result1 = value1.Clamp(min,max);
				Assert.AreEqual(min,(UInt64)mins[i],$"Min changed: was {mins[i]} now {min}");
                Assert.AreEqual(max,(UInt64)maxs[i],$"Max changed: was {maxs[i]} now {max}");
                Assert.AreEqual(value1,(UInt64)values1[i],$"Value changed: was {values1[i]} now {value1}");

                Assert.GreaterOrEqual(result1,Math.Min(min,max),$"GreaterThan extension failed: {result1} < Math.Min({min},{max})");
                Assert.LessOrEqual(result1,Math.Max(min,max),$"LessThan extension failed: {result1} > Math.Max({min},{max})");

                var result2 = Numbers.Clamp(value1,min, max);
                Assert.GreaterOrEqual(result2,Math.Min(min,max),$"GreaterThan failed: {result2} < Math.Min({min},{max})");
                Assert.LessOrEqual(result2,Math.Max(min,max),$"LessThan failed: {result2} > Math.Max({min},{max})");
                Assert.AreEqual(result1,result2);

			}
		}
        [Test()]
        public void ClampTest_UInt16()
        {
			IRandom random = Rng<FastRng>.Unique(null);
		    var values1 = random.ExclusiveList(-1000000, 1000000,100);
            var mins = random.ExclusiveList(-1000000, 1000000,100);
            var maxs = random.ExclusiveList(-1000000, 1000000, 100);

            for (int i=0;i<100;i++)
            {
                var value1 = (UInt16)values1[i];
                var min = (UInt16)mins[i];
                var max = (UInt16)maxs[i];

                var result1 = value1.Clamp(min,max);
				Assert.AreEqual(min,(UInt16)mins[i],$"Min changed: was {mins[i]} now {min}");
                Assert.AreEqual(max,(UInt16)maxs[i],$"Max changed: was {maxs[i]} now {max}");
                Assert.AreEqual(value1,(UInt16)values1[i],$"Value changed: was {values1[i]} now {value1}");

                Assert.GreaterOrEqual(result1,Math.Min(min,max),$"GreaterThan extension failed: {result1} < Math.Min({min},{max})");
                Assert.LessOrEqual(result1,Math.Max(min,max),$"LessThan extension failed: {result1} > Math.Max({min},{max})");

                var result2 = Numbers.Clamp(value1,min, max);
                Assert.GreaterOrEqual(result2,Math.Min(min,max),$"GreaterThan failed: {result2} < Math.Min({min},{max})");
                Assert.LessOrEqual(result2,Math.Max(min,max),$"LessThan failed: {result2} > Math.Max({min},{max})");
                Assert.AreEqual(result1,result2);

			}
		}
        [Test()]
        public void ClampTest_Byte()
        {
			IRandom random = Rng<FastRng>.Unique(null);
		    var values1 = random.ExclusiveList(-1000000, 1000000,100);
            var mins = random.ExclusiveList(-1000000, 1000000,100);
            var maxs = random.ExclusiveList(-1000000, 1000000, 100);

            for (int i=0;i<100;i++)
            {
                var value1 = (Byte)values1[i];
                var min = (Byte)mins[i];
                var max = (Byte)maxs[i];

                var result1 = value1.Clamp(min,max);
				Assert.AreEqual(min,(Byte)mins[i],$"Min changed: was {mins[i]} now {min}");
                Assert.AreEqual(max,(Byte)maxs[i],$"Max changed: was {maxs[i]} now {max}");
                Assert.AreEqual(value1,(Byte)values1[i],$"Value changed: was {values1[i]} now {value1}");

                Assert.GreaterOrEqual(result1,Math.Min(min,max),$"GreaterThan extension failed: {result1} < Math.Min({min},{max})");
                Assert.LessOrEqual(result1,Math.Max(min,max),$"LessThan extension failed: {result1} > Math.Max({min},{max})");

                var result2 = Numbers.Clamp(value1,min, max);
                Assert.GreaterOrEqual(result2,Math.Min(min,max),$"GreaterThan failed: {result2} < Math.Min({min},{max})");
                Assert.LessOrEqual(result2,Math.Max(min,max),$"LessThan failed: {result2} > Math.Max({min},{max})");
                Assert.AreEqual(result1,result2);

			}
		}
        [Test()]
        public void ClampTest_Double()
        {
			IRandom random = Rng<FastRng>.Unique(null);
		    var values1 = random.ExclusiveList(-1000000, 1000000,100);
            var mins = random.ExclusiveList(-1000000, 1000000,100);
            var maxs = random.ExclusiveList(-1000000, 1000000, 100);

            for (int i=0;i<100;i++)
            {
                var value1 = (Double)values1[i];
                var min = (Double)mins[i];
                var max = (Double)maxs[i];

                var result1 = value1.Clamp(min,max);
				Assert.AreEqual(min,(Double)mins[i],$"Min changed: was {mins[i]} now {min}");
                Assert.AreEqual(max,(Double)maxs[i],$"Max changed: was {maxs[i]} now {max}");
                Assert.AreEqual(value1,(Double)values1[i],$"Value changed: was {values1[i]} now {value1}");

                Assert.GreaterOrEqual(result1,Math.Min(min,max),$"GreaterThan extension failed: {result1} < Math.Min({min},{max})");
                Assert.LessOrEqual(result1,Math.Max(min,max),$"LessThan extension failed: {result1} > Math.Max({min},{max})");

                var result2 = Numbers.Clamp(value1,min, max);
                Assert.GreaterOrEqual(result2,Math.Min(min,max),$"GreaterThan failed: {result2} < Math.Min({min},{max})");
                Assert.LessOrEqual(result2,Math.Max(min,max),$"LessThan failed: {result2} > Math.Max({min},{max})");
                Assert.AreEqual(result1,result2);

			}
		}
        [Test()]
        public void ClampTest_Single()
        {
			IRandom random = Rng<FastRng>.Unique(null);
		    var values1 = random.ExclusiveList(-1000000, 1000000,100);
            var mins = random.ExclusiveList(-1000000, 1000000,100);
            var maxs = random.ExclusiveList(-1000000, 1000000, 100);

            for (int i=0;i<100;i++)
            {
                var value1 = (Single)values1[i];
                var min = (Single)mins[i];
                var max = (Single)maxs[i];

                var result1 = value1.Clamp(min,max);
				Assert.AreEqual(min,(Single)mins[i],$"Min changed: was {mins[i]} now {min}");
                Assert.AreEqual(max,(Single)maxs[i],$"Max changed: was {maxs[i]} now {max}");
                Assert.AreEqual(value1,(Single)values1[i],$"Value changed: was {values1[i]} now {value1}");

                Assert.GreaterOrEqual(result1,Math.Min(min,max),$"GreaterThan extension failed: {result1} < Math.Min({min},{max})");
                Assert.LessOrEqual(result1,Math.Max(min,max),$"LessThan extension failed: {result1} > Math.Max({min},{max})");

                var result2 = Numbers.Clamp(value1,min, max);
                Assert.GreaterOrEqual(result2,Math.Min(min,max),$"GreaterThan failed: {result2} < Math.Min({min},{max})");
                Assert.LessOrEqual(result2,Math.Max(min,max),$"LessThan failed: {result2} > Math.Max({min},{max})");
                Assert.AreEqual(result1,result2);

			}
		}
        [Test()]
        public void ClampTest_Decimal()
        {
			IRandom random = Rng<FastRng>.Unique(null);
		    var values1 = random.ExclusiveList(-1000000, 1000000,100);
            var mins = random.ExclusiveList(-1000000, 1000000,100);
            var maxs = random.ExclusiveList(-1000000, 1000000, 100);

            for (int i=0;i<100;i++)
            {
                var value1 = (Decimal)values1[i];
                var min = (Decimal)mins[i];
                var max = (Decimal)maxs[i];

                var result1 = value1.Clamp(min,max);
				Assert.AreEqual(min,(Decimal)mins[i],$"Min changed: was {mins[i]} now {min}");
                Assert.AreEqual(max,(Decimal)maxs[i],$"Max changed: was {maxs[i]} now {max}");
                Assert.AreEqual(value1,(Decimal)values1[i],$"Value changed: was {values1[i]} now {value1}");

                Assert.GreaterOrEqual(result1,Math.Min(min,max),$"GreaterThan extension failed: {result1} < Math.Min({min},{max})");
                Assert.LessOrEqual(result1,Math.Max(min,max),$"LessThan extension failed: {result1} > Math.Max({min},{max})");

                var result2 = Numbers.Clamp(value1,min, max);
                Assert.GreaterOrEqual(result2,Math.Min(min,max),$"GreaterThan failed: {result2} < Math.Min({min},{max})");
                Assert.LessOrEqual(result2,Math.Max(min,max),$"LessThan failed: {result2} > Math.Max({min},{max})");
                Assert.AreEqual(result1,result2);

			}
		}
	}
}




