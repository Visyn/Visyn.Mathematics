<#@ include file="../Lib/T4/NumericTypes.ttinclude" #>
using NUnit.Framework;
using System.Linq;
using System.Collections.Generic;
using Visyn.Mathematics;
using Visyn.Mathematics.Rand;

namespace Visyn.Mathmatics.Test
{
	public class MinTests
	{
		private static readonly IRandom random = Rng<FastRng>.Unique(null);
<# foreach (var type in numbericTypes) { #>
		// Min Tests for Type: <#= type.Name #>
<# if(type != typeof(char))  { #>
        private static readonly IList<<#= type.Name #>> listA<#= type.Name #> = random.ExclusiveList<<#= type.Name #>>(<#= type.Name #>.MinValue/2, <#= type.Name #>.MaxValue/2,100);
        private static readonly IList<<#= type.Name #>> listB<#= type.Name #> = random.ExclusiveList<<#= type.Name #>>(<#= type.Name #>.MinValue/2, <#= type.Name #>.MaxValue/2,100);
<#} else {#>
        private static readonly IList<<#= type.Name #>> listA<#= type.Name #> = random.ExclusiveList<int>(<#= type.Name #>.MinValue, <#= type.Name #>.MaxValue,100).Select((i)=>(char)i).ToList();
        private static readonly IList<<#= type.Name #>> listB<#= type.Name #> = random.ExclusiveList<int>(<#= type.Name #>.MinValue, <#= type.Name #>.MaxValue,100).Select((i)=>(char)i).ToList();
<#}#>
        [Test()]
        public void MinTest_<#= type.Name #>()
        {
            for (int i=0;i<100;i++)
            {
                var a = (<#= type.Name #>)listA<#= type.Name #>[i];
                var b = (<#= type.Name #>)listB<#= type.Name #>[i];
				Assert.AreEqual(Math.Min(a,b),Numbers.Min(a,b));
				Assert.AreEqual(Math.Min(a, b), Numbers.Min(b, a));
                <#= type.Name #>? nullA = a;
                <#= type.Name #>? nullB = b;
                Assert.AreEqual(Math.Min(a, b), Numbers.Min(nullA, nullB));
                Assert.AreEqual(Math.Min(a, b), Numbers.Min(nullB, nullA));
                Assert.AreEqual(Math.Min(nullA.Value, nullB.Value), Numbers.Min(nullA, nullB));
			}
		}

		[Test]
        public void MinTest_Nullable<#= type.Name #>()
        {
            for (int i=0;i<100;i++)
            {
                var a = (<#= type.Name #>)listA<#= type.Name #>[i];
                var b = (<#= type.Name #>)listB<#= type.Name #>[i];
                <#= type.Name #>? nullA = a;
                <#= type.Name #>? nullB = b;
                Assert.AreEqual(Math.Min(a, b), Numbers.Min(nullA, nullB));
                Assert.AreEqual(Math.Min(a, b), Numbers.Min(nullB, nullA));
                Assert.AreEqual(Math.Min(nullA.Value, nullB.Value), Numbers.Min(nullA, nullB));
			}
		}

		[Test]
        public void MinTest_Nullable<#= type.Name #>_WithNull()
        {
            for (int i=0;i<100;i++)
            {
                var a = (<#= type.Name #>)listA<#= type.Name #>[i];
                <#= type.Name #>? nullA = a;
                Assert.AreEqual(Math.Min(a, <#= type.Name #>.MaxValue), Numbers.Min(nullA, null));
                Assert.AreEqual(Math.Min(a, <#= type.Name #>.MaxValue), Numbers.Min(null, nullA));
                Assert.AreEqual(Math.Min(nullA.Value, <#= type.Name #>.MaxValue), Numbers.Min(nullA, null));
			}
		}

				[Test]
        public void MinTest_Nullable<#= type.Name #>_WithDefault()
        {
            for (int i=0;i<100;i++)
            {
                var a = (<#= type.Name #>)listA<#= type.Name #>[i];
                <#= type.Name #>? nullA = a;
                Assert.AreEqual(Math.Min(a, (<#= type.Name #>)0), Numbers.Min(nullA, null,(<#= type.Name #>)0));
                Assert.AreEqual(Math.Min(a, (<#= type.Name #>)0), Numbers.Min(null, nullA,(<#= type.Name #>)0));
                Assert.AreEqual(Math.Min(nullA.Value, (<#= type.Name #>)0), Numbers.Min(nullA, null,(<#= type.Name #>)0));
			}
		}

<#	} #>
	}
}




