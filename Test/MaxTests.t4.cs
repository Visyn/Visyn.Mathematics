#region Copyright (c) 2015-2017 Visyn
//The MIT License(MIT)
//
//Copyright(c) 2015-2017 Visyn
//
//Permission is hereby granted, free of charge, to any person obtaining a copy
//of this software and associated documentation files (the "Software"), to deal
//in the Software without restriction, including without limitation the rights
//to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//copies of the Software, and to permit persons to whom the Software is
//furnished to do so, subject to the following conditions:

//The above copyright notice and this permission notice shall be included in all
//copies or substantial portions of the Software.

//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//SOFTWARE.
#endregion
#region Autogenerated T4 Text Template
// Autogenerated from T4 Text Template :	MaxTests.tt
//											file:\C:\git\proto.temp\Visyn.Mathematics\Test\MaxTests.tt
// Autogeneration date/time:				8/13/2017 9:18:51 PM
#endregion

using System;
using System.Collections.Generic;
using System.Linq;
using NUnit.Framework;
using Visyn.Mathematics.Rand;

namespace Visyn.Mathematics.Test
{
	public class MaxTests
	{
		private static readonly IRandom random = Rng<FastRng>.Unique(null);
		// Max Tests for Type: Int32
        private static readonly IList<Int32> listAInt32 = random.ExclusiveList<Int32>(Int32.MinValue/2, Int32.MaxValue/2,100);
        private static readonly IList<Int32> listBInt32 = random.ExclusiveList<Int32>(Int32.MinValue/2, Int32.MaxValue/2,100);
        [Test()]
        public void MaxTest_Int32()
        {
            for (int i=0;i<100;i++)
            {
                var a = (Int32)listAInt32[i];
                var b = (Int32)listBInt32[i];
				Assert.AreEqual(Math.Max(a,b),Numbers.Max(a,b),$"#[{i}] a:{a} b:{b} Max:{Numbers.Max(a,b)}");
				Assert.AreEqual(Math.Max(a, b), Numbers.Max(b, a),$"#[{i}] a:{a} b:{b} Max:{Numbers.Max(b,a)}");
			}
		}

		[Test]
        public void MaxTest_NullableInt32()
        {
            for (int i=0;i<100;i++)
            {
                var a = (Int32)listAInt32[i];
                var b = (Int32)listBInt32[i];
                Int32? nullA = a;
                Int32? nullB = b;
                Assert.AreEqual(Math.Max(a, b), Numbers.Max(nullA, nullB));
                Assert.AreEqual(Math.Max(a, b), Numbers.Max(nullB, nullA));
                Assert.AreEqual(Math.Max(nullA.Value, nullB.Value), Numbers.Max(nullA, nullB));
			}
		}

		[Test]
        public void MaxTest_NullableInt32_WithNull()
        {
            for (int i=0;i<100;i++)
            {
                var a = (Int32)listAInt32[i];
                Int32? nullA = a;
                Assert.AreEqual(Math.Max(a, Int32.MinValue), Numbers.Max(nullA, null),$"#[{i}] a:{nullA} b:{null} Max:{Numbers.Max(nullA, null)}");
                Assert.AreEqual(Math.Max(a, Int32.MinValue), Numbers.Max(null, nullA),$"#[{i}] a:{nullA} b:{null} Max:{Numbers.Max(null, nullA)}");
                Assert.AreEqual(Math.Max(nullA.Value, Int32.MinValue), Numbers.Max(nullA, null),$"#[{i}] a:{nullA} b:{null} Max:{Numbers.Max(nullA, null)}");
			}
		}

				[Test]
        public void MaxTest_NullableInt32_WithDefault()
        {
            for (int i=0;i<100;i++)
            {
                var a = (Int32)listAInt32[i];
                Int32? nullA = a;
                Assert.AreEqual(Math.Max(a, (Int32)0), Numbers.Max(nullA, null,(Int32)0),$"#[{i}] a:{nullA} b:{null} Max:{Numbers.Max(nullA, null,(Int32)0)}");
                Assert.AreEqual(Math.Max(a, (Int32)0), Numbers.Max(null, nullA,(Int32)0),$"#[{i}] a:{nullA} b:{null} Max:{Numbers.Max(null, nullA,(Int32)0)}");
                Assert.AreEqual(Math.Max(nullA.Value, (Int32)0), Numbers.Max(nullA, null,(Int32)0),$"#[{i}] a:{nullA} b:{null} Max:{Numbers.Max(nullA, null,(Int32)0)}");
			}
		}

		// Max Tests for Type: Int64
        private static readonly IList<Int64> listAInt64 = random.ExclusiveList<Int64>(Int64.MinValue/2, Int64.MaxValue/2,100);
        private static readonly IList<Int64> listBInt64 = random.ExclusiveList<Int64>(Int64.MinValue/2, Int64.MaxValue/2,100);
        [Test()]
        public void MaxTest_Int64()
        {
            for (int i=0;i<100;i++)
            {
                var a = (Int64)listAInt64[i];
                var b = (Int64)listBInt64[i];
				Assert.AreEqual(Math.Max(a,b),Numbers.Max(a,b),$"#[{i}] a:{a} b:{b} Max:{Numbers.Max(a,b)}");
				Assert.AreEqual(Math.Max(a, b), Numbers.Max(b, a),$"#[{i}] a:{a} b:{b} Max:{Numbers.Max(b,a)}");
			}
		}

		[Test]
        public void MaxTest_NullableInt64()
        {
            for (int i=0;i<100;i++)
            {
                var a = (Int64)listAInt64[i];
                var b = (Int64)listBInt64[i];
                Int64? nullA = a;
                Int64? nullB = b;
                Assert.AreEqual(Math.Max(a, b), Numbers.Max(nullA, nullB));
                Assert.AreEqual(Math.Max(a, b), Numbers.Max(nullB, nullA));
                Assert.AreEqual(Math.Max(nullA.Value, nullB.Value), Numbers.Max(nullA, nullB));
			}
		}

		[Test]
        public void MaxTest_NullableInt64_WithNull()
        {
            for (int i=0;i<100;i++)
            {
                var a = (Int64)listAInt64[i];
                Int64? nullA = a;
                Assert.AreEqual(Math.Max(a, Int64.MinValue), Numbers.Max(nullA, null),$"#[{i}] a:{nullA} b:{null} Max:{Numbers.Max(nullA, null)}");
                Assert.AreEqual(Math.Max(a, Int64.MinValue), Numbers.Max(null, nullA),$"#[{i}] a:{nullA} b:{null} Max:{Numbers.Max(null, nullA)}");
                Assert.AreEqual(Math.Max(nullA.Value, Int64.MinValue), Numbers.Max(nullA, null),$"#[{i}] a:{nullA} b:{null} Max:{Numbers.Max(nullA, null)}");
			}
		}

				[Test]
        public void MaxTest_NullableInt64_WithDefault()
        {
            for (int i=0;i<100;i++)
            {
                var a = (Int64)listAInt64[i];
                Int64? nullA = a;
                Assert.AreEqual(Math.Max(a, (Int64)0), Numbers.Max(nullA, null,(Int64)0),$"#[{i}] a:{nullA} b:{null} Max:{Numbers.Max(nullA, null,(Int64)0)}");
                Assert.AreEqual(Math.Max(a, (Int64)0), Numbers.Max(null, nullA,(Int64)0),$"#[{i}] a:{nullA} b:{null} Max:{Numbers.Max(null, nullA,(Int64)0)}");
                Assert.AreEqual(Math.Max(nullA.Value, (Int64)0), Numbers.Max(nullA, null,(Int64)0),$"#[{i}] a:{nullA} b:{null} Max:{Numbers.Max(nullA, null,(Int64)0)}");
			}
		}

		// Max Tests for Type: Int16
        private static readonly IList<Int16> listAInt16 = random.ExclusiveList<Int16>(Int16.MinValue/2, Int16.MaxValue/2,100);
        private static readonly IList<Int16> listBInt16 = random.ExclusiveList<Int16>(Int16.MinValue/2, Int16.MaxValue/2,100);
        [Test()]
        public void MaxTest_Int16()
        {
            for (int i=0;i<100;i++)
            {
                var a = (Int16)listAInt16[i];
                var b = (Int16)listBInt16[i];
				Assert.AreEqual(Math.Max(a,b),Numbers.Max(a,b),$"#[{i}] a:{a} b:{b} Max:{Numbers.Max(a,b)}");
				Assert.AreEqual(Math.Max(a, b), Numbers.Max(b, a),$"#[{i}] a:{a} b:{b} Max:{Numbers.Max(b,a)}");
			}
		}

		[Test]
        public void MaxTest_NullableInt16()
        {
            for (int i=0;i<100;i++)
            {
                var a = (Int16)listAInt16[i];
                var b = (Int16)listBInt16[i];
                Int16? nullA = a;
                Int16? nullB = b;
                Assert.AreEqual(Math.Max(a, b), Numbers.Max(nullA, nullB));
                Assert.AreEqual(Math.Max(a, b), Numbers.Max(nullB, nullA));
                Assert.AreEqual(Math.Max(nullA.Value, nullB.Value), Numbers.Max(nullA, nullB));
			}
		}

		[Test]
        public void MaxTest_NullableInt16_WithNull()
        {
            for (int i=0;i<100;i++)
            {
                var a = (Int16)listAInt16[i];
                Int16? nullA = a;
                Assert.AreEqual(Math.Max(a, Int16.MinValue), Numbers.Max(nullA, null),$"#[{i}] a:{nullA} b:{null} Max:{Numbers.Max(nullA, null)}");
                Assert.AreEqual(Math.Max(a, Int16.MinValue), Numbers.Max(null, nullA),$"#[{i}] a:{nullA} b:{null} Max:{Numbers.Max(null, nullA)}");
                Assert.AreEqual(Math.Max(nullA.Value, Int16.MinValue), Numbers.Max(nullA, null),$"#[{i}] a:{nullA} b:{null} Max:{Numbers.Max(nullA, null)}");
			}
		}

				[Test]
        public void MaxTest_NullableInt16_WithDefault()
        {
            for (int i=0;i<100;i++)
            {
                var a = (Int16)listAInt16[i];
                Int16? nullA = a;
                Assert.AreEqual(Math.Max(a, (Int16)0), Numbers.Max(nullA, null,(Int16)0),$"#[{i}] a:{nullA} b:{null} Max:{Numbers.Max(nullA, null,(Int16)0)}");
                Assert.AreEqual(Math.Max(a, (Int16)0), Numbers.Max(null, nullA,(Int16)0),$"#[{i}] a:{nullA} b:{null} Max:{Numbers.Max(null, nullA,(Int16)0)}");
                Assert.AreEqual(Math.Max(nullA.Value, (Int16)0), Numbers.Max(nullA, null,(Int16)0),$"#[{i}] a:{nullA} b:{null} Max:{Numbers.Max(nullA, null,(Int16)0)}");
			}
		}

		// Max Tests for Type: Char
        private static readonly IList<Char> listAChar = random.ExclusiveList<int>(Char.MinValue, Char.MaxValue,100).Select((i)=>(char)i).ToList();
        private static readonly IList<Char> listBChar = random.ExclusiveList<int>(Char.MinValue, Char.MaxValue,100).Select((i)=>(char)i).ToList();
        [Test()]
        public void MaxTest_Char()
        {
            for (int i=0;i<100;i++)
            {
                var a = (Char)listAChar[i];
                var b = (Char)listBChar[i];
				Assert.AreEqual(Math.Max(a,b),Numbers.Max(a,b),$"#[{i}] a:{a} b:{b} Max:{Numbers.Max(a,b)}");
				Assert.AreEqual(Math.Max(a, b), Numbers.Max(b, a),$"#[{i}] a:{a} b:{b} Max:{Numbers.Max(b,a)}");
			}
		}

		[Test]
        public void MaxTest_NullableChar()
        {
            for (int i=0;i<100;i++)
            {
                var a = (Char)listAChar[i];
                var b = (Char)listBChar[i];
                Char? nullA = a;
                Char? nullB = b;
                Assert.AreEqual(Math.Max(a, b), Numbers.Max(nullA, nullB));
                Assert.AreEqual(Math.Max(a, b), Numbers.Max(nullB, nullA));
                Assert.AreEqual(Math.Max(nullA.Value, nullB.Value), Numbers.Max(nullA, nullB));
			}
		}

		[Test]
        public void MaxTest_NullableChar_WithNull()
        {
            for (int i=0;i<100;i++)
            {
                var a = (Char)listAChar[i];
                Char? nullA = a;
                Assert.AreEqual(Math.Max(a, Char.MinValue), Numbers.Max(nullA, null),$"#[{i}] a:{nullA} b:{null} Max:{Numbers.Max(nullA, null)}");
                Assert.AreEqual(Math.Max(a, Char.MinValue), Numbers.Max(null, nullA),$"#[{i}] a:{nullA} b:{null} Max:{Numbers.Max(null, nullA)}");
                Assert.AreEqual(Math.Max(nullA.Value, Char.MinValue), Numbers.Max(nullA, null),$"#[{i}] a:{nullA} b:{null} Max:{Numbers.Max(nullA, null)}");
			}
		}

				[Test]
        public void MaxTest_NullableChar_WithDefault()
        {
            for (int i=0;i<100;i++)
            {
                var a = (Char)listAChar[i];
                Char? nullA = a;
                Assert.AreEqual(Math.Max(a, (Char)0), Numbers.Max(nullA, null,(Char)0),$"#[{i}] a:{nullA} b:{null} Max:{Numbers.Max(nullA, null,(Char)0)}");
                Assert.AreEqual(Math.Max(a, (Char)0), Numbers.Max(null, nullA,(Char)0),$"#[{i}] a:{nullA} b:{null} Max:{Numbers.Max(null, nullA,(Char)0)}");
                Assert.AreEqual(Math.Max(nullA.Value, (Char)0), Numbers.Max(nullA, null,(Char)0),$"#[{i}] a:{nullA} b:{null} Max:{Numbers.Max(nullA, null,(Char)0)}");
			}
		}

		// Max Tests for Type: UInt32
        private static readonly IList<UInt32> listAUInt32 = random.ExclusiveList<UInt32>(UInt32.MinValue/2, UInt32.MaxValue/2,100);
        private static readonly IList<UInt32> listBUInt32 = random.ExclusiveList<UInt32>(UInt32.MinValue/2, UInt32.MaxValue/2,100);
        [Test()]
        public void MaxTest_UInt32()
        {
            for (int i=0;i<100;i++)
            {
                var a = (UInt32)listAUInt32[i];
                var b = (UInt32)listBUInt32[i];
				Assert.AreEqual(Math.Max(a,b),Numbers.Max(a,b),$"#[{i}] a:{a} b:{b} Max:{Numbers.Max(a,b)}");
				Assert.AreEqual(Math.Max(a, b), Numbers.Max(b, a),$"#[{i}] a:{a} b:{b} Max:{Numbers.Max(b,a)}");
			}
		}

		[Test]
        public void MaxTest_NullableUInt32()
        {
            for (int i=0;i<100;i++)
            {
                var a = (UInt32)listAUInt32[i];
                var b = (UInt32)listBUInt32[i];
                UInt32? nullA = a;
                UInt32? nullB = b;
                Assert.AreEqual(Math.Max(a, b), Numbers.Max(nullA, nullB));
                Assert.AreEqual(Math.Max(a, b), Numbers.Max(nullB, nullA));
                Assert.AreEqual(Math.Max(nullA.Value, nullB.Value), Numbers.Max(nullA, nullB));
			}
		}

		[Test]
        public void MaxTest_NullableUInt32_WithNull()
        {
            for (int i=0;i<100;i++)
            {
                var a = (UInt32)listAUInt32[i];
                UInt32? nullA = a;
                Assert.AreEqual(Math.Max(a, UInt32.MinValue), Numbers.Max(nullA, null),$"#[{i}] a:{nullA} b:{null} Max:{Numbers.Max(nullA, null)}");
                Assert.AreEqual(Math.Max(a, UInt32.MinValue), Numbers.Max(null, nullA),$"#[{i}] a:{nullA} b:{null} Max:{Numbers.Max(null, nullA)}");
                Assert.AreEqual(Math.Max(nullA.Value, UInt32.MinValue), Numbers.Max(nullA, null),$"#[{i}] a:{nullA} b:{null} Max:{Numbers.Max(nullA, null)}");
			}
		}

				[Test]
        public void MaxTest_NullableUInt32_WithDefault()
        {
            for (int i=0;i<100;i++)
            {
                var a = (UInt32)listAUInt32[i];
                UInt32? nullA = a;
                Assert.AreEqual(Math.Max(a, (UInt32)0), Numbers.Max(nullA, null,(UInt32)0),$"#[{i}] a:{nullA} b:{null} Max:{Numbers.Max(nullA, null,(UInt32)0)}");
                Assert.AreEqual(Math.Max(a, (UInt32)0), Numbers.Max(null, nullA,(UInt32)0),$"#[{i}] a:{nullA} b:{null} Max:{Numbers.Max(null, nullA,(UInt32)0)}");
                Assert.AreEqual(Math.Max(nullA.Value, (UInt32)0), Numbers.Max(nullA, null,(UInt32)0),$"#[{i}] a:{nullA} b:{null} Max:{Numbers.Max(nullA, null,(UInt32)0)}");
			}
		}

		// Max Tests for Type: UInt64
        private static readonly IList<UInt64> listAUInt64 = random.ExclusiveList<UInt64>(UInt64.MinValue/2, UInt64.MaxValue/2,100);
        private static readonly IList<UInt64> listBUInt64 = random.ExclusiveList<UInt64>(UInt64.MinValue/2, UInt64.MaxValue/2,100);
        [Test()]
        public void MaxTest_UInt64()
        {
            for (int i=0;i<100;i++)
            {
                var a = (UInt64)listAUInt64[i];
                var b = (UInt64)listBUInt64[i];
				Assert.AreEqual(Math.Max(a,b),Numbers.Max(a,b),$"#[{i}] a:{a} b:{b} Max:{Numbers.Max(a,b)}");
				Assert.AreEqual(Math.Max(a, b), Numbers.Max(b, a),$"#[{i}] a:{a} b:{b} Max:{Numbers.Max(b,a)}");
			}
		}

		[Test]
        public void MaxTest_NullableUInt64()
        {
            for (int i=0;i<100;i++)
            {
                var a = (UInt64)listAUInt64[i];
                var b = (UInt64)listBUInt64[i];
                UInt64? nullA = a;
                UInt64? nullB = b;
                Assert.AreEqual(Math.Max(a, b), Numbers.Max(nullA, nullB));
                Assert.AreEqual(Math.Max(a, b), Numbers.Max(nullB, nullA));
                Assert.AreEqual(Math.Max(nullA.Value, nullB.Value), Numbers.Max(nullA, nullB));
			}
		}

		[Test]
        public void MaxTest_NullableUInt64_WithNull()
        {
            for (int i=0;i<100;i++)
            {
                var a = (UInt64)listAUInt64[i];
                UInt64? nullA = a;
                Assert.AreEqual(Math.Max(a, UInt64.MinValue), Numbers.Max(nullA, null),$"#[{i}] a:{nullA} b:{null} Max:{Numbers.Max(nullA, null)}");
                Assert.AreEqual(Math.Max(a, UInt64.MinValue), Numbers.Max(null, nullA),$"#[{i}] a:{nullA} b:{null} Max:{Numbers.Max(null, nullA)}");
                Assert.AreEqual(Math.Max(nullA.Value, UInt64.MinValue), Numbers.Max(nullA, null),$"#[{i}] a:{nullA} b:{null} Max:{Numbers.Max(nullA, null)}");
			}
		}

				[Test]
        public void MaxTest_NullableUInt64_WithDefault()
        {
            for (int i=0;i<100;i++)
            {
                var a = (UInt64)listAUInt64[i];
                UInt64? nullA = a;
                Assert.AreEqual(Math.Max(a, (UInt64)0), Numbers.Max(nullA, null,(UInt64)0),$"#[{i}] a:{nullA} b:{null} Max:{Numbers.Max(nullA, null,(UInt64)0)}");
                Assert.AreEqual(Math.Max(a, (UInt64)0), Numbers.Max(null, nullA,(UInt64)0),$"#[{i}] a:{nullA} b:{null} Max:{Numbers.Max(null, nullA,(UInt64)0)}");
                Assert.AreEqual(Math.Max(nullA.Value, (UInt64)0), Numbers.Max(nullA, null,(UInt64)0),$"#[{i}] a:{nullA} b:{null} Max:{Numbers.Max(nullA, null,(UInt64)0)}");
			}
		}

		// Max Tests for Type: UInt16
        private static readonly IList<UInt16> listAUInt16 = random.ExclusiveList<UInt16>(UInt16.MinValue/2, UInt16.MaxValue/2,100);
        private static readonly IList<UInt16> listBUInt16 = random.ExclusiveList<UInt16>(UInt16.MinValue/2, UInt16.MaxValue/2,100);
        [Test()]
        public void MaxTest_UInt16()
        {
            for (int i=0;i<100;i++)
            {
                var a = (UInt16)listAUInt16[i];
                var b = (UInt16)listBUInt16[i];
				Assert.AreEqual(Math.Max(a,b),Numbers.Max(a,b),$"#[{i}] a:{a} b:{b} Max:{Numbers.Max(a,b)}");
				Assert.AreEqual(Math.Max(a, b), Numbers.Max(b, a),$"#[{i}] a:{a} b:{b} Max:{Numbers.Max(b,a)}");
			}
		}

		[Test]
        public void MaxTest_NullableUInt16()
        {
            for (int i=0;i<100;i++)
            {
                var a = (UInt16)listAUInt16[i];
                var b = (UInt16)listBUInt16[i];
                UInt16? nullA = a;
                UInt16? nullB = b;
                Assert.AreEqual(Math.Max(a, b), Numbers.Max(nullA, nullB));
                Assert.AreEqual(Math.Max(a, b), Numbers.Max(nullB, nullA));
                Assert.AreEqual(Math.Max(nullA.Value, nullB.Value), Numbers.Max(nullA, nullB));
			}
		}

		[Test]
        public void MaxTest_NullableUInt16_WithNull()
        {
            for (int i=0;i<100;i++)
            {
                var a = (UInt16)listAUInt16[i];
                UInt16? nullA = a;
                Assert.AreEqual(Math.Max(a, UInt16.MinValue), Numbers.Max(nullA, null),$"#[{i}] a:{nullA} b:{null} Max:{Numbers.Max(nullA, null)}");
                Assert.AreEqual(Math.Max(a, UInt16.MinValue), Numbers.Max(null, nullA),$"#[{i}] a:{nullA} b:{null} Max:{Numbers.Max(null, nullA)}");
                Assert.AreEqual(Math.Max(nullA.Value, UInt16.MinValue), Numbers.Max(nullA, null),$"#[{i}] a:{nullA} b:{null} Max:{Numbers.Max(nullA, null)}");
			}
		}

				[Test]
        public void MaxTest_NullableUInt16_WithDefault()
        {
            for (int i=0;i<100;i++)
            {
                var a = (UInt16)listAUInt16[i];
                UInt16? nullA = a;
                Assert.AreEqual(Math.Max(a, (UInt16)0), Numbers.Max(nullA, null,(UInt16)0),$"#[{i}] a:{nullA} b:{null} Max:{Numbers.Max(nullA, null,(UInt16)0)}");
                Assert.AreEqual(Math.Max(a, (UInt16)0), Numbers.Max(null, nullA,(UInt16)0),$"#[{i}] a:{nullA} b:{null} Max:{Numbers.Max(null, nullA,(UInt16)0)}");
                Assert.AreEqual(Math.Max(nullA.Value, (UInt16)0), Numbers.Max(nullA, null,(UInt16)0),$"#[{i}] a:{nullA} b:{null} Max:{Numbers.Max(nullA, null,(UInt16)0)}");
			}
		}

		// Max Tests for Type: Byte
        private static readonly IList<Byte> listAByte = random.ExclusiveList<Byte>(Byte.MinValue/2, Byte.MaxValue/2,100);
        private static readonly IList<Byte> listBByte = random.ExclusiveList<Byte>(Byte.MinValue/2, Byte.MaxValue/2,100);
        [Test()]
        public void MaxTest_Byte()
        {
            for (int i=0;i<100;i++)
            {
                var a = (Byte)listAByte[i];
                var b = (Byte)listBByte[i];
				Assert.AreEqual(Math.Max(a,b),Numbers.Max(a,b),$"#[{i}] a:{a} b:{b} Max:{Numbers.Max(a,b)}");
				Assert.AreEqual(Math.Max(a, b), Numbers.Max(b, a),$"#[{i}] a:{a} b:{b} Max:{Numbers.Max(b,a)}");
			}
		}

		[Test]
        public void MaxTest_NullableByte()
        {
            for (int i=0;i<100;i++)
            {
                var a = (Byte)listAByte[i];
                var b = (Byte)listBByte[i];
                Byte? nullA = a;
                Byte? nullB = b;
                Assert.AreEqual(Math.Max(a, b), Numbers.Max(nullA, nullB));
                Assert.AreEqual(Math.Max(a, b), Numbers.Max(nullB, nullA));
                Assert.AreEqual(Math.Max(nullA.Value, nullB.Value), Numbers.Max(nullA, nullB));
			}
		}

		[Test]
        public void MaxTest_NullableByte_WithNull()
        {
            for (int i=0;i<100;i++)
            {
                var a = (Byte)listAByte[i];
                Byte? nullA = a;
                Assert.AreEqual(Math.Max(a, Byte.MinValue), Numbers.Max(nullA, null),$"#[{i}] a:{nullA} b:{null} Max:{Numbers.Max(nullA, null)}");
                Assert.AreEqual(Math.Max(a, Byte.MinValue), Numbers.Max(null, nullA),$"#[{i}] a:{nullA} b:{null} Max:{Numbers.Max(null, nullA)}");
                Assert.AreEqual(Math.Max(nullA.Value, Byte.MinValue), Numbers.Max(nullA, null),$"#[{i}] a:{nullA} b:{null} Max:{Numbers.Max(nullA, null)}");
			}
		}

				[Test]
        public void MaxTest_NullableByte_WithDefault()
        {
            for (int i=0;i<100;i++)
            {
                var a = (Byte)listAByte[i];
                Byte? nullA = a;
                Assert.AreEqual(Math.Max(a, (Byte)0), Numbers.Max(nullA, null,(Byte)0),$"#[{i}] a:{nullA} b:{null} Max:{Numbers.Max(nullA, null,(Byte)0)}");
                Assert.AreEqual(Math.Max(a, (Byte)0), Numbers.Max(null, nullA,(Byte)0),$"#[{i}] a:{nullA} b:{null} Max:{Numbers.Max(null, nullA,(Byte)0)}");
                Assert.AreEqual(Math.Max(nullA.Value, (Byte)0), Numbers.Max(nullA, null,(Byte)0),$"#[{i}] a:{nullA} b:{null} Max:{Numbers.Max(nullA, null,(Byte)0)}");
			}
		}

		// Max Tests for Type: Double
        private static readonly IList<Double> listADouble = random.ExclusiveList<Double>(Double.MinValue/2, Double.MaxValue/2,100);
        private static readonly IList<Double> listBDouble = random.ExclusiveList<Double>(Double.MinValue/2, Double.MaxValue/2,100);
        [Test()]
        public void MaxTest_Double()
        {
            for (int i=0;i<100;i++)
            {
                var a = (Double)listADouble[i];
                var b = (Double)listBDouble[i];
				Assert.AreEqual(Math.Max(a,b),Numbers.Max(a,b),$"#[{i}] a:{a} b:{b} Max:{Numbers.Max(a,b)}");
				Assert.AreEqual(Math.Max(a, b), Numbers.Max(b, a),$"#[{i}] a:{a} b:{b} Max:{Numbers.Max(b,a)}");
			}
		}

		[Test]
        public void MaxTest_NullableDouble()
        {
            for (int i=0;i<100;i++)
            {
                var a = (Double)listADouble[i];
                var b = (Double)listBDouble[i];
                Double? nullA = a;
                Double? nullB = b;
                Assert.AreEqual(Math.Max(a, b), Numbers.Max(nullA, nullB));
                Assert.AreEqual(Math.Max(a, b), Numbers.Max(nullB, nullA));
                Assert.AreEqual(Math.Max(nullA.Value, nullB.Value), Numbers.Max(nullA, nullB));
			}
		}

		[Test]
        public void MaxTest_NullableDouble_WithNull()
        {
            for (int i=0;i<100;i++)
            {
                var a = (Double)listADouble[i];
                Double? nullA = a;
                Assert.AreEqual(Math.Max(a, Double.MinValue), Numbers.Max(nullA, null),$"#[{i}] a:{nullA} b:{null} Max:{Numbers.Max(nullA, null)}");
                Assert.AreEqual(Math.Max(a, Double.MinValue), Numbers.Max(null, nullA),$"#[{i}] a:{nullA} b:{null} Max:{Numbers.Max(null, nullA)}");
                Assert.AreEqual(Math.Max(nullA.Value, Double.MinValue), Numbers.Max(nullA, null),$"#[{i}] a:{nullA} b:{null} Max:{Numbers.Max(nullA, null)}");
			}
		}

				[Test]
        public void MaxTest_NullableDouble_WithDefault()
        {
            for (int i=0;i<100;i++)
            {
                var a = (Double)listADouble[i];
                Double? nullA = a;
                Assert.AreEqual(Math.Max(a, (Double)0), Numbers.Max(nullA, null,(Double)0),$"#[{i}] a:{nullA} b:{null} Max:{Numbers.Max(nullA, null,(Double)0)}");
                Assert.AreEqual(Math.Max(a, (Double)0), Numbers.Max(null, nullA,(Double)0),$"#[{i}] a:{nullA} b:{null} Max:{Numbers.Max(null, nullA,(Double)0)}");
                Assert.AreEqual(Math.Max(nullA.Value, (Double)0), Numbers.Max(nullA, null,(Double)0),$"#[{i}] a:{nullA} b:{null} Max:{Numbers.Max(nullA, null,(Double)0)}");
			}
		}

		// Max Tests for Type: Single
        private static readonly IList<Single> listASingle = random.ExclusiveList<Single>(Single.MinValue/2, Single.MaxValue/2,100);
        private static readonly IList<Single> listBSingle = random.ExclusiveList<Single>(Single.MinValue/2, Single.MaxValue/2,100);
        [Test()]
        public void MaxTest_Single()
        {
            for (int i=0;i<100;i++)
            {
                var a = (Single)listASingle[i];
                var b = (Single)listBSingle[i];
				Assert.AreEqual(Math.Max(a,b),Numbers.Max(a,b),$"#[{i}] a:{a} b:{b} Max:{Numbers.Max(a,b)}");
				Assert.AreEqual(Math.Max(a, b), Numbers.Max(b, a),$"#[{i}] a:{a} b:{b} Max:{Numbers.Max(b,a)}");
			}
		}

		[Test]
        public void MaxTest_NullableSingle()
        {
            for (int i=0;i<100;i++)
            {
                var a = (Single)listASingle[i];
                var b = (Single)listBSingle[i];
                Single? nullA = a;
                Single? nullB = b;
                Assert.AreEqual(Math.Max(a, b), Numbers.Max(nullA, nullB));
                Assert.AreEqual(Math.Max(a, b), Numbers.Max(nullB, nullA));
                Assert.AreEqual(Math.Max(nullA.Value, nullB.Value), Numbers.Max(nullA, nullB));
			}
		}

		[Test]
        public void MaxTest_NullableSingle_WithNull()
        {
            for (int i=0;i<100;i++)
            {
                var a = (Single)listASingle[i];
                Single? nullA = a;
                Assert.AreEqual(Math.Max(a, Single.MinValue), Numbers.Max(nullA, null),$"#[{i}] a:{nullA} b:{null} Max:{Numbers.Max(nullA, null)}");
                Assert.AreEqual(Math.Max(a, Single.MinValue), Numbers.Max(null, nullA),$"#[{i}] a:{nullA} b:{null} Max:{Numbers.Max(null, nullA)}");
                Assert.AreEqual(Math.Max(nullA.Value, Single.MinValue), Numbers.Max(nullA, null),$"#[{i}] a:{nullA} b:{null} Max:{Numbers.Max(nullA, null)}");
			}
		}

				[Test]
        public void MaxTest_NullableSingle_WithDefault()
        {
            for (int i=0;i<100;i++)
            {
                var a = (Single)listASingle[i];
                Single? nullA = a;
                Assert.AreEqual(Math.Max(a, (Single)0), Numbers.Max(nullA, null,(Single)0),$"#[{i}] a:{nullA} b:{null} Max:{Numbers.Max(nullA, null,(Single)0)}");
                Assert.AreEqual(Math.Max(a, (Single)0), Numbers.Max(null, nullA,(Single)0),$"#[{i}] a:{nullA} b:{null} Max:{Numbers.Max(null, nullA,(Single)0)}");
                Assert.AreEqual(Math.Max(nullA.Value, (Single)0), Numbers.Max(nullA, null,(Single)0),$"#[{i}] a:{nullA} b:{null} Max:{Numbers.Max(nullA, null,(Single)0)}");
			}
		}

		// Max Tests for Type: Decimal
        private static readonly IList<Decimal> listADecimal = random.ExclusiveList<Decimal>(Decimal.MinValue/2, Decimal.MaxValue/2,100);
        private static readonly IList<Decimal> listBDecimal = random.ExclusiveList<Decimal>(Decimal.MinValue/2, Decimal.MaxValue/2,100);
        [Test()]
        public void MaxTest_Decimal()
        {
            for (int i=0;i<100;i++)
            {
                var a = (Decimal)listADecimal[i];
                var b = (Decimal)listBDecimal[i];
				Assert.AreEqual(Math.Max(a,b),Numbers.Max(a,b),$"#[{i}] a:{a} b:{b} Max:{Numbers.Max(a,b)}");
				Assert.AreEqual(Math.Max(a, b), Numbers.Max(b, a),$"#[{i}] a:{a} b:{b} Max:{Numbers.Max(b,a)}");
			}
		}

		[Test]
        public void MaxTest_NullableDecimal()
        {
            for (int i=0;i<100;i++)
            {
                var a = (Decimal)listADecimal[i];
                var b = (Decimal)listBDecimal[i];
                Decimal? nullA = a;
                Decimal? nullB = b;
                Assert.AreEqual(Math.Max(a, b), Numbers.Max(nullA, nullB));
                Assert.AreEqual(Math.Max(a, b), Numbers.Max(nullB, nullA));
                Assert.AreEqual(Math.Max(nullA.Value, nullB.Value), Numbers.Max(nullA, nullB));
			}
		}

		[Test]
        public void MaxTest_NullableDecimal_WithNull()
        {
            for (int i=0;i<100;i++)
            {
                var a = (Decimal)listADecimal[i];
                Decimal? nullA = a;
                Assert.AreEqual(Math.Max(a, Decimal.MinValue), Numbers.Max(nullA, null),$"#[{i}] a:{nullA} b:{null} Max:{Numbers.Max(nullA, null)}");
                Assert.AreEqual(Math.Max(a, Decimal.MinValue), Numbers.Max(null, nullA),$"#[{i}] a:{nullA} b:{null} Max:{Numbers.Max(null, nullA)}");
                Assert.AreEqual(Math.Max(nullA.Value, Decimal.MinValue), Numbers.Max(nullA, null),$"#[{i}] a:{nullA} b:{null} Max:{Numbers.Max(nullA, null)}");
			}
		}

				[Test]
        public void MaxTest_NullableDecimal_WithDefault()
        {
            for (int i=0;i<100;i++)
            {
                var a = (Decimal)listADecimal[i];
                Decimal? nullA = a;
                Assert.AreEqual(Math.Max(a, (Decimal)0), Numbers.Max(nullA, null,(Decimal)0),$"#[{i}] a:{nullA} b:{null} Max:{Numbers.Max(nullA, null,(Decimal)0)}");
                Assert.AreEqual(Math.Max(a, (Decimal)0), Numbers.Max(null, nullA,(Decimal)0),$"#[{i}] a:{nullA} b:{null} Max:{Numbers.Max(null, nullA,(Decimal)0)}");
                Assert.AreEqual(Math.Max(nullA.Value, (Decimal)0), Numbers.Max(nullA, null,(Decimal)0),$"#[{i}] a:{nullA} b:{null} Max:{Numbers.Max(nullA, null,(Decimal)0)}");
			}
		}

	}
}




