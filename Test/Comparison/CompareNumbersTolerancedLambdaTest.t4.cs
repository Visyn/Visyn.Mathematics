#region Copyright (c) 2015-2017 Visyn
//The MIT License(MIT)
//
//Copyright(c) 2015-2017 Visyn
//
//Permission is hereby granted, free of charge, to any person obtaining a copy
//of this software and associated documentation files (the "Software"), to deal
//in the Software without restriction, including without limitation the rights
//to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//copies of the Software, and to permit persons to whom the Software is
//furnished to do so, subject to the following conditions:

//The above copyright notice and this permission notice shall be included in all
//copies or substantial portions of the Software.

//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//SOFTWARE.
#endregion
#region Autogenerated T4 Text Template
// Autogenerated from T4 Text Template :	CompareNumbersTolerancedLambdaTest.tt
//											file:\C:\git\proto.temp\Visyn.Mathematics\Test\Comparison\CompareNumbersTolerancedLambdaTest.tt
// Autogeneration date/time:				8/13/2017 9:11:10 PM
#endregion
using System;
using Visyn.Mathematics;

using NUnit.Framework;
using Visyn.Mathematics.Comparison;

namespace Visyn.Mathematics.Test.Comparison 
{ 
	[TestFixture]
	public class CompareNumbersTolerancedLambdaTest
	{
		static NumberConverter visynConvert = NumberConverter.Instance;

#region Int32	// Int32 - unsinged tests
		[Test]
		public void TypeInt32_Generic()
		{
			// Note: the CompareNumbers.Toleranced<Int32> constructor will direct call to non-generic implementation
			// because the generic type argument matches the tolerance type.  This is a more efficient implementation
			Int32 tolerance = (Int32)10;
			//Toleranced<T>(Int32 tolerance, Func<T,Int32> converter)
		    var comparer = CompareNumbers.Toleranced<Int32>(tolerance, new Func<Int32, Int32> ((a)=> (Int32)(0-a)));

			Assert.Zero(comparer.Compare((Int32)7,(Int32)2));
			Assert.Zero(comparer.Compare((Int32)107,(Int32)100));


			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (Int32) 99, (Int32) 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (Int32) 7, (Int32) 99);
			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (Int32) 12, (Int32) 12);
        }

		[Test]
		public void TypeInt32_NotGeneric()
		{
			Int32 tolerance = (Int32)10;
		    var comparer = CompareNumbers.Toleranced(tolerance, new Func<Int32, Int32> ((a)=> (Int32)(0-a)));

			Assert.Zero(comparer.Compare((Int32)7,(Int32)2));
			Assert.Zero(comparer.Compare((Int32)107,(Int32)100));


			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (Int32) 99, (Int32) 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (Int32) 7, (Int32) 99);
			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (Int32) 12, (Int32) 12);
        }

		[Test]
		public void TypeInt32_Limits()
		{
			Int32 tolerance = (Int32)10;
		    var comparer = CompareNumbers.Toleranced<Int32>(tolerance, new Func<Int32, Int32> ((a)=> (Int32)(0-a)));

			Assert.Zero(comparer.Compare((Int32)1,(Int32)11));
			Assert.Zero(comparer.Compare((Int32)11,(Int32)1));
			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (Int32) 1, (Int32) 12);
			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (Int32) 12, (Int32) 1);
        }

		// Int32 tests involving change in type (i.e. compare int and double as a double w/ double tolerance)
		[Test]
		public void TypeInt32_GenericMixedTypeNumbers()
		{
			// Note: the CompareNumbers.Toleranced<Int32> constructor will direct call to non-generic implementation
			// because the generic type argument matches the tolerance type.  More efficient implementation
			Int32 tolerance = (Int32)10;
		    var comparer = CompareNumbers.Toleranced<object>(tolerance, new Func<object, Int32> ((a)=> (Int32)(0-visynConvert.ToInt32(a))));

			// First try numbers with same type as tolerance...
			Assert.Zero(comparer.Compare((Int32)7,(Int32)2));
			Assert.Zero(comparer.Compare((Int32)107,(Int32)100));
			// Now try some different types...
			// Tolerance Type = Int32 Parameter type == Int32
			Assert.Zero(comparer.Compare((Int32)8,(Int32)1));
			Assert.Zero(comparer.Compare((Int32)111,(Int32)108));
			Assert.Zero(comparer.Compare((Int32)77,(Int32)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Int32) 99, (Int32) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Int32) 99, (Int32) 7 , 99 , 7);
			// Tolerance Type = Int32 Parameter type == Int64
			Assert.Zero(comparer.Compare((Int64)8,(Int64)1));
			Assert.Zero(comparer.Compare((Int64)111,(Int64)108));
			Assert.Zero(comparer.Compare((Int64)77,(Int64)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Int64) 99, (Int64) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Int64) 99, (Int64) 7 , 99 , 7);
			// Tolerance Type = Int32 Parameter type == Int16
			Assert.Zero(comparer.Compare((Int16)8,(Int16)1));
			Assert.Zero(comparer.Compare((Int16)111,(Int16)108));
			Assert.Zero(comparer.Compare((Int16)77,(Int16)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Int16) 99, (Int16) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Int16) 99, (Int16) 7 , 99 , 7);
			// Tolerance Type = Int32 Parameter type == Char
			Assert.Zero(comparer.Compare((Char)8,(Char)1));
			Assert.Zero(comparer.Compare((Char)111,(Char)108));
			Assert.Zero(comparer.Compare((Char)77,(Char)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Char) 99, (Char) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Char) 99, (Char) 7 , 99 , 7);
			// Tolerance Type = Int32 Parameter type == UInt32
			Assert.Zero(comparer.Compare((UInt32)8,(UInt32)1));
			Assert.Zero(comparer.Compare((UInt32)111,(UInt32)108));
			Assert.Zero(comparer.Compare((UInt32)77,(UInt32)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (UInt32) 99, (UInt32) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (UInt32) 99, (UInt32) 7 , 99 , 7);
			// Tolerance Type = Int32 Parameter type == UInt64
			Assert.Zero(comparer.Compare((UInt64)8,(UInt64)1));
			Assert.Zero(comparer.Compare((UInt64)111,(UInt64)108));
			Assert.Zero(comparer.Compare((UInt64)77,(UInt64)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (UInt64) 99, (UInt64) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (UInt64) 99, (UInt64) 7 , 99 , 7);
			// Tolerance Type = Int32 Parameter type == UInt16
			Assert.Zero(comparer.Compare((UInt16)8,(UInt16)1));
			Assert.Zero(comparer.Compare((UInt16)111,(UInt16)108));
			Assert.Zero(comparer.Compare((UInt16)77,(UInt16)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (UInt16) 99, (UInt16) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (UInt16) 99, (UInt16) 7 , 99 , 7);
			// Tolerance Type = Int32 Parameter type == Byte
			Assert.Zero(comparer.Compare((Byte)8,(Byte)1));
			Assert.Zero(comparer.Compare((Byte)111,(Byte)108));
			Assert.Zero(comparer.Compare((Byte)77,(Byte)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Byte) 99, (Byte) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Byte) 99, (Byte) 7 , 99 , 7);
			// Tolerance Type = Int32 Parameter type == Double
			Assert.Zero(comparer.Compare((Double)8,(Double)1));
			Assert.Zero(comparer.Compare((Double)111,(Double)108));
			Assert.Zero(comparer.Compare((Double)77,(Double)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Double) 99, (Double) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Double) 99, (Double) 7 , 99 , 7);
			// Tolerance Type = Int32 Parameter type == Single
			Assert.Zero(comparer.Compare((Single)8,(Single)1));
			Assert.Zero(comparer.Compare((Single)111,(Single)108));
			Assert.Zero(comparer.Compare((Single)77,(Single)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Single) 99, (Single) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Single) 99, (Single) 7 , 99 , 7);
			// Tolerance Type = Int32 Parameter type == Decimal
			Assert.Zero(comparer.Compare((Decimal)8,(Decimal)1));
			Assert.Zero(comparer.Compare((Decimal)111,(Decimal)108));
			Assert.Zero(comparer.Compare((Decimal)77,(Decimal)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Decimal) 99, (Decimal) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Decimal) 99, (Decimal) 7 , 99 , 7);
        }

		// Int32
		[Test]
		public void TypeInt32_MiscTypesToCompare()
		{
			// Note: the CompareNumbers.Toleranced<Int32> constructor will direct call to non-generic implementation
			// because the generic type argument matches the tolerance type.  More efficient implementation
			Int32 tolerance = (Int32)10;
		    var comparer = CompareNumbers.Toleranced<object>(tolerance, new Func<object, Int32> ((a)=> (Int32)(0-visynConvert.ToInt32(a))));

			// Now try some different types...
			// Tolerance Type = Int32 Parameter type == Int32
			Assert.Zero(comparer.Compare((Int32)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(Int32)108));
			Assert.Zero(comparer.Compare((Int32)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Int32) 99, (Int32) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = Int32 Parameter type == Int64
			Assert.Zero(comparer.Compare((Int64)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(Int64)108));
			Assert.Zero(comparer.Compare((Int64)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Int64) 99, (Int64) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = Int32 Parameter type == Int16
			Assert.Zero(comparer.Compare((Int16)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(Int16)108));
			Assert.Zero(comparer.Compare((Int16)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Int16) 99, (Int16) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = Int32 Parameter type == Char
			Assert.Zero(comparer.Compare((Char)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(Char)108));
			Assert.Zero(comparer.Compare((Char)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Char) 99, (Char) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = Int32 Parameter type == UInt32
			Assert.Zero(comparer.Compare((UInt32)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(UInt32)108));
			Assert.Zero(comparer.Compare((UInt32)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (UInt32) 99, (UInt32) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = Int32 Parameter type == UInt64
			Assert.Zero(comparer.Compare((UInt64)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(UInt64)108));
			Assert.Zero(comparer.Compare((UInt64)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (UInt64) 99, (UInt64) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = Int32 Parameter type == UInt16
			Assert.Zero(comparer.Compare((UInt16)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(UInt16)108));
			Assert.Zero(comparer.Compare((UInt16)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (UInt16) 99, (UInt16) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = Int32 Parameter type == Byte
			Assert.Zero(comparer.Compare((Byte)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(Byte)108));
			Assert.Zero(comparer.Compare((Byte)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Byte) 99, (Byte) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = Int32 Parameter type == Double
			Assert.Zero(comparer.Compare((Double)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(Double)108));
			Assert.Zero(comparer.Compare((Double)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Double) 99, (Double) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = Int32 Parameter type == Single
			Assert.Zero(comparer.Compare((Single)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(Single)108));
			Assert.Zero(comparer.Compare((Single)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Single) 99, (Single) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = Int32 Parameter type == Decimal
			Assert.Zero(comparer.Compare((Decimal)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(Decimal)108));
			Assert.Zero(comparer.Compare((Decimal)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Decimal) 99, (Decimal) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
        }
#endregion

#region Int64	// Int64 - unsinged tests
		[Test]
		public void TypeInt64_Generic()
		{
			// Note: the CompareNumbers.Toleranced<Int64> constructor will direct call to non-generic implementation
			// because the generic type argument matches the tolerance type.  This is a more efficient implementation
			Int64 tolerance = (Int64)10;
			//Toleranced<T>(Int32 tolerance, Func<T,Int32> converter)
		    var comparer = CompareNumbers.Toleranced<Int64>(tolerance, new Func<Int64, Int64> ((a)=> (Int64)(0-a)));

			Assert.Zero(comparer.Compare((Int64)7,(Int64)2));
			Assert.Zero(comparer.Compare((Int64)107,(Int64)100));


			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (Int64) 99, (Int64) 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (Int64) 7, (Int64) 99);
			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (Int64) 12, (Int64) 12);
        }

		[Test]
		public void TypeInt64_NotGeneric()
		{
			Int64 tolerance = (Int64)10;
		    var comparer = CompareNumbers.Toleranced(tolerance, new Func<Int64, Int64> ((a)=> (Int64)(0-a)));

			Assert.Zero(comparer.Compare((Int64)7,(Int64)2));
			Assert.Zero(comparer.Compare((Int64)107,(Int64)100));


			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (Int64) 99, (Int64) 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (Int64) 7, (Int64) 99);
			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (Int64) 12, (Int64) 12);
        }

		[Test]
		public void TypeInt64_Limits()
		{
			Int64 tolerance = (Int64)10;
		    var comparer = CompareNumbers.Toleranced<Int64>(tolerance, new Func<Int64, Int64> ((a)=> (Int64)(0-a)));

			Assert.Zero(comparer.Compare((Int64)1,(Int64)11));
			Assert.Zero(comparer.Compare((Int64)11,(Int64)1));
			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (Int64) 1, (Int64) 12);
			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (Int64) 12, (Int64) 1);
        }

		// Int64 tests involving change in type (i.e. compare int and double as a double w/ double tolerance)
		[Test]
		public void TypeInt64_GenericMixedTypeNumbers()
		{
			// Note: the CompareNumbers.Toleranced<Int64> constructor will direct call to non-generic implementation
			// because the generic type argument matches the tolerance type.  More efficient implementation
			Int64 tolerance = (Int64)10;
		    var comparer = CompareNumbers.Toleranced<object>(tolerance, new Func<object, Int64> ((a)=> (Int64)(0-visynConvert.ToInt64(a))));

			// First try numbers with same type as tolerance...
			Assert.Zero(comparer.Compare((Int64)7,(Int64)2));
			Assert.Zero(comparer.Compare((Int64)107,(Int64)100));
			// Now try some different types...
			// Tolerance Type = Int64 Parameter type == Int32
			Assert.Zero(comparer.Compare((Int32)8,(Int32)1));
			Assert.Zero(comparer.Compare((Int32)111,(Int32)108));
			Assert.Zero(comparer.Compare((Int32)77,(Int32)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Int32) 99, (Int32) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Int32) 99, (Int32) 7 , 99 , 7);
			// Tolerance Type = Int64 Parameter type == Int64
			Assert.Zero(comparer.Compare((Int64)8,(Int64)1));
			Assert.Zero(comparer.Compare((Int64)111,(Int64)108));
			Assert.Zero(comparer.Compare((Int64)77,(Int64)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Int64) 99, (Int64) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Int64) 99, (Int64) 7 , 99 , 7);
			// Tolerance Type = Int64 Parameter type == Int16
			Assert.Zero(comparer.Compare((Int16)8,(Int16)1));
			Assert.Zero(comparer.Compare((Int16)111,(Int16)108));
			Assert.Zero(comparer.Compare((Int16)77,(Int16)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Int16) 99, (Int16) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Int16) 99, (Int16) 7 , 99 , 7);
			// Tolerance Type = Int64 Parameter type == Char
			Assert.Zero(comparer.Compare((Char)8,(Char)1));
			Assert.Zero(comparer.Compare((Char)111,(Char)108));
			Assert.Zero(comparer.Compare((Char)77,(Char)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Char) 99, (Char) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Char) 99, (Char) 7 , 99 , 7);
			// Tolerance Type = Int64 Parameter type == UInt32
			Assert.Zero(comparer.Compare((UInt32)8,(UInt32)1));
			Assert.Zero(comparer.Compare((UInt32)111,(UInt32)108));
			Assert.Zero(comparer.Compare((UInt32)77,(UInt32)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (UInt32) 99, (UInt32) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (UInt32) 99, (UInt32) 7 , 99 , 7);
			// Tolerance Type = Int64 Parameter type == UInt64
			Assert.Zero(comparer.Compare((UInt64)8,(UInt64)1));
			Assert.Zero(comparer.Compare((UInt64)111,(UInt64)108));
			Assert.Zero(comparer.Compare((UInt64)77,(UInt64)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (UInt64) 99, (UInt64) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (UInt64) 99, (UInt64) 7 , 99 , 7);
			// Tolerance Type = Int64 Parameter type == UInt16
			Assert.Zero(comparer.Compare((UInt16)8,(UInt16)1));
			Assert.Zero(comparer.Compare((UInt16)111,(UInt16)108));
			Assert.Zero(comparer.Compare((UInt16)77,(UInt16)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (UInt16) 99, (UInt16) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (UInt16) 99, (UInt16) 7 , 99 , 7);
			// Tolerance Type = Int64 Parameter type == Byte
			Assert.Zero(comparer.Compare((Byte)8,(Byte)1));
			Assert.Zero(comparer.Compare((Byte)111,(Byte)108));
			Assert.Zero(comparer.Compare((Byte)77,(Byte)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Byte) 99, (Byte) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Byte) 99, (Byte) 7 , 99 , 7);
			// Tolerance Type = Int64 Parameter type == Double
			Assert.Zero(comparer.Compare((Double)8,(Double)1));
			Assert.Zero(comparer.Compare((Double)111,(Double)108));
			Assert.Zero(comparer.Compare((Double)77,(Double)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Double) 99, (Double) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Double) 99, (Double) 7 , 99 , 7);
			// Tolerance Type = Int64 Parameter type == Single
			Assert.Zero(comparer.Compare((Single)8,(Single)1));
			Assert.Zero(comparer.Compare((Single)111,(Single)108));
			Assert.Zero(comparer.Compare((Single)77,(Single)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Single) 99, (Single) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Single) 99, (Single) 7 , 99 , 7);
			// Tolerance Type = Int64 Parameter type == Decimal
			Assert.Zero(comparer.Compare((Decimal)8,(Decimal)1));
			Assert.Zero(comparer.Compare((Decimal)111,(Decimal)108));
			Assert.Zero(comparer.Compare((Decimal)77,(Decimal)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Decimal) 99, (Decimal) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Decimal) 99, (Decimal) 7 , 99 , 7);
        }

		// Int64
		[Test]
		public void TypeInt64_MiscTypesToCompare()
		{
			// Note: the CompareNumbers.Toleranced<Int64> constructor will direct call to non-generic implementation
			// because the generic type argument matches the tolerance type.  More efficient implementation
			Int64 tolerance = (Int64)10;
		    var comparer = CompareNumbers.Toleranced<object>(tolerance, new Func<object, Int64> ((a)=> (Int64)(0-visynConvert.ToInt64(a))));

			// Now try some different types...
			// Tolerance Type = Int64 Parameter type == Int32
			Assert.Zero(comparer.Compare((Int32)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(Int32)108));
			Assert.Zero(comparer.Compare((Int32)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Int32) 99, (Int32) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = Int64 Parameter type == Int64
			Assert.Zero(comparer.Compare((Int64)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(Int64)108));
			Assert.Zero(comparer.Compare((Int64)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Int64) 99, (Int64) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = Int64 Parameter type == Int16
			Assert.Zero(comparer.Compare((Int16)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(Int16)108));
			Assert.Zero(comparer.Compare((Int16)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Int16) 99, (Int16) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = Int64 Parameter type == Char
			Assert.Zero(comparer.Compare((Char)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(Char)108));
			Assert.Zero(comparer.Compare((Char)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Char) 99, (Char) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = Int64 Parameter type == UInt32
			Assert.Zero(comparer.Compare((UInt32)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(UInt32)108));
			Assert.Zero(comparer.Compare((UInt32)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (UInt32) 99, (UInt32) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = Int64 Parameter type == UInt64
			Assert.Zero(comparer.Compare((UInt64)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(UInt64)108));
			Assert.Zero(comparer.Compare((UInt64)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (UInt64) 99, (UInt64) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = Int64 Parameter type == UInt16
			Assert.Zero(comparer.Compare((UInt16)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(UInt16)108));
			Assert.Zero(comparer.Compare((UInt16)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (UInt16) 99, (UInt16) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = Int64 Parameter type == Byte
			Assert.Zero(comparer.Compare((Byte)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(Byte)108));
			Assert.Zero(comparer.Compare((Byte)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Byte) 99, (Byte) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = Int64 Parameter type == Double
			Assert.Zero(comparer.Compare((Double)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(Double)108));
			Assert.Zero(comparer.Compare((Double)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Double) 99, (Double) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = Int64 Parameter type == Single
			Assert.Zero(comparer.Compare((Single)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(Single)108));
			Assert.Zero(comparer.Compare((Single)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Single) 99, (Single) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = Int64 Parameter type == Decimal
			Assert.Zero(comparer.Compare((Decimal)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(Decimal)108));
			Assert.Zero(comparer.Compare((Decimal)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Decimal) 99, (Decimal) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
        }
#endregion

#region Int16	// Int16 - unsinged tests
		[Test]
		public void TypeInt16_Generic()
		{
			// Note: the CompareNumbers.Toleranced<Int16> constructor will direct call to non-generic implementation
			// because the generic type argument matches the tolerance type.  This is a more efficient implementation
			Int16 tolerance = (Int16)10;
			//Toleranced<T>(Int32 tolerance, Func<T,Int32> converter)
		    var comparer = CompareNumbers.Toleranced<Int16>(tolerance, new Func<Int16, Int16> ((a)=> (Int16)(0-a)));

			Assert.Zero(comparer.Compare((Int16)7,(Int16)2));
			Assert.Zero(comparer.Compare((Int16)107,(Int16)100));


			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (Int16) 99, (Int16) 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (Int16) 7, (Int16) 99);
			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (Int16) 12, (Int16) 12);
        }

		[Test]
		public void TypeInt16_NotGeneric()
		{
			Int16 tolerance = (Int16)10;
		    var comparer = CompareNumbers.Toleranced(tolerance, new Func<Int16, Int16> ((a)=> (Int16)(0-a)));

			Assert.Zero(comparer.Compare((Int16)7,(Int16)2));
			Assert.Zero(comparer.Compare((Int16)107,(Int16)100));


			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (Int16) 99, (Int16) 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (Int16) 7, (Int16) 99);
			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (Int16) 12, (Int16) 12);
        }

		[Test]
		public void TypeInt16_Limits()
		{
			Int16 tolerance = (Int16)10;
		    var comparer = CompareNumbers.Toleranced<Int16>(tolerance, new Func<Int16, Int16> ((a)=> (Int16)(0-a)));

			Assert.Zero(comparer.Compare((Int16)1,(Int16)11));
			Assert.Zero(comparer.Compare((Int16)11,(Int16)1));
			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (Int16) 1, (Int16) 12);
			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (Int16) 12, (Int16) 1);
        }

		// Int16 tests involving change in type (i.e. compare int and double as a double w/ double tolerance)
		[Test]
		public void TypeInt16_GenericMixedTypeNumbers()
		{
			// Note: the CompareNumbers.Toleranced<Int16> constructor will direct call to non-generic implementation
			// because the generic type argument matches the tolerance type.  More efficient implementation
			Int16 tolerance = (Int16)10;
		    var comparer = CompareNumbers.Toleranced<object>(tolerance, new Func<object, Int16> ((a)=> (Int16)(0-visynConvert.ToInt16(a))));

			// First try numbers with same type as tolerance...
			Assert.Zero(comparer.Compare((Int16)7,(Int16)2));
			Assert.Zero(comparer.Compare((Int16)107,(Int16)100));
			// Now try some different types...
			// Tolerance Type = Int16 Parameter type == Int32
			Assert.Zero(comparer.Compare((Int32)8,(Int32)1));
			Assert.Zero(comparer.Compare((Int32)111,(Int32)108));
			Assert.Zero(comparer.Compare((Int32)77,(Int32)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Int32) 99, (Int32) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Int32) 99, (Int32) 7 , 99 , 7);
			// Tolerance Type = Int16 Parameter type == Int64
			Assert.Zero(comparer.Compare((Int64)8,(Int64)1));
			Assert.Zero(comparer.Compare((Int64)111,(Int64)108));
			Assert.Zero(comparer.Compare((Int64)77,(Int64)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Int64) 99, (Int64) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Int64) 99, (Int64) 7 , 99 , 7);
			// Tolerance Type = Int16 Parameter type == Int16
			Assert.Zero(comparer.Compare((Int16)8,(Int16)1));
			Assert.Zero(comparer.Compare((Int16)111,(Int16)108));
			Assert.Zero(comparer.Compare((Int16)77,(Int16)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Int16) 99, (Int16) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Int16) 99, (Int16) 7 , 99 , 7);
			// Tolerance Type = Int16 Parameter type == Char
			Assert.Zero(comparer.Compare((Char)8,(Char)1));
			Assert.Zero(comparer.Compare((Char)111,(Char)108));
			Assert.Zero(comparer.Compare((Char)77,(Char)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Char) 99, (Char) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Char) 99, (Char) 7 , 99 , 7);
			// Tolerance Type = Int16 Parameter type == UInt32
			Assert.Zero(comparer.Compare((UInt32)8,(UInt32)1));
			Assert.Zero(comparer.Compare((UInt32)111,(UInt32)108));
			Assert.Zero(comparer.Compare((UInt32)77,(UInt32)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (UInt32) 99, (UInt32) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (UInt32) 99, (UInt32) 7 , 99 , 7);
			// Tolerance Type = Int16 Parameter type == UInt64
			Assert.Zero(comparer.Compare((UInt64)8,(UInt64)1));
			Assert.Zero(comparer.Compare((UInt64)111,(UInt64)108));
			Assert.Zero(comparer.Compare((UInt64)77,(UInt64)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (UInt64) 99, (UInt64) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (UInt64) 99, (UInt64) 7 , 99 , 7);
			// Tolerance Type = Int16 Parameter type == UInt16
			Assert.Zero(comparer.Compare((UInt16)8,(UInt16)1));
			Assert.Zero(comparer.Compare((UInt16)111,(UInt16)108));
			Assert.Zero(comparer.Compare((UInt16)77,(UInt16)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (UInt16) 99, (UInt16) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (UInt16) 99, (UInt16) 7 , 99 , 7);
			// Tolerance Type = Int16 Parameter type == Byte
			Assert.Zero(comparer.Compare((Byte)8,(Byte)1));
			Assert.Zero(comparer.Compare((Byte)111,(Byte)108));
			Assert.Zero(comparer.Compare((Byte)77,(Byte)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Byte) 99, (Byte) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Byte) 99, (Byte) 7 , 99 , 7);
			// Tolerance Type = Int16 Parameter type == Double
			Assert.Zero(comparer.Compare((Double)8,(Double)1));
			Assert.Zero(comparer.Compare((Double)111,(Double)108));
			Assert.Zero(comparer.Compare((Double)77,(Double)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Double) 99, (Double) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Double) 99, (Double) 7 , 99 , 7);
			// Tolerance Type = Int16 Parameter type == Single
			Assert.Zero(comparer.Compare((Single)8,(Single)1));
			Assert.Zero(comparer.Compare((Single)111,(Single)108));
			Assert.Zero(comparer.Compare((Single)77,(Single)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Single) 99, (Single) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Single) 99, (Single) 7 , 99 , 7);
			// Tolerance Type = Int16 Parameter type == Decimal
			Assert.Zero(comparer.Compare((Decimal)8,(Decimal)1));
			Assert.Zero(comparer.Compare((Decimal)111,(Decimal)108));
			Assert.Zero(comparer.Compare((Decimal)77,(Decimal)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Decimal) 99, (Decimal) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Decimal) 99, (Decimal) 7 , 99 , 7);
        }

		// Int16
		[Test]
		public void TypeInt16_MiscTypesToCompare()
		{
			// Note: the CompareNumbers.Toleranced<Int16> constructor will direct call to non-generic implementation
			// because the generic type argument matches the tolerance type.  More efficient implementation
			Int16 tolerance = (Int16)10;
		    var comparer = CompareNumbers.Toleranced<object>(tolerance, new Func<object, Int16> ((a)=> (Int16)(0-visynConvert.ToInt16(a))));

			// Now try some different types...
			// Tolerance Type = Int16 Parameter type == Int32
			Assert.Zero(comparer.Compare((Int32)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(Int32)108));
			Assert.Zero(comparer.Compare((Int32)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Int32) 99, (Int32) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = Int16 Parameter type == Int64
			Assert.Zero(comparer.Compare((Int64)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(Int64)108));
			Assert.Zero(comparer.Compare((Int64)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Int64) 99, (Int64) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = Int16 Parameter type == Int16
			Assert.Zero(comparer.Compare((Int16)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(Int16)108));
			Assert.Zero(comparer.Compare((Int16)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Int16) 99, (Int16) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = Int16 Parameter type == Char
			Assert.Zero(comparer.Compare((Char)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(Char)108));
			Assert.Zero(comparer.Compare((Char)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Char) 99, (Char) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = Int16 Parameter type == UInt32
			Assert.Zero(comparer.Compare((UInt32)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(UInt32)108));
			Assert.Zero(comparer.Compare((UInt32)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (UInt32) 99, (UInt32) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = Int16 Parameter type == UInt64
			Assert.Zero(comparer.Compare((UInt64)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(UInt64)108));
			Assert.Zero(comparer.Compare((UInt64)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (UInt64) 99, (UInt64) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = Int16 Parameter type == UInt16
			Assert.Zero(comparer.Compare((UInt16)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(UInt16)108));
			Assert.Zero(comparer.Compare((UInt16)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (UInt16) 99, (UInt16) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = Int16 Parameter type == Byte
			Assert.Zero(comparer.Compare((Byte)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(Byte)108));
			Assert.Zero(comparer.Compare((Byte)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Byte) 99, (Byte) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = Int16 Parameter type == Double
			Assert.Zero(comparer.Compare((Double)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(Double)108));
			Assert.Zero(comparer.Compare((Double)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Double) 99, (Double) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = Int16 Parameter type == Single
			Assert.Zero(comparer.Compare((Single)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(Single)108));
			Assert.Zero(comparer.Compare((Single)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Single) 99, (Single) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = Int16 Parameter type == Decimal
			Assert.Zero(comparer.Compare((Decimal)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(Decimal)108));
			Assert.Zero(comparer.Compare((Decimal)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Decimal) 99, (Decimal) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
        }
#endregion

#region Char	// Char - unsinged tests
		[Test]
		public void TypeChar_Generic()
		{
			// Note: the CompareNumbers.Toleranced<Char> constructor will direct call to non-generic implementation
			// because the generic type argument matches the tolerance type.  This is a more efficient implementation
			Char tolerance = (Char)10;
			//Toleranced<T>(Int32 tolerance, Func<T,Int32> converter)
		    var comparer = CompareNumbers.Toleranced<Char>(tolerance, new Func<Char, Char> ((a)=> (Char)(0-a)));

			Assert.Zero(comparer.Compare((Char)7,(Char)2));
			Assert.Zero(comparer.Compare((Char)107,(Char)100));


			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (Char) 99, (Char) 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (Char) 7, (Char) 99);
			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (Char) 12, (Char) 12);
        }

		[Test]
		public void TypeChar_NotGeneric()
		{
			Char tolerance = (Char)10;
		    var comparer = CompareNumbers.Toleranced(tolerance, new Func<Char, Char> ((a)=> (Char)(0-a)));

			Assert.Zero(comparer.Compare((Char)7,(Char)2));
			Assert.Zero(comparer.Compare((Char)107,(Char)100));


			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (Char) 99, (Char) 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (Char) 7, (Char) 99);
			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (Char) 12, (Char) 12);
        }

		[Test]
		public void TypeChar_Limits()
		{
			Char tolerance = (Char)10;
		    var comparer = CompareNumbers.Toleranced<Char>(tolerance, new Func<Char, Char> ((a)=> (Char)(0-a)));

			Assert.Zero(comparer.Compare((Char)1,(Char)11));
			Assert.Zero(comparer.Compare((Char)11,(Char)1));
			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (Char) 1, (Char) 12);
			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (Char) 12, (Char) 1);
        }

		// Char tests involving change in type (i.e. compare int and double as a double w/ double tolerance)
		[Test]
		public void TypeChar_GenericMixedTypeNumbers()
		{
			// Note: the CompareNumbers.Toleranced<Char> constructor will direct call to non-generic implementation
			// because the generic type argument matches the tolerance type.  More efficient implementation
			Char tolerance = (Char)10;
		    var comparer = CompareNumbers.Toleranced<object>(tolerance, new Func<object, Char> ((a)=> (Char)(0-visynConvert.ToChar(a))));

			// First try numbers with same type as tolerance...
			Assert.Zero(comparer.Compare((Char)7,(Char)2));
			Assert.Zero(comparer.Compare((Char)107,(Char)100));
			// Now try some different types...
			// Tolerance Type = Char Parameter type == Int32
			Assert.Zero(comparer.Compare((Int32)8,(Int32)1));
			Assert.Zero(comparer.Compare((Int32)111,(Int32)108));
			Assert.Zero(comparer.Compare((Int32)77,(Int32)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Int32) 99, (Int32) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Int32) 99, (Int32) 7 , 99 , 7);
			// Tolerance Type = Char Parameter type == Int64
			Assert.Zero(comparer.Compare((Int64)8,(Int64)1));
			Assert.Zero(comparer.Compare((Int64)111,(Int64)108));
			Assert.Zero(comparer.Compare((Int64)77,(Int64)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Int64) 99, (Int64) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Int64) 99, (Int64) 7 , 99 , 7);
			// Tolerance Type = Char Parameter type == Int16
			Assert.Zero(comparer.Compare((Int16)8,(Int16)1));
			Assert.Zero(comparer.Compare((Int16)111,(Int16)108));
			Assert.Zero(comparer.Compare((Int16)77,(Int16)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Int16) 99, (Int16) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Int16) 99, (Int16) 7 , 99 , 7);
			// Tolerance Type = Char Parameter type == Char
			Assert.Zero(comparer.Compare((Char)8,(Char)1));
			Assert.Zero(comparer.Compare((Char)111,(Char)108));
			Assert.Zero(comparer.Compare((Char)77,(Char)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Char) 99, (Char) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Char) 99, (Char) 7 , 99 , 7);
			// Tolerance Type = Char Parameter type == UInt32
			Assert.Zero(comparer.Compare((UInt32)8,(UInt32)1));
			Assert.Zero(comparer.Compare((UInt32)111,(UInt32)108));
			Assert.Zero(comparer.Compare((UInt32)77,(UInt32)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (UInt32) 99, (UInt32) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (UInt32) 99, (UInt32) 7 , 99 , 7);
			// Tolerance Type = Char Parameter type == UInt64
			Assert.Zero(comparer.Compare((UInt64)8,(UInt64)1));
			Assert.Zero(comparer.Compare((UInt64)111,(UInt64)108));
			Assert.Zero(comparer.Compare((UInt64)77,(UInt64)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (UInt64) 99, (UInt64) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (UInt64) 99, (UInt64) 7 , 99 , 7);
			// Tolerance Type = Char Parameter type == UInt16
			Assert.Zero(comparer.Compare((UInt16)8,(UInt16)1));
			Assert.Zero(comparer.Compare((UInt16)111,(UInt16)108));
			Assert.Zero(comparer.Compare((UInt16)77,(UInt16)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (UInt16) 99, (UInt16) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (UInt16) 99, (UInt16) 7 , 99 , 7);
			// Tolerance Type = Char Parameter type == Byte
			Assert.Zero(comparer.Compare((Byte)8,(Byte)1));
			Assert.Zero(comparer.Compare((Byte)111,(Byte)108));
			Assert.Zero(comparer.Compare((Byte)77,(Byte)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Byte) 99, (Byte) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Byte) 99, (Byte) 7 , 99 , 7);
			// Tolerance Type = Char Parameter type == Double
			Assert.Zero(comparer.Compare((Double)8,(Double)1));
			Assert.Zero(comparer.Compare((Double)111,(Double)108));
			Assert.Zero(comparer.Compare((Double)77,(Double)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Double) 99, (Double) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Double) 99, (Double) 7 , 99 , 7);
			// Tolerance Type = Char Parameter type == Single
			Assert.Zero(comparer.Compare((Single)8,(Single)1));
			Assert.Zero(comparer.Compare((Single)111,(Single)108));
			Assert.Zero(comparer.Compare((Single)77,(Single)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Single) 99, (Single) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Single) 99, (Single) 7 , 99 , 7);
			// Tolerance Type = Char Parameter type == Decimal
			Assert.Zero(comparer.Compare((Decimal)8,(Decimal)1));
			Assert.Zero(comparer.Compare((Decimal)111,(Decimal)108));
			Assert.Zero(comparer.Compare((Decimal)77,(Decimal)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Decimal) 99, (Decimal) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Decimal) 99, (Decimal) 7 , 99 , 7);
        }

		// Char
		[Test]
		public void TypeChar_MiscTypesToCompare()
		{
			// Note: the CompareNumbers.Toleranced<Char> constructor will direct call to non-generic implementation
			// because the generic type argument matches the tolerance type.  More efficient implementation
			Char tolerance = (Char)10;
		    var comparer = CompareNumbers.Toleranced<object>(tolerance, new Func<object, Char> ((a)=> (Char)(0-visynConvert.ToChar(a))));

			// Now try some different types...
			// Tolerance Type = Char Parameter type == Int32
			Assert.Zero(comparer.Compare((Int32)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(Int32)108));
			Assert.Zero(comparer.Compare((Int32)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Int32) 99, (Int32) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = Char Parameter type == Int64
			Assert.Zero(comparer.Compare((Int64)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(Int64)108));
			Assert.Zero(comparer.Compare((Int64)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Int64) 99, (Int64) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = Char Parameter type == Int16
			Assert.Zero(comparer.Compare((Int16)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(Int16)108));
			Assert.Zero(comparer.Compare((Int16)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Int16) 99, (Int16) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = Char Parameter type == Char
			Assert.Zero(comparer.Compare((Char)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(Char)108));
			Assert.Zero(comparer.Compare((Char)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Char) 99, (Char) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = Char Parameter type == UInt32
			Assert.Zero(comparer.Compare((UInt32)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(UInt32)108));
			Assert.Zero(comparer.Compare((UInt32)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (UInt32) 99, (UInt32) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = Char Parameter type == UInt64
			Assert.Zero(comparer.Compare((UInt64)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(UInt64)108));
			Assert.Zero(comparer.Compare((UInt64)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (UInt64) 99, (UInt64) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = Char Parameter type == UInt16
			Assert.Zero(comparer.Compare((UInt16)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(UInt16)108));
			Assert.Zero(comparer.Compare((UInt16)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (UInt16) 99, (UInt16) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = Char Parameter type == Byte
			Assert.Zero(comparer.Compare((Byte)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(Byte)108));
			Assert.Zero(comparer.Compare((Byte)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Byte) 99, (Byte) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = Char Parameter type == Double
			Assert.Zero(comparer.Compare((Double)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(Double)108));
			Assert.Zero(comparer.Compare((Double)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Double) 99, (Double) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = Char Parameter type == Single
			Assert.Zero(comparer.Compare((Single)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(Single)108));
			Assert.Zero(comparer.Compare((Single)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Single) 99, (Single) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = Char Parameter type == Decimal
			Assert.Zero(comparer.Compare((Decimal)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(Decimal)108));
			Assert.Zero(comparer.Compare((Decimal)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Decimal) 99, (Decimal) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
        }
#endregion

#region UInt32	// UInt32 - unsinged tests
		[Test]
		public void TypeUInt32_Generic()
		{
			// Note: the CompareNumbers.Toleranced<UInt32> constructor will direct call to non-generic implementation
			// because the generic type argument matches the tolerance type.  This is a more efficient implementation
			UInt32 tolerance = (UInt32)10;
			//Toleranced<T>(Int32 tolerance, Func<T,Int32> converter)
		    var comparer = CompareNumbers.Toleranced<UInt32>(tolerance, new Func<UInt32, UInt32> ((a)=> (UInt32)(0-a)));

			Assert.Zero(comparer.Compare((UInt32)7,(UInt32)2));
			Assert.Zero(comparer.Compare((UInt32)107,(UInt32)100));


			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (UInt32) 99, (UInt32) 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (UInt32) 7, (UInt32) 99);
			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (UInt32) 12, (UInt32) 12);
        }

		[Test]
		public void TypeUInt32_NotGeneric()
		{
			UInt32 tolerance = (UInt32)10;
		    var comparer = CompareNumbers.Toleranced(tolerance, new Func<UInt32, UInt32> ((a)=> (UInt32)(0-a)));

			Assert.Zero(comparer.Compare((UInt32)7,(UInt32)2));
			Assert.Zero(comparer.Compare((UInt32)107,(UInt32)100));


			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (UInt32) 99, (UInt32) 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (UInt32) 7, (UInt32) 99);
			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (UInt32) 12, (UInt32) 12);
        }

		[Test]
		public void TypeUInt32_Limits()
		{
			UInt32 tolerance = (UInt32)10;
		    var comparer = CompareNumbers.Toleranced<UInt32>(tolerance, new Func<UInt32, UInt32> ((a)=> (UInt32)(0-a)));

			Assert.Zero(comparer.Compare((UInt32)1,(UInt32)11));
			Assert.Zero(comparer.Compare((UInt32)11,(UInt32)1));
			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (UInt32) 1, (UInt32) 12);
			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (UInt32) 12, (UInt32) 1);
        }

		// UInt32 tests involving change in type (i.e. compare int and double as a double w/ double tolerance)
		[Test]
		public void TypeUInt32_GenericMixedTypeNumbers()
		{
			// Note: the CompareNumbers.Toleranced<UInt32> constructor will direct call to non-generic implementation
			// because the generic type argument matches the tolerance type.  More efficient implementation
			UInt32 tolerance = (UInt32)10;
		    var comparer = CompareNumbers.Toleranced<object>(tolerance, new Func<object, UInt32> ((a)=> (UInt32)(0-visynConvert.ToUInt32(a))));

			// First try numbers with same type as tolerance...
			Assert.Zero(comparer.Compare((UInt32)7,(UInt32)2));
			Assert.Zero(comparer.Compare((UInt32)107,(UInt32)100));
			// Now try some different types...
			// Tolerance Type = UInt32 Parameter type == Int32
			Assert.Zero(comparer.Compare((Int32)8,(Int32)1));
			Assert.Zero(comparer.Compare((Int32)111,(Int32)108));
			Assert.Zero(comparer.Compare((Int32)77,(Int32)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Int32) 99, (Int32) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Int32) 99, (Int32) 7 , 99 , 7);
			// Tolerance Type = UInt32 Parameter type == Int64
			Assert.Zero(comparer.Compare((Int64)8,(Int64)1));
			Assert.Zero(comparer.Compare((Int64)111,(Int64)108));
			Assert.Zero(comparer.Compare((Int64)77,(Int64)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Int64) 99, (Int64) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Int64) 99, (Int64) 7 , 99 , 7);
			// Tolerance Type = UInt32 Parameter type == Int16
			Assert.Zero(comparer.Compare((Int16)8,(Int16)1));
			Assert.Zero(comparer.Compare((Int16)111,(Int16)108));
			Assert.Zero(comparer.Compare((Int16)77,(Int16)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Int16) 99, (Int16) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Int16) 99, (Int16) 7 , 99 , 7);
			// Tolerance Type = UInt32 Parameter type == Char
			Assert.Zero(comparer.Compare((Char)8,(Char)1));
			Assert.Zero(comparer.Compare((Char)111,(Char)108));
			Assert.Zero(comparer.Compare((Char)77,(Char)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Char) 99, (Char) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Char) 99, (Char) 7 , 99 , 7);
			// Tolerance Type = UInt32 Parameter type == UInt32
			Assert.Zero(comparer.Compare((UInt32)8,(UInt32)1));
			Assert.Zero(comparer.Compare((UInt32)111,(UInt32)108));
			Assert.Zero(comparer.Compare((UInt32)77,(UInt32)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (UInt32) 99, (UInt32) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (UInt32) 99, (UInt32) 7 , 99 , 7);
			// Tolerance Type = UInt32 Parameter type == UInt64
			Assert.Zero(comparer.Compare((UInt64)8,(UInt64)1));
			Assert.Zero(comparer.Compare((UInt64)111,(UInt64)108));
			Assert.Zero(comparer.Compare((UInt64)77,(UInt64)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (UInt64) 99, (UInt64) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (UInt64) 99, (UInt64) 7 , 99 , 7);
			// Tolerance Type = UInt32 Parameter type == UInt16
			Assert.Zero(comparer.Compare((UInt16)8,(UInt16)1));
			Assert.Zero(comparer.Compare((UInt16)111,(UInt16)108));
			Assert.Zero(comparer.Compare((UInt16)77,(UInt16)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (UInt16) 99, (UInt16) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (UInt16) 99, (UInt16) 7 , 99 , 7);
			// Tolerance Type = UInt32 Parameter type == Byte
			Assert.Zero(comparer.Compare((Byte)8,(Byte)1));
			Assert.Zero(comparer.Compare((Byte)111,(Byte)108));
			Assert.Zero(comparer.Compare((Byte)77,(Byte)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Byte) 99, (Byte) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Byte) 99, (Byte) 7 , 99 , 7);
			// Tolerance Type = UInt32 Parameter type == Double
			Assert.Zero(comparer.Compare((Double)8,(Double)1));
			Assert.Zero(comparer.Compare((Double)111,(Double)108));
			Assert.Zero(comparer.Compare((Double)77,(Double)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Double) 99, (Double) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Double) 99, (Double) 7 , 99 , 7);
			// Tolerance Type = UInt32 Parameter type == Single
			Assert.Zero(comparer.Compare((Single)8,(Single)1));
			Assert.Zero(comparer.Compare((Single)111,(Single)108));
			Assert.Zero(comparer.Compare((Single)77,(Single)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Single) 99, (Single) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Single) 99, (Single) 7 , 99 , 7);
			// Tolerance Type = UInt32 Parameter type == Decimal
			Assert.Zero(comparer.Compare((Decimal)8,(Decimal)1));
			Assert.Zero(comparer.Compare((Decimal)111,(Decimal)108));
			Assert.Zero(comparer.Compare((Decimal)77,(Decimal)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Decimal) 99, (Decimal) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Decimal) 99, (Decimal) 7 , 99 , 7);
        }

		// UInt32
		[Test]
		public void TypeUInt32_MiscTypesToCompare()
		{
			// Note: the CompareNumbers.Toleranced<UInt32> constructor will direct call to non-generic implementation
			// because the generic type argument matches the tolerance type.  More efficient implementation
			UInt32 tolerance = (UInt32)10;
		    var comparer = CompareNumbers.Toleranced<object>(tolerance, new Func<object, UInt32> ((a)=> (UInt32)(0-visynConvert.ToUInt32(a))));

			// Now try some different types...
			// Tolerance Type = UInt32 Parameter type == Int32
			Assert.Zero(comparer.Compare((Int32)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(Int32)108));
			Assert.Zero(comparer.Compare((Int32)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Int32) 99, (Int32) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = UInt32 Parameter type == Int64
			Assert.Zero(comparer.Compare((Int64)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(Int64)108));
			Assert.Zero(comparer.Compare((Int64)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Int64) 99, (Int64) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = UInt32 Parameter type == Int16
			Assert.Zero(comparer.Compare((Int16)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(Int16)108));
			Assert.Zero(comparer.Compare((Int16)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Int16) 99, (Int16) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = UInt32 Parameter type == Char
			Assert.Zero(comparer.Compare((Char)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(Char)108));
			Assert.Zero(comparer.Compare((Char)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Char) 99, (Char) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = UInt32 Parameter type == UInt32
			Assert.Zero(comparer.Compare((UInt32)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(UInt32)108));
			Assert.Zero(comparer.Compare((UInt32)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (UInt32) 99, (UInt32) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = UInt32 Parameter type == UInt64
			Assert.Zero(comparer.Compare((UInt64)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(UInt64)108));
			Assert.Zero(comparer.Compare((UInt64)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (UInt64) 99, (UInt64) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = UInt32 Parameter type == UInt16
			Assert.Zero(comparer.Compare((UInt16)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(UInt16)108));
			Assert.Zero(comparer.Compare((UInt16)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (UInt16) 99, (UInt16) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = UInt32 Parameter type == Byte
			Assert.Zero(comparer.Compare((Byte)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(Byte)108));
			Assert.Zero(comparer.Compare((Byte)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Byte) 99, (Byte) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = UInt32 Parameter type == Double
			Assert.Zero(comparer.Compare((Double)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(Double)108));
			Assert.Zero(comparer.Compare((Double)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Double) 99, (Double) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = UInt32 Parameter type == Single
			Assert.Zero(comparer.Compare((Single)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(Single)108));
			Assert.Zero(comparer.Compare((Single)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Single) 99, (Single) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = UInt32 Parameter type == Decimal
			Assert.Zero(comparer.Compare((Decimal)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(Decimal)108));
			Assert.Zero(comparer.Compare((Decimal)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Decimal) 99, (Decimal) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
        }
#endregion

#region UInt64	// UInt64 - unsinged tests
		[Test]
		public void TypeUInt64_Generic()
		{
			// Note: the CompareNumbers.Toleranced<UInt64> constructor will direct call to non-generic implementation
			// because the generic type argument matches the tolerance type.  This is a more efficient implementation
			UInt64 tolerance = (UInt64)10;
			//Toleranced<T>(Int32 tolerance, Func<T,Int32> converter)
		    var comparer = CompareNumbers.Toleranced<UInt64>(tolerance, new Func<UInt64, UInt64> ((a)=> (UInt64)(0-a)));

			Assert.Zero(comparer.Compare((UInt64)7,(UInt64)2));
			Assert.Zero(comparer.Compare((UInt64)107,(UInt64)100));


			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (UInt64) 99, (UInt64) 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (UInt64) 7, (UInt64) 99);
			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (UInt64) 12, (UInt64) 12);
        }

		[Test]
		public void TypeUInt64_NotGeneric()
		{
			UInt64 tolerance = (UInt64)10;
		    var comparer = CompareNumbers.Toleranced(tolerance, new Func<UInt64, UInt64> ((a)=> (UInt64)(0-a)));

			Assert.Zero(comparer.Compare((UInt64)7,(UInt64)2));
			Assert.Zero(comparer.Compare((UInt64)107,(UInt64)100));


			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (UInt64) 99, (UInt64) 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (UInt64) 7, (UInt64) 99);
			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (UInt64) 12, (UInt64) 12);
        }

		[Test]
		public void TypeUInt64_Limits()
		{
			UInt64 tolerance = (UInt64)10;
		    var comparer = CompareNumbers.Toleranced<UInt64>(tolerance, new Func<UInt64, UInt64> ((a)=> (UInt64)(0-a)));

			Assert.Zero(comparer.Compare((UInt64)1,(UInt64)11));
			Assert.Zero(comparer.Compare((UInt64)11,(UInt64)1));
			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (UInt64) 1, (UInt64) 12);
			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (UInt64) 12, (UInt64) 1);
        }

		// UInt64 tests involving change in type (i.e. compare int and double as a double w/ double tolerance)
		[Test]
		public void TypeUInt64_GenericMixedTypeNumbers()
		{
			// Note: the CompareNumbers.Toleranced<UInt64> constructor will direct call to non-generic implementation
			// because the generic type argument matches the tolerance type.  More efficient implementation
			UInt64 tolerance = (UInt64)10;
		    var comparer = CompareNumbers.Toleranced<object>(tolerance, new Func<object, UInt64> ((a)=> (UInt64)(0-visynConvert.ToUInt64(a))));

			// First try numbers with same type as tolerance...
			Assert.Zero(comparer.Compare((UInt64)7,(UInt64)2));
			Assert.Zero(comparer.Compare((UInt64)107,(UInt64)100));
			// Now try some different types...
			// Tolerance Type = UInt64 Parameter type == Int32
			Assert.Zero(comparer.Compare((Int32)8,(Int32)1));
			Assert.Zero(comparer.Compare((Int32)111,(Int32)108));
			Assert.Zero(comparer.Compare((Int32)77,(Int32)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Int32) 99, (Int32) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Int32) 99, (Int32) 7 , 99 , 7);
			// Tolerance Type = UInt64 Parameter type == Int64
			Assert.Zero(comparer.Compare((Int64)8,(Int64)1));
			Assert.Zero(comparer.Compare((Int64)111,(Int64)108));
			Assert.Zero(comparer.Compare((Int64)77,(Int64)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Int64) 99, (Int64) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Int64) 99, (Int64) 7 , 99 , 7);
			// Tolerance Type = UInt64 Parameter type == Int16
			Assert.Zero(comparer.Compare((Int16)8,(Int16)1));
			Assert.Zero(comparer.Compare((Int16)111,(Int16)108));
			Assert.Zero(comparer.Compare((Int16)77,(Int16)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Int16) 99, (Int16) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Int16) 99, (Int16) 7 , 99 , 7);
			// Tolerance Type = UInt64 Parameter type == Char
			Assert.Zero(comparer.Compare((Char)8,(Char)1));
			Assert.Zero(comparer.Compare((Char)111,(Char)108));
			Assert.Zero(comparer.Compare((Char)77,(Char)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Char) 99, (Char) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Char) 99, (Char) 7 , 99 , 7);
			// Tolerance Type = UInt64 Parameter type == UInt32
			Assert.Zero(comparer.Compare((UInt32)8,(UInt32)1));
			Assert.Zero(comparer.Compare((UInt32)111,(UInt32)108));
			Assert.Zero(comparer.Compare((UInt32)77,(UInt32)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (UInt32) 99, (UInt32) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (UInt32) 99, (UInt32) 7 , 99 , 7);
			// Tolerance Type = UInt64 Parameter type == UInt64
			Assert.Zero(comparer.Compare((UInt64)8,(UInt64)1));
			Assert.Zero(comparer.Compare((UInt64)111,(UInt64)108));
			Assert.Zero(comparer.Compare((UInt64)77,(UInt64)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (UInt64) 99, (UInt64) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (UInt64) 99, (UInt64) 7 , 99 , 7);
			// Tolerance Type = UInt64 Parameter type == UInt16
			Assert.Zero(comparer.Compare((UInt16)8,(UInt16)1));
			Assert.Zero(comparer.Compare((UInt16)111,(UInt16)108));
			Assert.Zero(comparer.Compare((UInt16)77,(UInt16)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (UInt16) 99, (UInt16) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (UInt16) 99, (UInt16) 7 , 99 , 7);
			// Tolerance Type = UInt64 Parameter type == Byte
			Assert.Zero(comparer.Compare((Byte)8,(Byte)1));
			Assert.Zero(comparer.Compare((Byte)111,(Byte)108));
			Assert.Zero(comparer.Compare((Byte)77,(Byte)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Byte) 99, (Byte) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Byte) 99, (Byte) 7 , 99 , 7);
			// Tolerance Type = UInt64 Parameter type == Double
			Assert.Zero(comparer.Compare((Double)8,(Double)1));
			Assert.Zero(comparer.Compare((Double)111,(Double)108));
			Assert.Zero(comparer.Compare((Double)77,(Double)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Double) 99, (Double) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Double) 99, (Double) 7 , 99 , 7);
			// Tolerance Type = UInt64 Parameter type == Single
			Assert.Zero(comparer.Compare((Single)8,(Single)1));
			Assert.Zero(comparer.Compare((Single)111,(Single)108));
			Assert.Zero(comparer.Compare((Single)77,(Single)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Single) 99, (Single) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Single) 99, (Single) 7 , 99 , 7);
			// Tolerance Type = UInt64 Parameter type == Decimal
			Assert.Zero(comparer.Compare((Decimal)8,(Decimal)1));
			Assert.Zero(comparer.Compare((Decimal)111,(Decimal)108));
			Assert.Zero(comparer.Compare((Decimal)77,(Decimal)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Decimal) 99, (Decimal) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Decimal) 99, (Decimal) 7 , 99 , 7);
        }

		// UInt64
		[Test]
		public void TypeUInt64_MiscTypesToCompare()
		{
			// Note: the CompareNumbers.Toleranced<UInt64> constructor will direct call to non-generic implementation
			// because the generic type argument matches the tolerance type.  More efficient implementation
			UInt64 tolerance = (UInt64)10;
		    var comparer = CompareNumbers.Toleranced<object>(tolerance, new Func<object, UInt64> ((a)=> (UInt64)(0-visynConvert.ToUInt64(a))));

			// Now try some different types...
			// Tolerance Type = UInt64 Parameter type == Int32
			Assert.Zero(comparer.Compare((Int32)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(Int32)108));
			Assert.Zero(comparer.Compare((Int32)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Int32) 99, (Int32) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = UInt64 Parameter type == Int64
			Assert.Zero(comparer.Compare((Int64)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(Int64)108));
			Assert.Zero(comparer.Compare((Int64)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Int64) 99, (Int64) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = UInt64 Parameter type == Int16
			Assert.Zero(comparer.Compare((Int16)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(Int16)108));
			Assert.Zero(comparer.Compare((Int16)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Int16) 99, (Int16) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = UInt64 Parameter type == Char
			Assert.Zero(comparer.Compare((Char)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(Char)108));
			Assert.Zero(comparer.Compare((Char)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Char) 99, (Char) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = UInt64 Parameter type == UInt32
			Assert.Zero(comparer.Compare((UInt32)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(UInt32)108));
			Assert.Zero(comparer.Compare((UInt32)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (UInt32) 99, (UInt32) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = UInt64 Parameter type == UInt64
			Assert.Zero(comparer.Compare((UInt64)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(UInt64)108));
			Assert.Zero(comparer.Compare((UInt64)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (UInt64) 99, (UInt64) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = UInt64 Parameter type == UInt16
			Assert.Zero(comparer.Compare((UInt16)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(UInt16)108));
			Assert.Zero(comparer.Compare((UInt16)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (UInt16) 99, (UInt16) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = UInt64 Parameter type == Byte
			Assert.Zero(comparer.Compare((Byte)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(Byte)108));
			Assert.Zero(comparer.Compare((Byte)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Byte) 99, (Byte) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = UInt64 Parameter type == Double
			Assert.Zero(comparer.Compare((Double)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(Double)108));
			Assert.Zero(comparer.Compare((Double)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Double) 99, (Double) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = UInt64 Parameter type == Single
			Assert.Zero(comparer.Compare((Single)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(Single)108));
			Assert.Zero(comparer.Compare((Single)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Single) 99, (Single) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = UInt64 Parameter type == Decimal
			Assert.Zero(comparer.Compare((Decimal)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(Decimal)108));
			Assert.Zero(comparer.Compare((Decimal)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Decimal) 99, (Decimal) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
        }
#endregion

#region UInt16	// UInt16 - unsinged tests
		[Test]
		public void TypeUInt16_Generic()
		{
			// Note: the CompareNumbers.Toleranced<UInt16> constructor will direct call to non-generic implementation
			// because the generic type argument matches the tolerance type.  This is a more efficient implementation
			UInt16 tolerance = (UInt16)10;
			//Toleranced<T>(Int32 tolerance, Func<T,Int32> converter)
		    var comparer = CompareNumbers.Toleranced<UInt16>(tolerance, new Func<UInt16, UInt16> ((a)=> (UInt16)(0-a)));

			Assert.Zero(comparer.Compare((UInt16)7,(UInt16)2));
			Assert.Zero(comparer.Compare((UInt16)107,(UInt16)100));


			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (UInt16) 99, (UInt16) 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (UInt16) 7, (UInt16) 99);
			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (UInt16) 12, (UInt16) 12);
        }

		[Test]
		public void TypeUInt16_NotGeneric()
		{
			UInt16 tolerance = (UInt16)10;
		    var comparer = CompareNumbers.Toleranced(tolerance, new Func<UInt16, UInt16> ((a)=> (UInt16)(0-a)));

			Assert.Zero(comparer.Compare((UInt16)7,(UInt16)2));
			Assert.Zero(comparer.Compare((UInt16)107,(UInt16)100));


			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (UInt16) 99, (UInt16) 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (UInt16) 7, (UInt16) 99);
			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (UInt16) 12, (UInt16) 12);
        }

		[Test]
		public void TypeUInt16_Limits()
		{
			UInt16 tolerance = (UInt16)10;
		    var comparer = CompareNumbers.Toleranced<UInt16>(tolerance, new Func<UInt16, UInt16> ((a)=> (UInt16)(0-a)));

			Assert.Zero(comparer.Compare((UInt16)1,(UInt16)11));
			Assert.Zero(comparer.Compare((UInt16)11,(UInt16)1));
			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (UInt16) 1, (UInt16) 12);
			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (UInt16) 12, (UInt16) 1);
        }

		// UInt16 tests involving change in type (i.e. compare int and double as a double w/ double tolerance)
		[Test]
		public void TypeUInt16_GenericMixedTypeNumbers()
		{
			// Note: the CompareNumbers.Toleranced<UInt16> constructor will direct call to non-generic implementation
			// because the generic type argument matches the tolerance type.  More efficient implementation
			UInt16 tolerance = (UInt16)10;
		    var comparer = CompareNumbers.Toleranced<object>(tolerance, new Func<object, UInt16> ((a)=> (UInt16)(0-visynConvert.ToUInt16(a))));

			// First try numbers with same type as tolerance...
			Assert.Zero(comparer.Compare((UInt16)7,(UInt16)2));
			Assert.Zero(comparer.Compare((UInt16)107,(UInt16)100));
			// Now try some different types...
			// Tolerance Type = UInt16 Parameter type == Int32
			Assert.Zero(comparer.Compare((Int32)8,(Int32)1));
			Assert.Zero(comparer.Compare((Int32)111,(Int32)108));
			Assert.Zero(comparer.Compare((Int32)77,(Int32)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Int32) 99, (Int32) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Int32) 99, (Int32) 7 , 99 , 7);
			// Tolerance Type = UInt16 Parameter type == Int64
			Assert.Zero(comparer.Compare((Int64)8,(Int64)1));
			Assert.Zero(comparer.Compare((Int64)111,(Int64)108));
			Assert.Zero(comparer.Compare((Int64)77,(Int64)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Int64) 99, (Int64) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Int64) 99, (Int64) 7 , 99 , 7);
			// Tolerance Type = UInt16 Parameter type == Int16
			Assert.Zero(comparer.Compare((Int16)8,(Int16)1));
			Assert.Zero(comparer.Compare((Int16)111,(Int16)108));
			Assert.Zero(comparer.Compare((Int16)77,(Int16)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Int16) 99, (Int16) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Int16) 99, (Int16) 7 , 99 , 7);
			// Tolerance Type = UInt16 Parameter type == Char
			Assert.Zero(comparer.Compare((Char)8,(Char)1));
			Assert.Zero(comparer.Compare((Char)111,(Char)108));
			Assert.Zero(comparer.Compare((Char)77,(Char)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Char) 99, (Char) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Char) 99, (Char) 7 , 99 , 7);
			// Tolerance Type = UInt16 Parameter type == UInt32
			Assert.Zero(comparer.Compare((UInt32)8,(UInt32)1));
			Assert.Zero(comparer.Compare((UInt32)111,(UInt32)108));
			Assert.Zero(comparer.Compare((UInt32)77,(UInt32)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (UInt32) 99, (UInt32) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (UInt32) 99, (UInt32) 7 , 99 , 7);
			// Tolerance Type = UInt16 Parameter type == UInt64
			Assert.Zero(comparer.Compare((UInt64)8,(UInt64)1));
			Assert.Zero(comparer.Compare((UInt64)111,(UInt64)108));
			Assert.Zero(comparer.Compare((UInt64)77,(UInt64)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (UInt64) 99, (UInt64) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (UInt64) 99, (UInt64) 7 , 99 , 7);
			// Tolerance Type = UInt16 Parameter type == UInt16
			Assert.Zero(comparer.Compare((UInt16)8,(UInt16)1));
			Assert.Zero(comparer.Compare((UInt16)111,(UInt16)108));
			Assert.Zero(comparer.Compare((UInt16)77,(UInt16)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (UInt16) 99, (UInt16) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (UInt16) 99, (UInt16) 7 , 99 , 7);
			// Tolerance Type = UInt16 Parameter type == Byte
			Assert.Zero(comparer.Compare((Byte)8,(Byte)1));
			Assert.Zero(comparer.Compare((Byte)111,(Byte)108));
			Assert.Zero(comparer.Compare((Byte)77,(Byte)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Byte) 99, (Byte) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Byte) 99, (Byte) 7 , 99 , 7);
			// Tolerance Type = UInt16 Parameter type == Double
			Assert.Zero(comparer.Compare((Double)8,(Double)1));
			Assert.Zero(comparer.Compare((Double)111,(Double)108));
			Assert.Zero(comparer.Compare((Double)77,(Double)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Double) 99, (Double) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Double) 99, (Double) 7 , 99 , 7);
			// Tolerance Type = UInt16 Parameter type == Single
			Assert.Zero(comparer.Compare((Single)8,(Single)1));
			Assert.Zero(comparer.Compare((Single)111,(Single)108));
			Assert.Zero(comparer.Compare((Single)77,(Single)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Single) 99, (Single) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Single) 99, (Single) 7 , 99 , 7);
			// Tolerance Type = UInt16 Parameter type == Decimal
			Assert.Zero(comparer.Compare((Decimal)8,(Decimal)1));
			Assert.Zero(comparer.Compare((Decimal)111,(Decimal)108));
			Assert.Zero(comparer.Compare((Decimal)77,(Decimal)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Decimal) 99, (Decimal) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Decimal) 99, (Decimal) 7 , 99 , 7);
        }

		// UInt16
		[Test]
		public void TypeUInt16_MiscTypesToCompare()
		{
			// Note: the CompareNumbers.Toleranced<UInt16> constructor will direct call to non-generic implementation
			// because the generic type argument matches the tolerance type.  More efficient implementation
			UInt16 tolerance = (UInt16)10;
		    var comparer = CompareNumbers.Toleranced<object>(tolerance, new Func<object, UInt16> ((a)=> (UInt16)(0-visynConvert.ToUInt16(a))));

			// Now try some different types...
			// Tolerance Type = UInt16 Parameter type == Int32
			Assert.Zero(comparer.Compare((Int32)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(Int32)108));
			Assert.Zero(comparer.Compare((Int32)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Int32) 99, (Int32) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = UInt16 Parameter type == Int64
			Assert.Zero(comparer.Compare((Int64)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(Int64)108));
			Assert.Zero(comparer.Compare((Int64)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Int64) 99, (Int64) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = UInt16 Parameter type == Int16
			Assert.Zero(comparer.Compare((Int16)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(Int16)108));
			Assert.Zero(comparer.Compare((Int16)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Int16) 99, (Int16) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = UInt16 Parameter type == Char
			Assert.Zero(comparer.Compare((Char)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(Char)108));
			Assert.Zero(comparer.Compare((Char)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Char) 99, (Char) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = UInt16 Parameter type == UInt32
			Assert.Zero(comparer.Compare((UInt32)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(UInt32)108));
			Assert.Zero(comparer.Compare((UInt32)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (UInt32) 99, (UInt32) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = UInt16 Parameter type == UInt64
			Assert.Zero(comparer.Compare((UInt64)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(UInt64)108));
			Assert.Zero(comparer.Compare((UInt64)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (UInt64) 99, (UInt64) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = UInt16 Parameter type == UInt16
			Assert.Zero(comparer.Compare((UInt16)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(UInt16)108));
			Assert.Zero(comparer.Compare((UInt16)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (UInt16) 99, (UInt16) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = UInt16 Parameter type == Byte
			Assert.Zero(comparer.Compare((Byte)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(Byte)108));
			Assert.Zero(comparer.Compare((Byte)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Byte) 99, (Byte) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = UInt16 Parameter type == Double
			Assert.Zero(comparer.Compare((Double)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(Double)108));
			Assert.Zero(comparer.Compare((Double)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Double) 99, (Double) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = UInt16 Parameter type == Single
			Assert.Zero(comparer.Compare((Single)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(Single)108));
			Assert.Zero(comparer.Compare((Single)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Single) 99, (Single) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = UInt16 Parameter type == Decimal
			Assert.Zero(comparer.Compare((Decimal)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(Decimal)108));
			Assert.Zero(comparer.Compare((Decimal)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Decimal) 99, (Decimal) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
        }
#endregion

#region Byte	// Byte - unsinged tests
		[Test]
		public void TypeByte_Generic()
		{
			// Note: the CompareNumbers.Toleranced<Byte> constructor will direct call to non-generic implementation
			// because the generic type argument matches the tolerance type.  This is a more efficient implementation
			Byte tolerance = (Byte)10;
			//Toleranced<T>(Int32 tolerance, Func<T,Int32> converter)
		    var comparer = CompareNumbers.Toleranced<Byte>(tolerance, new Func<Byte, Byte> ((a)=> (Byte)(0-a)));

			Assert.Zero(comparer.Compare((Byte)7,(Byte)2));
			Assert.Zero(comparer.Compare((Byte)107,(Byte)100));


			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (Byte) 99, (Byte) 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (Byte) 7, (Byte) 99);
			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (Byte) 12, (Byte) 12);
        }

		[Test]
		public void TypeByte_NotGeneric()
		{
			Byte tolerance = (Byte)10;
		    var comparer = CompareNumbers.Toleranced(tolerance, new Func<Byte, Byte> ((a)=> (Byte)(0-a)));

			Assert.Zero(comparer.Compare((Byte)7,(Byte)2));
			Assert.Zero(comparer.Compare((Byte)107,(Byte)100));


			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (Byte) 99, (Byte) 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (Byte) 7, (Byte) 99);
			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (Byte) 12, (Byte) 12);
        }

		[Test]
		public void TypeByte_Limits()
		{
			Byte tolerance = (Byte)10;
		    var comparer = CompareNumbers.Toleranced<Byte>(tolerance, new Func<Byte, Byte> ((a)=> (Byte)(0-a)));

			Assert.Zero(comparer.Compare((Byte)1,(Byte)11));
			Assert.Zero(comparer.Compare((Byte)11,(Byte)1));
			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (Byte) 1, (Byte) 12);
			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (Byte) 12, (Byte) 1);
        }

		// Byte tests involving change in type (i.e. compare int and double as a double w/ double tolerance)
		[Test]
		public void TypeByte_GenericMixedTypeNumbers()
		{
			// Note: the CompareNumbers.Toleranced<Byte> constructor will direct call to non-generic implementation
			// because the generic type argument matches the tolerance type.  More efficient implementation
			Byte tolerance = (Byte)10;
		    var comparer = CompareNumbers.Toleranced<object>(tolerance, new Func<object, Byte> ((a)=> (Byte)(0-visynConvert.ToByte(a))));

			// First try numbers with same type as tolerance...
			Assert.Zero(comparer.Compare((Byte)7,(Byte)2));
			Assert.Zero(comparer.Compare((Byte)107,(Byte)100));
			// Now try some different types...
			// Tolerance Type = Byte Parameter type == Int32
			Assert.Zero(comparer.Compare((Int32)8,(Int32)1));
			Assert.Zero(comparer.Compare((Int32)111,(Int32)108));
			Assert.Zero(comparer.Compare((Int32)77,(Int32)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Int32) 99, (Int32) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Int32) 99, (Int32) 7 , 99 , 7);
			// Tolerance Type = Byte Parameter type == Int64
			Assert.Zero(comparer.Compare((Int64)8,(Int64)1));
			Assert.Zero(comparer.Compare((Int64)111,(Int64)108));
			Assert.Zero(comparer.Compare((Int64)77,(Int64)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Int64) 99, (Int64) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Int64) 99, (Int64) 7 , 99 , 7);
			// Tolerance Type = Byte Parameter type == Int16
			Assert.Zero(comparer.Compare((Int16)8,(Int16)1));
			Assert.Zero(comparer.Compare((Int16)111,(Int16)108));
			Assert.Zero(comparer.Compare((Int16)77,(Int16)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Int16) 99, (Int16) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Int16) 99, (Int16) 7 , 99 , 7);
			// Tolerance Type = Byte Parameter type == Char
			Assert.Zero(comparer.Compare((Char)8,(Char)1));
			Assert.Zero(comparer.Compare((Char)111,(Char)108));
			Assert.Zero(comparer.Compare((Char)77,(Char)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Char) 99, (Char) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Char) 99, (Char) 7 , 99 , 7);
			// Tolerance Type = Byte Parameter type == UInt32
			Assert.Zero(comparer.Compare((UInt32)8,(UInt32)1));
			Assert.Zero(comparer.Compare((UInt32)111,(UInt32)108));
			Assert.Zero(comparer.Compare((UInt32)77,(UInt32)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (UInt32) 99, (UInt32) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (UInt32) 99, (UInt32) 7 , 99 , 7);
			// Tolerance Type = Byte Parameter type == UInt64
			Assert.Zero(comparer.Compare((UInt64)8,(UInt64)1));
			Assert.Zero(comparer.Compare((UInt64)111,(UInt64)108));
			Assert.Zero(comparer.Compare((UInt64)77,(UInt64)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (UInt64) 99, (UInt64) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (UInt64) 99, (UInt64) 7 , 99 , 7);
			// Tolerance Type = Byte Parameter type == UInt16
			Assert.Zero(comparer.Compare((UInt16)8,(UInt16)1));
			Assert.Zero(comparer.Compare((UInt16)111,(UInt16)108));
			Assert.Zero(comparer.Compare((UInt16)77,(UInt16)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (UInt16) 99, (UInt16) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (UInt16) 99, (UInt16) 7 , 99 , 7);
			// Tolerance Type = Byte Parameter type == Byte
			Assert.Zero(comparer.Compare((Byte)8,(Byte)1));
			Assert.Zero(comparer.Compare((Byte)111,(Byte)108));
			Assert.Zero(comparer.Compare((Byte)77,(Byte)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Byte) 99, (Byte) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Byte) 99, (Byte) 7 , 99 , 7);
			// Tolerance Type = Byte Parameter type == Double
			Assert.Zero(comparer.Compare((Double)8,(Double)1));
			Assert.Zero(comparer.Compare((Double)111,(Double)108));
			Assert.Zero(comparer.Compare((Double)77,(Double)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Double) 99, (Double) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Double) 99, (Double) 7 , 99 , 7);
			// Tolerance Type = Byte Parameter type == Single
			Assert.Zero(comparer.Compare((Single)8,(Single)1));
			Assert.Zero(comparer.Compare((Single)111,(Single)108));
			Assert.Zero(comparer.Compare((Single)77,(Single)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Single) 99, (Single) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Single) 99, (Single) 7 , 99 , 7);
			// Tolerance Type = Byte Parameter type == Decimal
			Assert.Zero(comparer.Compare((Decimal)8,(Decimal)1));
			Assert.Zero(comparer.Compare((Decimal)111,(Decimal)108));
			Assert.Zero(comparer.Compare((Decimal)77,(Decimal)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Decimal) 99, (Decimal) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Decimal) 99, (Decimal) 7 , 99 , 7);
        }

		// Byte
		[Test]
		public void TypeByte_MiscTypesToCompare()
		{
			// Note: the CompareNumbers.Toleranced<Byte> constructor will direct call to non-generic implementation
			// because the generic type argument matches the tolerance type.  More efficient implementation
			Byte tolerance = (Byte)10;
		    var comparer = CompareNumbers.Toleranced<object>(tolerance, new Func<object, Byte> ((a)=> (Byte)(0-visynConvert.ToByte(a))));

			// Now try some different types...
			// Tolerance Type = Byte Parameter type == Int32
			Assert.Zero(comparer.Compare((Int32)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(Int32)108));
			Assert.Zero(comparer.Compare((Int32)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Int32) 99, (Int32) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = Byte Parameter type == Int64
			Assert.Zero(comparer.Compare((Int64)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(Int64)108));
			Assert.Zero(comparer.Compare((Int64)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Int64) 99, (Int64) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = Byte Parameter type == Int16
			Assert.Zero(comparer.Compare((Int16)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(Int16)108));
			Assert.Zero(comparer.Compare((Int16)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Int16) 99, (Int16) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = Byte Parameter type == Char
			Assert.Zero(comparer.Compare((Char)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(Char)108));
			Assert.Zero(comparer.Compare((Char)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Char) 99, (Char) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = Byte Parameter type == UInt32
			Assert.Zero(comparer.Compare((UInt32)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(UInt32)108));
			Assert.Zero(comparer.Compare((UInt32)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (UInt32) 99, (UInt32) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = Byte Parameter type == UInt64
			Assert.Zero(comparer.Compare((UInt64)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(UInt64)108));
			Assert.Zero(comparer.Compare((UInt64)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (UInt64) 99, (UInt64) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = Byte Parameter type == UInt16
			Assert.Zero(comparer.Compare((UInt16)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(UInt16)108));
			Assert.Zero(comparer.Compare((UInt16)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (UInt16) 99, (UInt16) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = Byte Parameter type == Byte
			Assert.Zero(comparer.Compare((Byte)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(Byte)108));
			Assert.Zero(comparer.Compare((Byte)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Byte) 99, (Byte) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = Byte Parameter type == Double
			Assert.Zero(comparer.Compare((Double)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(Double)108));
			Assert.Zero(comparer.Compare((Double)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Double) 99, (Double) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = Byte Parameter type == Single
			Assert.Zero(comparer.Compare((Single)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(Single)108));
			Assert.Zero(comparer.Compare((Single)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Single) 99, (Single) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = Byte Parameter type == Decimal
			Assert.Zero(comparer.Compare((Decimal)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(Decimal)108));
			Assert.Zero(comparer.Compare((Decimal)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Decimal) 99, (Decimal) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
        }
#endregion

#region Double	// Double - unsinged tests
		[Test]
		public void TypeDouble_Generic()
		{
			// Note: the CompareNumbers.Toleranced<Double> constructor will direct call to non-generic implementation
			// because the generic type argument matches the tolerance type.  This is a more efficient implementation
			Double tolerance = (Double)10;
			//Toleranced<T>(Int32 tolerance, Func<T,Int32> converter)
		    var comparer = CompareNumbers.Toleranced<Double>(tolerance, new Func<Double, Double> ((a)=> (Double)(0-a)));

			Assert.Zero(comparer.Compare((Double)7,(Double)2));
			Assert.Zero(comparer.Compare((Double)107,(Double)100));


			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (Double) 99, (Double) 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (Double) 7, (Double) 99);
			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (Double) 12, (Double) 12);
        }

		[Test]
		public void TypeDouble_NotGeneric()
		{
			Double tolerance = (Double)10;
		    var comparer = CompareNumbers.Toleranced(tolerance, new Func<Double, Double> ((a)=> (Double)(0-a)));

			Assert.Zero(comparer.Compare((Double)7,(Double)2));
			Assert.Zero(comparer.Compare((Double)107,(Double)100));


			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (Double) 99, (Double) 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (Double) 7, (Double) 99);
			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (Double) 12, (Double) 12);
        }

		[Test]
		public void TypeDouble_Limits()
		{
			Double tolerance = (Double)10;
		    var comparer = CompareNumbers.Toleranced<Double>(tolerance, new Func<Double, Double> ((a)=> (Double)(0-a)));

			Assert.Zero(comparer.Compare((Double)1,(Double)11));
			Assert.Zero(comparer.Compare((Double)11,(Double)1));
			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (Double) 1, (Double) 12);
			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (Double) 12, (Double) 1);
        }

		// Double tests involving change in type (i.e. compare int and double as a double w/ double tolerance)
		[Test]
		public void TypeDouble_GenericMixedTypeNumbers()
		{
			// Note: the CompareNumbers.Toleranced<Double> constructor will direct call to non-generic implementation
			// because the generic type argument matches the tolerance type.  More efficient implementation
			Double tolerance = (Double)10;
		    var comparer = CompareNumbers.Toleranced<object>(tolerance, new Func<object, Double> ((a)=> (Double)(0-visynConvert.ToDouble(a))));

			// First try numbers with same type as tolerance...
			Assert.Zero(comparer.Compare((Double)7,(Double)2));
			Assert.Zero(comparer.Compare((Double)107,(Double)100));
			// Now try some different types...
			// Tolerance Type = Double Parameter type == Int32
			Assert.Zero(comparer.Compare((Int32)8,(Int32)1));
			Assert.Zero(comparer.Compare((Int32)111,(Int32)108));
			Assert.Zero(comparer.Compare((Int32)77,(Int32)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Int32) 99, (Int32) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Int32) 99, (Int32) 7 , 99 , 7);
			// Tolerance Type = Double Parameter type == Int64
			Assert.Zero(comparer.Compare((Int64)8,(Int64)1));
			Assert.Zero(comparer.Compare((Int64)111,(Int64)108));
			Assert.Zero(comparer.Compare((Int64)77,(Int64)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Int64) 99, (Int64) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Int64) 99, (Int64) 7 , 99 , 7);
			// Tolerance Type = Double Parameter type == Int16
			Assert.Zero(comparer.Compare((Int16)8,(Int16)1));
			Assert.Zero(comparer.Compare((Int16)111,(Int16)108));
			Assert.Zero(comparer.Compare((Int16)77,(Int16)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Int16) 99, (Int16) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Int16) 99, (Int16) 7 , 99 , 7);
			// Tolerance Type = Double Parameter type == Char
			Assert.Zero(comparer.Compare((Char)8,(Char)1));
			Assert.Zero(comparer.Compare((Char)111,(Char)108));
			Assert.Zero(comparer.Compare((Char)77,(Char)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Char) 99, (Char) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Char) 99, (Char) 7 , 99 , 7);
			// Tolerance Type = Double Parameter type == UInt32
			Assert.Zero(comparer.Compare((UInt32)8,(UInt32)1));
			Assert.Zero(comparer.Compare((UInt32)111,(UInt32)108));
			Assert.Zero(comparer.Compare((UInt32)77,(UInt32)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (UInt32) 99, (UInt32) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (UInt32) 99, (UInt32) 7 , 99 , 7);
			// Tolerance Type = Double Parameter type == UInt64
			Assert.Zero(comparer.Compare((UInt64)8,(UInt64)1));
			Assert.Zero(comparer.Compare((UInt64)111,(UInt64)108));
			Assert.Zero(comparer.Compare((UInt64)77,(UInt64)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (UInt64) 99, (UInt64) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (UInt64) 99, (UInt64) 7 , 99 , 7);
			// Tolerance Type = Double Parameter type == UInt16
			Assert.Zero(comparer.Compare((UInt16)8,(UInt16)1));
			Assert.Zero(comparer.Compare((UInt16)111,(UInt16)108));
			Assert.Zero(comparer.Compare((UInt16)77,(UInt16)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (UInt16) 99, (UInt16) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (UInt16) 99, (UInt16) 7 , 99 , 7);
			// Tolerance Type = Double Parameter type == Byte
			Assert.Zero(comparer.Compare((Byte)8,(Byte)1));
			Assert.Zero(comparer.Compare((Byte)111,(Byte)108));
			Assert.Zero(comparer.Compare((Byte)77,(Byte)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Byte) 99, (Byte) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Byte) 99, (Byte) 7 , 99 , 7);
			// Tolerance Type = Double Parameter type == Double
			Assert.Zero(comparer.Compare((Double)8,(Double)1));
			Assert.Zero(comparer.Compare((Double)111,(Double)108));
			Assert.Zero(comparer.Compare((Double)77,(Double)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Double) 99, (Double) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Double) 99, (Double) 7 , 99 , 7);
			// Tolerance Type = Double Parameter type == Single
			Assert.Zero(comparer.Compare((Single)8,(Single)1));
			Assert.Zero(comparer.Compare((Single)111,(Single)108));
			Assert.Zero(comparer.Compare((Single)77,(Single)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Single) 99, (Single) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Single) 99, (Single) 7 , 99 , 7);
			// Tolerance Type = Double Parameter type == Decimal
			Assert.Zero(comparer.Compare((Decimal)8,(Decimal)1));
			Assert.Zero(comparer.Compare((Decimal)111,(Decimal)108));
			Assert.Zero(comparer.Compare((Decimal)77,(Decimal)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Decimal) 99, (Decimal) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Decimal) 99, (Decimal) 7 , 99 , 7);
        }

		// Double
		[Test]
		public void TypeDouble_MiscTypesToCompare()
		{
			// Note: the CompareNumbers.Toleranced<Double> constructor will direct call to non-generic implementation
			// because the generic type argument matches the tolerance type.  More efficient implementation
			Double tolerance = (Double)10;
		    var comparer = CompareNumbers.Toleranced<object>(tolerance, new Func<object, Double> ((a)=> (Double)(0-visynConvert.ToDouble(a))));

			// Now try some different types...
			// Tolerance Type = Double Parameter type == Int32
			Assert.Zero(comparer.Compare((Int32)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(Int32)108));
			Assert.Zero(comparer.Compare((Int32)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Int32) 99, (Int32) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = Double Parameter type == Int64
			Assert.Zero(comparer.Compare((Int64)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(Int64)108));
			Assert.Zero(comparer.Compare((Int64)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Int64) 99, (Int64) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = Double Parameter type == Int16
			Assert.Zero(comparer.Compare((Int16)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(Int16)108));
			Assert.Zero(comparer.Compare((Int16)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Int16) 99, (Int16) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = Double Parameter type == Char
			Assert.Zero(comparer.Compare((Char)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(Char)108));
			Assert.Zero(comparer.Compare((Char)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Char) 99, (Char) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = Double Parameter type == UInt32
			Assert.Zero(comparer.Compare((UInt32)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(UInt32)108));
			Assert.Zero(comparer.Compare((UInt32)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (UInt32) 99, (UInt32) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = Double Parameter type == UInt64
			Assert.Zero(comparer.Compare((UInt64)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(UInt64)108));
			Assert.Zero(comparer.Compare((UInt64)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (UInt64) 99, (UInt64) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = Double Parameter type == UInt16
			Assert.Zero(comparer.Compare((UInt16)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(UInt16)108));
			Assert.Zero(comparer.Compare((UInt16)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (UInt16) 99, (UInt16) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = Double Parameter type == Byte
			Assert.Zero(comparer.Compare((Byte)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(Byte)108));
			Assert.Zero(comparer.Compare((Byte)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Byte) 99, (Byte) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = Double Parameter type == Double
			Assert.Zero(comparer.Compare((Double)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(Double)108));
			Assert.Zero(comparer.Compare((Double)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Double) 99, (Double) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = Double Parameter type == Single
			Assert.Zero(comparer.Compare((Single)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(Single)108));
			Assert.Zero(comparer.Compare((Single)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Single) 99, (Single) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = Double Parameter type == Decimal
			Assert.Zero(comparer.Compare((Decimal)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(Decimal)108));
			Assert.Zero(comparer.Compare((Decimal)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Decimal) 99, (Decimal) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
        }
#endregion

#region Single	// Single - unsinged tests
		[Test]
		public void TypeSingle_Generic()
		{
			// Note: the CompareNumbers.Toleranced<Single> constructor will direct call to non-generic implementation
			// because the generic type argument matches the tolerance type.  This is a more efficient implementation
			Single tolerance = (Single)10;
			//Toleranced<T>(Int32 tolerance, Func<T,Int32> converter)
		    var comparer = CompareNumbers.Toleranced<Single>(tolerance, new Func<Single, Single> ((a)=> (Single)(0-a)));

			Assert.Zero(comparer.Compare((Single)7,(Single)2));
			Assert.Zero(comparer.Compare((Single)107,(Single)100));


			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (Single) 99, (Single) 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (Single) 7, (Single) 99);
			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (Single) 12, (Single) 12);
        }

		[Test]
		public void TypeSingle_NotGeneric()
		{
			Single tolerance = (Single)10;
		    var comparer = CompareNumbers.Toleranced(tolerance, new Func<Single, Single> ((a)=> (Single)(0-a)));

			Assert.Zero(comparer.Compare((Single)7,(Single)2));
			Assert.Zero(comparer.Compare((Single)107,(Single)100));


			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (Single) 99, (Single) 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (Single) 7, (Single) 99);
			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (Single) 12, (Single) 12);
        }

		[Test]
		public void TypeSingle_Limits()
		{
			Single tolerance = (Single)10;
		    var comparer = CompareNumbers.Toleranced<Single>(tolerance, new Func<Single, Single> ((a)=> (Single)(0-a)));

			Assert.Zero(comparer.Compare((Single)1,(Single)11));
			Assert.Zero(comparer.Compare((Single)11,(Single)1));
			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (Single) 1, (Single) 12);
			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (Single) 12, (Single) 1);
        }

		// Single tests involving change in type (i.e. compare int and double as a double w/ double tolerance)
		[Test]
		public void TypeSingle_GenericMixedTypeNumbers()
		{
			// Note: the CompareNumbers.Toleranced<Single> constructor will direct call to non-generic implementation
			// because the generic type argument matches the tolerance type.  More efficient implementation
			Single tolerance = (Single)10;
		    var comparer = CompareNumbers.Toleranced<object>(tolerance, new Func<object, Single> ((a)=> (Single)(0-visynConvert.ToSingle(a))));

			// First try numbers with same type as tolerance...
			Assert.Zero(comparer.Compare((Single)7,(Single)2));
			Assert.Zero(comparer.Compare((Single)107,(Single)100));
			// Now try some different types...
			// Tolerance Type = Single Parameter type == Int32
			Assert.Zero(comparer.Compare((Int32)8,(Int32)1));
			Assert.Zero(comparer.Compare((Int32)111,(Int32)108));
			Assert.Zero(comparer.Compare((Int32)77,(Int32)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Int32) 99, (Int32) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Int32) 99, (Int32) 7 , 99 , 7);
			// Tolerance Type = Single Parameter type == Int64
			Assert.Zero(comparer.Compare((Int64)8,(Int64)1));
			Assert.Zero(comparer.Compare((Int64)111,(Int64)108));
			Assert.Zero(comparer.Compare((Int64)77,(Int64)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Int64) 99, (Int64) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Int64) 99, (Int64) 7 , 99 , 7);
			// Tolerance Type = Single Parameter type == Int16
			Assert.Zero(comparer.Compare((Int16)8,(Int16)1));
			Assert.Zero(comparer.Compare((Int16)111,(Int16)108));
			Assert.Zero(comparer.Compare((Int16)77,(Int16)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Int16) 99, (Int16) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Int16) 99, (Int16) 7 , 99 , 7);
			// Tolerance Type = Single Parameter type == Char
			Assert.Zero(comparer.Compare((Char)8,(Char)1));
			Assert.Zero(comparer.Compare((Char)111,(Char)108));
			Assert.Zero(comparer.Compare((Char)77,(Char)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Char) 99, (Char) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Char) 99, (Char) 7 , 99 , 7);
			// Tolerance Type = Single Parameter type == UInt32
			Assert.Zero(comparer.Compare((UInt32)8,(UInt32)1));
			Assert.Zero(comparer.Compare((UInt32)111,(UInt32)108));
			Assert.Zero(comparer.Compare((UInt32)77,(UInt32)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (UInt32) 99, (UInt32) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (UInt32) 99, (UInt32) 7 , 99 , 7);
			// Tolerance Type = Single Parameter type == UInt64
			Assert.Zero(comparer.Compare((UInt64)8,(UInt64)1));
			Assert.Zero(comparer.Compare((UInt64)111,(UInt64)108));
			Assert.Zero(comparer.Compare((UInt64)77,(UInt64)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (UInt64) 99, (UInt64) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (UInt64) 99, (UInt64) 7 , 99 , 7);
			// Tolerance Type = Single Parameter type == UInt16
			Assert.Zero(comparer.Compare((UInt16)8,(UInt16)1));
			Assert.Zero(comparer.Compare((UInt16)111,(UInt16)108));
			Assert.Zero(comparer.Compare((UInt16)77,(UInt16)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (UInt16) 99, (UInt16) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (UInt16) 99, (UInt16) 7 , 99 , 7);
			// Tolerance Type = Single Parameter type == Byte
			Assert.Zero(comparer.Compare((Byte)8,(Byte)1));
			Assert.Zero(comparer.Compare((Byte)111,(Byte)108));
			Assert.Zero(comparer.Compare((Byte)77,(Byte)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Byte) 99, (Byte) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Byte) 99, (Byte) 7 , 99 , 7);
			// Tolerance Type = Single Parameter type == Double
			Assert.Zero(comparer.Compare((Double)8,(Double)1));
			Assert.Zero(comparer.Compare((Double)111,(Double)108));
			Assert.Zero(comparer.Compare((Double)77,(Double)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Double) 99, (Double) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Double) 99, (Double) 7 , 99 , 7);
			// Tolerance Type = Single Parameter type == Single
			Assert.Zero(comparer.Compare((Single)8,(Single)1));
			Assert.Zero(comparer.Compare((Single)111,(Single)108));
			Assert.Zero(comparer.Compare((Single)77,(Single)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Single) 99, (Single) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Single) 99, (Single) 7 , 99 , 7);
			// Tolerance Type = Single Parameter type == Decimal
			Assert.Zero(comparer.Compare((Decimal)8,(Decimal)1));
			Assert.Zero(comparer.Compare((Decimal)111,(Decimal)108));
			Assert.Zero(comparer.Compare((Decimal)77,(Decimal)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Decimal) 99, (Decimal) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Decimal) 99, (Decimal) 7 , 99 , 7);
        }

		// Single
		[Test]
		public void TypeSingle_MiscTypesToCompare()
		{
			// Note: the CompareNumbers.Toleranced<Single> constructor will direct call to non-generic implementation
			// because the generic type argument matches the tolerance type.  More efficient implementation
			Single tolerance = (Single)10;
		    var comparer = CompareNumbers.Toleranced<object>(tolerance, new Func<object, Single> ((a)=> (Single)(0-visynConvert.ToSingle(a))));

			// Now try some different types...
			// Tolerance Type = Single Parameter type == Int32
			Assert.Zero(comparer.Compare((Int32)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(Int32)108));
			Assert.Zero(comparer.Compare((Int32)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Int32) 99, (Int32) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = Single Parameter type == Int64
			Assert.Zero(comparer.Compare((Int64)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(Int64)108));
			Assert.Zero(comparer.Compare((Int64)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Int64) 99, (Int64) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = Single Parameter type == Int16
			Assert.Zero(comparer.Compare((Int16)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(Int16)108));
			Assert.Zero(comparer.Compare((Int16)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Int16) 99, (Int16) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = Single Parameter type == Char
			Assert.Zero(comparer.Compare((Char)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(Char)108));
			Assert.Zero(comparer.Compare((Char)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Char) 99, (Char) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = Single Parameter type == UInt32
			Assert.Zero(comparer.Compare((UInt32)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(UInt32)108));
			Assert.Zero(comparer.Compare((UInt32)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (UInt32) 99, (UInt32) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = Single Parameter type == UInt64
			Assert.Zero(comparer.Compare((UInt64)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(UInt64)108));
			Assert.Zero(comparer.Compare((UInt64)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (UInt64) 99, (UInt64) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = Single Parameter type == UInt16
			Assert.Zero(comparer.Compare((UInt16)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(UInt16)108));
			Assert.Zero(comparer.Compare((UInt16)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (UInt16) 99, (UInt16) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = Single Parameter type == Byte
			Assert.Zero(comparer.Compare((Byte)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(Byte)108));
			Assert.Zero(comparer.Compare((Byte)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Byte) 99, (Byte) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = Single Parameter type == Double
			Assert.Zero(comparer.Compare((Double)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(Double)108));
			Assert.Zero(comparer.Compare((Double)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Double) 99, (Double) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = Single Parameter type == Single
			Assert.Zero(comparer.Compare((Single)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(Single)108));
			Assert.Zero(comparer.Compare((Single)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Single) 99, (Single) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = Single Parameter type == Decimal
			Assert.Zero(comparer.Compare((Decimal)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(Decimal)108));
			Assert.Zero(comparer.Compare((Decimal)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Decimal) 99, (Decimal) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
        }
#endregion

#region Decimal	// Decimal - unsinged tests
		[Test]
		public void TypeDecimal_Generic()
		{
			// Note: the CompareNumbers.Toleranced<Decimal> constructor will direct call to non-generic implementation
			// because the generic type argument matches the tolerance type.  This is a more efficient implementation
			Decimal tolerance = (Decimal)10;
			//Toleranced<T>(Int32 tolerance, Func<T,Int32> converter)
		    var comparer = CompareNumbers.Toleranced<Decimal>(tolerance, new Func<Decimal, Decimal> ((a)=> (Decimal)(0-a)));

			Assert.Zero(comparer.Compare((Decimal)7,(Decimal)2));
			Assert.Zero(comparer.Compare((Decimal)107,(Decimal)100));


			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (Decimal) 99, (Decimal) 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (Decimal) 7, (Decimal) 99);
			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (Decimal) 12, (Decimal) 12);
        }

		[Test]
		public void TypeDecimal_NotGeneric()
		{
			Decimal tolerance = (Decimal)10;
		    var comparer = CompareNumbers.Toleranced(tolerance, new Func<Decimal, Decimal> ((a)=> (Decimal)(0-a)));

			Assert.Zero(comparer.Compare((Decimal)7,(Decimal)2));
			Assert.Zero(comparer.Compare((Decimal)107,(Decimal)100));


			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (Decimal) 99, (Decimal) 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (Decimal) 7, (Decimal) 99);
			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (Decimal) 12, (Decimal) 12);
        }

		[Test]
		public void TypeDecimal_Limits()
		{
			Decimal tolerance = (Decimal)10;
		    var comparer = CompareNumbers.Toleranced<Decimal>(tolerance, new Func<Decimal, Decimal> ((a)=> (Decimal)(0-a)));

			Assert.Zero(comparer.Compare((Decimal)1,(Decimal)11));
			Assert.Zero(comparer.Compare((Decimal)11,(Decimal)1));
			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (Decimal) 1, (Decimal) 12);
			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (Decimal) 12, (Decimal) 1);
        }

		// Decimal tests involving change in type (i.e. compare int and double as a double w/ double tolerance)
		[Test]
		public void TypeDecimal_GenericMixedTypeNumbers()
		{
			// Note: the CompareNumbers.Toleranced<Decimal> constructor will direct call to non-generic implementation
			// because the generic type argument matches the tolerance type.  More efficient implementation
			Decimal tolerance = (Decimal)10;
		    var comparer = CompareNumbers.Toleranced<object>(tolerance, new Func<object, Decimal> ((a)=> (Decimal)(0-visynConvert.ToDecimal(a))));

			// First try numbers with same type as tolerance...
			Assert.Zero(comparer.Compare((Decimal)7,(Decimal)2));
			Assert.Zero(comparer.Compare((Decimal)107,(Decimal)100));
			// Now try some different types...
			// Tolerance Type = Decimal Parameter type == Int32
			Assert.Zero(comparer.Compare((Int32)8,(Int32)1));
			Assert.Zero(comparer.Compare((Int32)111,(Int32)108));
			Assert.Zero(comparer.Compare((Int32)77,(Int32)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Int32) 99, (Int32) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Int32) 99, (Int32) 7 , 99 , 7);
			// Tolerance Type = Decimal Parameter type == Int64
			Assert.Zero(comparer.Compare((Int64)8,(Int64)1));
			Assert.Zero(comparer.Compare((Int64)111,(Int64)108));
			Assert.Zero(comparer.Compare((Int64)77,(Int64)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Int64) 99, (Int64) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Int64) 99, (Int64) 7 , 99 , 7);
			// Tolerance Type = Decimal Parameter type == Int16
			Assert.Zero(comparer.Compare((Int16)8,(Int16)1));
			Assert.Zero(comparer.Compare((Int16)111,(Int16)108));
			Assert.Zero(comparer.Compare((Int16)77,(Int16)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Int16) 99, (Int16) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Int16) 99, (Int16) 7 , 99 , 7);
			// Tolerance Type = Decimal Parameter type == Char
			Assert.Zero(comparer.Compare((Char)8,(Char)1));
			Assert.Zero(comparer.Compare((Char)111,(Char)108));
			Assert.Zero(comparer.Compare((Char)77,(Char)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Char) 99, (Char) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Char) 99, (Char) 7 , 99 , 7);
			// Tolerance Type = Decimal Parameter type == UInt32
			Assert.Zero(comparer.Compare((UInt32)8,(UInt32)1));
			Assert.Zero(comparer.Compare((UInt32)111,(UInt32)108));
			Assert.Zero(comparer.Compare((UInt32)77,(UInt32)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (UInt32) 99, (UInt32) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (UInt32) 99, (UInt32) 7 , 99 , 7);
			// Tolerance Type = Decimal Parameter type == UInt64
			Assert.Zero(comparer.Compare((UInt64)8,(UInt64)1));
			Assert.Zero(comparer.Compare((UInt64)111,(UInt64)108));
			Assert.Zero(comparer.Compare((UInt64)77,(UInt64)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (UInt64) 99, (UInt64) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (UInt64) 99, (UInt64) 7 , 99 , 7);
			// Tolerance Type = Decimal Parameter type == UInt16
			Assert.Zero(comparer.Compare((UInt16)8,(UInt16)1));
			Assert.Zero(comparer.Compare((UInt16)111,(UInt16)108));
			Assert.Zero(comparer.Compare((UInt16)77,(UInt16)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (UInt16) 99, (UInt16) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (UInt16) 99, (UInt16) 7 , 99 , 7);
			// Tolerance Type = Decimal Parameter type == Byte
			Assert.Zero(comparer.Compare((Byte)8,(Byte)1));
			Assert.Zero(comparer.Compare((Byte)111,(Byte)108));
			Assert.Zero(comparer.Compare((Byte)77,(Byte)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Byte) 99, (Byte) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Byte) 99, (Byte) 7 , 99 , 7);
			// Tolerance Type = Decimal Parameter type == Double
			Assert.Zero(comparer.Compare((Double)8,(Double)1));
			Assert.Zero(comparer.Compare((Double)111,(Double)108));
			Assert.Zero(comparer.Compare((Double)77,(Double)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Double) 99, (Double) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Double) 99, (Double) 7 , 99 , 7);
			// Tolerance Type = Decimal Parameter type == Single
			Assert.Zero(comparer.Compare((Single)8,(Single)1));
			Assert.Zero(comparer.Compare((Single)111,(Single)108));
			Assert.Zero(comparer.Compare((Single)77,(Single)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Single) 99, (Single) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Single) 99, (Single) 7 , 99 , 7);
			// Tolerance Type = Decimal Parameter type == Decimal
			Assert.Zero(comparer.Compare((Decimal)8,(Decimal)1));
			Assert.Zero(comparer.Compare((Decimal)111,(Decimal)108));
			Assert.Zero(comparer.Compare((Decimal)77,(Decimal)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Decimal) 99, (Decimal) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Decimal) 99, (Decimal) 7 , 99 , 7);
        }

		// Decimal
		[Test]
		public void TypeDecimal_MiscTypesToCompare()
		{
			// Note: the CompareNumbers.Toleranced<Decimal> constructor will direct call to non-generic implementation
			// because the generic type argument matches the tolerance type.  More efficient implementation
			Decimal tolerance = (Decimal)10;
		    var comparer = CompareNumbers.Toleranced<object>(tolerance, new Func<object, Decimal> ((a)=> (Decimal)(0-visynConvert.ToDecimal(a))));

			// Now try some different types...
			// Tolerance Type = Decimal Parameter type == Int32
			Assert.Zero(comparer.Compare((Int32)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(Int32)108));
			Assert.Zero(comparer.Compare((Int32)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Int32) 99, (Int32) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = Decimal Parameter type == Int64
			Assert.Zero(comparer.Compare((Int64)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(Int64)108));
			Assert.Zero(comparer.Compare((Int64)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Int64) 99, (Int64) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = Decimal Parameter type == Int16
			Assert.Zero(comparer.Compare((Int16)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(Int16)108));
			Assert.Zero(comparer.Compare((Int16)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Int16) 99, (Int16) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = Decimal Parameter type == Char
			Assert.Zero(comparer.Compare((Char)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(Char)108));
			Assert.Zero(comparer.Compare((Char)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Char) 99, (Char) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = Decimal Parameter type == UInt32
			Assert.Zero(comparer.Compare((UInt32)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(UInt32)108));
			Assert.Zero(comparer.Compare((UInt32)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (UInt32) 99, (UInt32) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = Decimal Parameter type == UInt64
			Assert.Zero(comparer.Compare((UInt64)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(UInt64)108));
			Assert.Zero(comparer.Compare((UInt64)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (UInt64) 99, (UInt64) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = Decimal Parameter type == UInt16
			Assert.Zero(comparer.Compare((UInt16)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(UInt16)108));
			Assert.Zero(comparer.Compare((UInt16)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (UInt16) 99, (UInt16) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = Decimal Parameter type == Byte
			Assert.Zero(comparer.Compare((Byte)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(Byte)108));
			Assert.Zero(comparer.Compare((Byte)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Byte) 99, (Byte) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = Decimal Parameter type == Double
			Assert.Zero(comparer.Compare((Double)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(Double)108));
			Assert.Zero(comparer.Compare((Double)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Double) 99, (Double) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = Decimal Parameter type == Single
			Assert.Zero(comparer.Compare((Single)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(Single)108));
			Assert.Zero(comparer.Compare((Single)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Single) 99, (Single) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
			// Tolerance Type = Decimal Parameter type == Decimal
			Assert.Zero(comparer.Compare((Decimal)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(Decimal)108));
			Assert.Zero(comparer.Compare((Decimal)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (Decimal) 99, (Decimal) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
        }
#endregion

				
#region Int32	// Int32 - Signed number tests (comparing non-positive values)
		[Test]
		public void SignedTypeInt32()
		{
			Int32 tolerance = (Int32)10;
		    var comparer = CompareNumbers.Toleranced<Int32>(tolerance, new Func<Int32, Int32> ((j)=> (Int32)(0-j)));

			Int32 a = -107;
			Int32 b = -100;

			Assert.Zero(comparer.Compare(a,b));
			Assert.Zero(comparer.Compare(b,a));

			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (Int32) (-99), (Int32) ( -7));
			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (Int32) ( -7), (Int32) (-99));
			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (Int32) (-99), (Int32) (  7));
			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (Int32) ( -7), (Int32) ( 99));
        }
#endregion
		
#region Int64	// Int64 - Signed number tests (comparing non-positive values)
		[Test]
		public void SignedTypeInt64()
		{
			Int64 tolerance = (Int64)10;
		    var comparer = CompareNumbers.Toleranced<Int64>(tolerance, new Func<Int64, Int64> ((j)=> (Int64)(0-j)));

			Int64 a = -107;
			Int64 b = -100;

			Assert.Zero(comparer.Compare(a,b));
			Assert.Zero(comparer.Compare(b,a));

			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (Int64) (-99), (Int64) ( -7));
			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (Int64) ( -7), (Int64) (-99));
			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (Int64) (-99), (Int64) (  7));
			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (Int64) ( -7), (Int64) ( 99));
        }
#endregion
		
#region Int16	// Int16 - Signed number tests (comparing non-positive values)
		[Test]
		public void SignedTypeInt16()
		{
			Int16 tolerance = (Int16)10;
		    var comparer = CompareNumbers.Toleranced<Int16>(tolerance, new Func<Int16, Int16> ((j)=> (Int16)(0-j)));

			Int16 a = -107;
			Int16 b = -100;

			Assert.Zero(comparer.Compare(a,b));
			Assert.Zero(comparer.Compare(b,a));

			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (Int16) (-99), (Int16) ( -7));
			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (Int16) ( -7), (Int16) (-99));
			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (Int16) (-99), (Int16) (  7));
			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (Int16) ( -7), (Int16) ( 99));
        }
#endregion
				
#region Double	// Double - Signed number tests (comparing non-positive values)
		[Test]
		public void SignedTypeDouble()
		{
			Double tolerance = (Double)10;
		    var comparer = CompareNumbers.Toleranced<Double>(tolerance, new Func<Double, Double> ((j)=> (Double)(0-j)));

			Double a = -107;
			Double b = -100;

			Assert.Zero(comparer.Compare(a,b));
			Assert.Zero(comparer.Compare(b,a));

			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (Double) (-99), (Double) ( -7));
			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (Double) ( -7), (Double) (-99));
			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (Double) (-99), (Double) (  7));
			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (Double) ( -7), (Double) ( 99));
        }
#endregion
		
#region Single	// Single - Signed number tests (comparing non-positive values)
		[Test]
		public void SignedTypeSingle()
		{
			Single tolerance = (Single)10;
		    var comparer = CompareNumbers.Toleranced<Single>(tolerance, new Func<Single, Single> ((j)=> (Single)(0-j)));

			Single a = -107;
			Single b = -100;

			Assert.Zero(comparer.Compare(a,b));
			Assert.Zero(comparer.Compare(b,a));

			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (Single) (-99), (Single) ( -7));
			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (Single) ( -7), (Single) (-99));
			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (Single) (-99), (Single) (  7));
			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (Single) ( -7), (Single) ( 99));
        }
#endregion
		
#region Decimal	// Decimal - Signed number tests (comparing non-positive values)
		[Test]
		public void SignedTypeDecimal()
		{
			Decimal tolerance = (Decimal)10;
		    var comparer = CompareNumbers.Toleranced<Decimal>(tolerance, new Func<Decimal, Decimal> ((j)=> (Decimal)(0-j)));

			Decimal a = -107;
			Decimal b = -100;

			Assert.Zero(comparer.Compare(a,b));
			Assert.Zero(comparer.Compare(b,a));

			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (Decimal) (-99), (Decimal) ( -7));
			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (Decimal) ( -7), (Decimal) (-99));
			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (Decimal) (-99), (Decimal) (  7));
			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (Decimal) ( -7), (Decimal) ( 99));
        }
#endregion
	}
}