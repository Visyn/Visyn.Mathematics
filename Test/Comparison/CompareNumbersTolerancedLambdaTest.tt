<#@ include file="../../Lib/T4/NumericTypes.ttinclude" #>
using NUnit.Framework;
using Visyn.Mathematics.Comparison;

namespace Visyn.Mathematics.Test.Comparison 
{ 
	[TestFixture]
	public class CompareNumbersTolerancedLambdaTest
	{
		static NumberConverter visynConvert = NumberConverter.Instance;
<# foreach (var type in numbericTypes) { #>

#region <#= type.Name #>	// <#= type.Name #> - unsinged tests
		[Test]
		public void Type<#= type.Name #>_Generic()
		{
			// Note: the CompareNumbers.Toleranced<<#= type.Name #>> constructor will direct call to non-generic implementation
			// because the generic type argument matches the tolerance type.  This is a more efficient implementation
			<#= type.Name #> tolerance = (<#= type.Name #>)10;
			//Toleranced<T>(Int32 tolerance, Func<T,Int32> converter)
		    var comparer = CompareNumbers.Toleranced<<#= type.Name #>>(tolerance, new Func<<#= type.Name #>, <#= type.Name #>> ((a)=> (<#= type.Name#>)(0-a)));

			Assert.Zero(comparer.Compare((<#= type.Name #>)7,(<#= type.Name #>)2));
			Assert.Zero(comparer.Compare((<#= type.Name #>)107,(<#= type.Name #>)100));


			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (<#= type.Name #>) 99, (<#= type.Name #>) 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (<#= type.Name #>) 7, (<#= type.Name #>) 99);
			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (<#= type.Name #>) 12, (<#= type.Name #>) 12);
        }

		[Test]
		public void Type<#= type.Name #>_NotGeneric()
		{
			<#= type.Name #> tolerance = (<#= type.Name #>)10;
		    var comparer = CompareNumbers.Toleranced(tolerance, new Func<<#= type.Name #>, <#= type.Name #>> ((a)=> (<#= type.Name#>)(0-a)));

			Assert.Zero(comparer.Compare((<#= type.Name #>)7,(<#= type.Name #>)2));
			Assert.Zero(comparer.Compare((<#= type.Name #>)107,(<#= type.Name #>)100));


			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (<#= type.Name #>) 99, (<#= type.Name #>) 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (<#= type.Name #>) 7, (<#= type.Name #>) 99);
			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (<#= type.Name #>) 12, (<#= type.Name #>) 12);
        }

		[Test]
		public void Type<#= type.Name #>_Limits()
		{
			<#= type.Name #> tolerance = (<#= type.Name #>)10;
		    var comparer = CompareNumbers.Toleranced<<#= type.Name #>>(tolerance, new Func<<#= type.Name #>, <#= type.Name #>> ((a)=> (<#= type.Name#>)(0-a)));

			Assert.Zero(comparer.Compare((<#= type.Name #>)1,(<#= type.Name #>)11));
			Assert.Zero(comparer.Compare((<#= type.Name #>)11,(<#= type.Name #>)1));
			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (<#= type.Name #>) 1, (<#= type.Name #>) 12);
			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (<#= type.Name #>) 12, (<#= type.Name #>) 1);
        }

		// <#= type.Name #> tests involving change in type (i.e. compare int and double as a double w/ double tolerance)
		[Test]
		public void Type<#= type.Name #>_GenericMixedTypeNumbers()
		{
			// Note: the CompareNumbers.Toleranced<<#= type.Name #>> constructor will direct call to non-generic implementation
			// because the generic type argument matches the tolerance type.  More efficient implementation
			<#= type.Name #> tolerance = (<#= type.Name #>)10;
		    var comparer = CompareNumbers.Toleranced<object>(tolerance, new Func<object, <#= type.Name #>> ((a)=> (<#= type.Name#>)(0-visynConvert.To<#= type.Name#>(a))));

			// First try numbers with same type as tolerance...
			Assert.Zero(comparer.Compare((<#= type.Name #>)7,(<#= type.Name #>)2));
			Assert.Zero(comparer.Compare((<#= type.Name #>)107,(<#= type.Name #>)100));
			// Now try some different types...
<# foreach (var paramType in numbericTypes) { #>
			// Tolerance Type = <#= type.Name #> Parameter type == <#= paramType.Name #>
			Assert.Zero(comparer.Compare((<#= paramType.Name #>)8,(<#= paramType.Name #>)1));
			Assert.Zero(comparer.Compare((<#= paramType.Name #>)111,(<#= paramType.Name #>)108));
			Assert.Zero(comparer.Compare((<#= paramType.Name #>)77,(<#= paramType.Name #>)82));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (<#= paramType.Name #>) 99, (<#= paramType.Name #>) 7 , 99 , 7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (<#= paramType.Name #>) 99, (<#= paramType.Name #>) 7 , 99 , 7);
<#} #>
        }

		// <#= type.Name #>
		[Test]
		public void Type<#= type.Name #>_MiscTypesToCompare()
		{
			// Note: the CompareNumbers.Toleranced<<#= type.Name #>> constructor will direct call to non-generic implementation
			// because the generic type argument matches the tolerance type.  More efficient implementation
			<#= type.Name #> tolerance = (<#= type.Name #>)10;
		    var comparer = CompareNumbers.Toleranced<object>(tolerance, new Func<object, <#= type.Name #>> ((a)=> (<#= type.Name#>)(0-visynConvert.To<#= type.Name#>(a))));

			// Now try some different types...
<# foreach (var paramType in numbericTypes) { #>
			// Tolerance Type = <#= type.Name #> Parameter type == <#= paramType.Name #>
			Assert.Zero(comparer.Compare((<#= paramType.Name #>)8,(double)1));
			Assert.Zero(comparer.Compare((int)111,(<#= paramType.Name #>)108));
			Assert.Zero(comparer.Compare((<#= paramType.Name #>)77,"82"));
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (<#= paramType.Name #>) 99, (<#= paramType.Name #>) 7,99,7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer,    "99", (double) 7, 99,  7);
			CompareNumbersSupport.MatchesInvertedDefaultComparer_TypeT(comparer, (int) 7,       "99",  7, 99);
<#} #>
        }
#endregion
<#} #>

		<# foreach (var type in signedTypes) { #>
		<#if(type == typeof(char)) continue;#>

#region <#= type.Name #>	// <#= type.Name #> - Signed number tests (comparing non-positive values)
		[Test]
		public void SignedType<#= type.Name #>()
		{
			<#= type.Name #> tolerance = (<#= type.Name #>)10;
		    var comparer = CompareNumbers.Toleranced<<#= type.Name #>>(tolerance, new Func<<#= type.Name #>, <#= type.Name #>> ((j)=> (<#= type.Name#>)(0-j)));

			<#= type.Name #> a = -107;
			<#= type.Name #> b = -100;

			Assert.Zero(comparer.Compare(a,b));
			Assert.Zero(comparer.Compare(b,a));

			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (<#= type.Name #>) (-99), (<#= type.Name #>) ( -7));
			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (<#= type.Name #>) ( -7), (<#= type.Name #>) (-99));
			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (<#= type.Name #>) (-99), (<#= type.Name #>) (  7));
			CompareNumbersSupport.MatchesInvertedDefaultComparer(comparer, (<#= type.Name #>) ( -7), (<#= type.Name #>) ( 99));
        }
#endregion
<#} #>
	}
}