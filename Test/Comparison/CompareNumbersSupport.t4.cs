#region Copyright (c) 2015-2017 Visyn
//The MIT License(MIT)
//
//Copyright(c) 2015-2017 Visyn
//
//Permission is hereby granted, free of charge, to any person obtaining a copy
//of this software and associated documentation files (the "Software"), to deal
//in the Software without restriction, including without limitation the rights
//to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//copies of the Software, and to permit persons to whom the Software is
//furnished to do so, subject to the following conditions:

//The above copyright notice and this permission notice shall be included in all
//copies or substantial portions of the Software.

//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//SOFTWARE.
#endregion
#region Autogenerated T4 Text Template
// Autogenerated from T4 Text Template :	CompareNumbersSupport.tt
//											file:\C:\git\proto.temp\Visyn.Mathematics\Test\Comparison\CompareNumbersSupport.tt
// Autogeneration date/time:				8/13/2017 9:40:33 PM
#endregion
using System;
using Visyn.Mathematics;

using System.Collections.Generic;
using NUnit.Framework;
using Visyn.Public.Comparison;
using Visyn.Mathematics.Comparison;

namespace Visyn.Mathematics.Test.Comparison 
{
	public static class CompareNumbersSupport
	{
		    private static NumberConverter visyn = NumberConverter.Instance;

#region Int32 // Int32
		public static void MatchesDefaultComparer(CustomComparer<Int32> custom, Int32 a,Int32 b)
        {
            var defaultComparer = Comparer<Int32>.Default;
            var defaultResult = defaultComparer.Compare(a, b);
			var defaultOpposite = defaultComparer.Compare(b, a);
            // Verify Comparer.Default results...
			Assert.AreEqual(Comparer<int>.Default.Compare(Convert.ToInt32(a), Convert.ToInt32(b)), defaultResult);
            Assert.AreEqual(Comparer<int>.Default.Compare(Convert.ToInt32(b), Convert.ToInt32(a)), defaultOpposite);
            Assert.AreEqual(Comparer<double>.Default.Compare(Convert.ToDouble(a), Convert.ToDouble(b)), defaultResult);
            Assert.AreEqual(Comparer<double>.Default.Compare(Convert.ToDouble(b), Convert.ToDouble(a)), defaultOpposite);
			// Verify Visyn.NumberConverter .Default results... (note this works with char<->double)
			Assert.AreEqual(Comparer<int>.Default.Compare(visyn.ToInt32(a), visyn.ToInt32(b)), defaultResult);
            Assert.AreEqual(Comparer<int>.Default.Compare(visyn.ToInt32(b), visyn.ToInt32(a)), defaultOpposite);
			Assert.AreEqual(Comparer<double>.Default.Compare(visyn.ToDouble(a), visyn.ToDouble(b)), defaultResult);
            Assert.AreEqual(Comparer<double>.Default.Compare(visyn.ToDouble(b), visyn.ToDouble(a)), defaultOpposite);

            Assert.Zero(defaultResult + defaultOpposite);
			// Verify CustomComparer results...
            Assert.Zero(defaultResult + defaultOpposite);
			Assert.AreEqual(defaultOpposite, custom.Compare(b,a));
            Assert.AreEqual(defaultResult, custom.Compare(a,b));
        }

		public static void MatchesDefaultComparer_TypeT<T>(CustomComparer<T> custom, object oA, object oB, Int32 a,Int32 b)
        {
			Assert.AreEqual(Convert.ToInt32(oA),Convert.ToInt32(a),"Unit test parameter mis-match oA does not equal a");
			Assert.AreEqual(Convert.ToInt32(oB),Convert.ToInt32(b),"Unit test parameter mis-match oB does not equal b");
            var defaultComparer = Comparer<Int32>.Default;
            var defaultResult = defaultComparer.Compare(a, b);
			var defaultOpposite = defaultComparer.Compare(b, a);
            // Verify Comparer.Default results...
			Assert.AreEqual(Comparer<int>.Default.Compare(Convert.ToInt32(a), Convert.ToInt32(b)), defaultResult);
            Assert.AreEqual(Comparer<int>.Default.Compare(Convert.ToInt32(b), Convert.ToInt32(a)), defaultOpposite);
            Assert.AreEqual(Comparer<double>.Default.Compare(Convert.ToDouble(a), Convert.ToDouble(b)), defaultResult);
            Assert.AreEqual(Comparer<double>.Default.Compare(Convert.ToDouble(b), Convert.ToDouble(a)), defaultOpposite);
			// Verify Visyn.NumberConverter .Default results... (note this works with char<->double)
			Assert.AreEqual(Comparer<int>.Default.Compare(visyn.ToInt32(a), visyn.ToInt32(b)), defaultResult);
            Assert.AreEqual(Comparer<int>.Default.Compare(visyn.ToInt32(b), visyn.ToInt32(a)), defaultOpposite);
			Assert.AreEqual(Comparer<double>.Default.Compare(visyn.ToDouble(a), visyn.ToDouble(b)), defaultResult);
            Assert.AreEqual(Comparer<double>.Default.Compare(visyn.ToDouble(b), visyn.ToDouble(a)), defaultOpposite);

            Assert.Zero(defaultResult + defaultOpposite);
			// Verify CustomComparer results...
            Assert.AreEqual(defaultResult,   custom.Compare(oA,oB));
            Assert.AreEqual(defaultOpposite, custom.Compare(oB,oA));
        }

		// Int32 - Default Comparer (inverted)
		public static void MatchesInvertedDefaultComparer(CustomComparer<Int32> custom, Int32 a,Int32 b)
        {
            var defaultComparer = Comparer<Int32>.Default;
            var defaultResult = defaultComparer.Compare(a, b);
			var defaultOpposite = defaultComparer.Compare(b, a);
            // Verify Comparer.Default results...
			Assert.AreEqual(Comparer<int>.Default.Compare(Convert.ToInt32(a), Convert.ToInt32(b)), defaultResult);
            Assert.AreEqual(Comparer<int>.Default.Compare(Convert.ToInt32(b), Convert.ToInt32(a)), defaultOpposite);
            Assert.AreEqual(Comparer<double>.Default.Compare(Convert.ToDouble(a), Convert.ToDouble(b)), defaultResult);
            Assert.AreEqual(Comparer<double>.Default.Compare(Convert.ToDouble(b), Convert.ToDouble(a)), defaultOpposite);
			// Verify Visyn.NumberConverter .Default results... (note this works with char<->double)
			Assert.AreEqual(Comparer<int>.Default.Compare(visyn.ToInt32(a), visyn.ToInt32(b)), defaultResult);
            Assert.AreEqual(Comparer<int>.Default.Compare(visyn.ToInt32(b), visyn.ToInt32(a)), defaultOpposite);
			Assert.AreEqual(Comparer<double>.Default.Compare(visyn.ToDouble(a), visyn.ToDouble(b)), defaultResult);
            Assert.AreEqual(Comparer<double>.Default.Compare(visyn.ToDouble(b), visyn.ToDouble(a)), defaultOpposite);

            Assert.Zero(defaultResult + defaultOpposite);
			// Verify CustomComparer results...
            Assert.Zero(defaultResult + defaultOpposite);
			Assert.AreEqual(-1*defaultOpposite, custom.Compare(b,a));
            Assert.AreEqual(-1*defaultResult, custom.Compare(a,b));
        }

		public static void MatchesInvertedDefaultComparer_TypeT<T>(CustomComparer<T> custom, object oA, object oB, Int32 a,Int32 b)
        {
			Assert.AreEqual(Convert.ToInt32(oA),Convert.ToInt32(a),"Unit test parameter mis-match oA does not equal a");
			Assert.AreEqual(Convert.ToInt32(oB),Convert.ToInt32(b),"Unit test parameter mis-match oB does not equal b");
            var defaultComparer = Comparer<Int32>.Default;
            var defaultResult = defaultComparer.Compare(a, b);
			var defaultOpposite = defaultComparer.Compare(b, a);
            // Verify Comparer.Default results...
			Assert.AreEqual(Comparer<int>.Default.Compare(Convert.ToInt32(a), Convert.ToInt32(b)), defaultResult);
            Assert.AreEqual(Comparer<int>.Default.Compare(Convert.ToInt32(b), Convert.ToInt32(a)), defaultOpposite);
            Assert.AreEqual(Comparer<double>.Default.Compare(Convert.ToDouble(a), Convert.ToDouble(b)), defaultResult);
            Assert.AreEqual(Comparer<double>.Default.Compare(Convert.ToDouble(b), Convert.ToDouble(a)), defaultOpposite);
			// Verify Visyn.NumberConverter .Default results... (note this works with char<->double)
			Assert.AreEqual(Comparer<int>.Default.Compare(visyn.ToInt32(a), visyn.ToInt32(b)), defaultResult);
            Assert.AreEqual(Comparer<int>.Default.Compare(visyn.ToInt32(b), visyn.ToInt32(a)), defaultOpposite);
			Assert.AreEqual(Comparer<double>.Default.Compare(visyn.ToDouble(a), visyn.ToDouble(b)), defaultResult);
            Assert.AreEqual(Comparer<double>.Default.Compare(visyn.ToDouble(b), visyn.ToDouble(a)), defaultOpposite);

            Assert.Zero(defaultResult + defaultOpposite);
			// Verify CustomComparer results...
            Assert.AreEqual(-1*defaultResult,   custom.Compare(oA,oB));
            Assert.AreEqual(-1*defaultOpposite, custom.Compare(oB,oA));
        }
#endregion

#region Int64 // Int64
		public static void MatchesDefaultComparer(CustomComparer<Int64> custom, Int64 a,Int64 b)
        {
            var defaultComparer = Comparer<Int64>.Default;
            var defaultResult = defaultComparer.Compare(a, b);
			var defaultOpposite = defaultComparer.Compare(b, a);
            // Verify Comparer.Default results...
			Assert.AreEqual(Comparer<int>.Default.Compare(Convert.ToInt32(a), Convert.ToInt32(b)), defaultResult);
            Assert.AreEqual(Comparer<int>.Default.Compare(Convert.ToInt32(b), Convert.ToInt32(a)), defaultOpposite);
            Assert.AreEqual(Comparer<double>.Default.Compare(Convert.ToDouble(a), Convert.ToDouble(b)), defaultResult);
            Assert.AreEqual(Comparer<double>.Default.Compare(Convert.ToDouble(b), Convert.ToDouble(a)), defaultOpposite);
			// Verify Visyn.NumberConverter .Default results... (note this works with char<->double)
			Assert.AreEqual(Comparer<int>.Default.Compare(visyn.ToInt32(a), visyn.ToInt32(b)), defaultResult);
            Assert.AreEqual(Comparer<int>.Default.Compare(visyn.ToInt32(b), visyn.ToInt32(a)), defaultOpposite);
			Assert.AreEqual(Comparer<double>.Default.Compare(visyn.ToDouble(a), visyn.ToDouble(b)), defaultResult);
            Assert.AreEqual(Comparer<double>.Default.Compare(visyn.ToDouble(b), visyn.ToDouble(a)), defaultOpposite);

            Assert.Zero(defaultResult + defaultOpposite);
			// Verify CustomComparer results...
            Assert.Zero(defaultResult + defaultOpposite);
			Assert.AreEqual(defaultOpposite, custom.Compare(b,a));
            Assert.AreEqual(defaultResult, custom.Compare(a,b));
        }

		public static void MatchesDefaultComparer_TypeT<T>(CustomComparer<T> custom, object oA, object oB, Int64 a,Int64 b)
        {
			Assert.AreEqual(Convert.ToInt32(oA),Convert.ToInt32(a),"Unit test parameter mis-match oA does not equal a");
			Assert.AreEqual(Convert.ToInt32(oB),Convert.ToInt32(b),"Unit test parameter mis-match oB does not equal b");
            var defaultComparer = Comparer<Int64>.Default;
            var defaultResult = defaultComparer.Compare(a, b);
			var defaultOpposite = defaultComparer.Compare(b, a);
            // Verify Comparer.Default results...
			Assert.AreEqual(Comparer<int>.Default.Compare(Convert.ToInt32(a), Convert.ToInt32(b)), defaultResult);
            Assert.AreEqual(Comparer<int>.Default.Compare(Convert.ToInt32(b), Convert.ToInt32(a)), defaultOpposite);
            Assert.AreEqual(Comparer<double>.Default.Compare(Convert.ToDouble(a), Convert.ToDouble(b)), defaultResult);
            Assert.AreEqual(Comparer<double>.Default.Compare(Convert.ToDouble(b), Convert.ToDouble(a)), defaultOpposite);
			// Verify Visyn.NumberConverter .Default results... (note this works with char<->double)
			Assert.AreEqual(Comparer<int>.Default.Compare(visyn.ToInt32(a), visyn.ToInt32(b)), defaultResult);
            Assert.AreEqual(Comparer<int>.Default.Compare(visyn.ToInt32(b), visyn.ToInt32(a)), defaultOpposite);
			Assert.AreEqual(Comparer<double>.Default.Compare(visyn.ToDouble(a), visyn.ToDouble(b)), defaultResult);
            Assert.AreEqual(Comparer<double>.Default.Compare(visyn.ToDouble(b), visyn.ToDouble(a)), defaultOpposite);

            Assert.Zero(defaultResult + defaultOpposite);
			// Verify CustomComparer results...
            Assert.AreEqual(defaultResult,   custom.Compare(oA,oB));
            Assert.AreEqual(defaultOpposite, custom.Compare(oB,oA));
        }

		// Int64 - Default Comparer (inverted)
		public static void MatchesInvertedDefaultComparer(CustomComparer<Int64> custom, Int64 a,Int64 b)
        {
            var defaultComparer = Comparer<Int64>.Default;
            var defaultResult = defaultComparer.Compare(a, b);
			var defaultOpposite = defaultComparer.Compare(b, a);
            // Verify Comparer.Default results...
			Assert.AreEqual(Comparer<int>.Default.Compare(Convert.ToInt32(a), Convert.ToInt32(b)), defaultResult);
            Assert.AreEqual(Comparer<int>.Default.Compare(Convert.ToInt32(b), Convert.ToInt32(a)), defaultOpposite);
            Assert.AreEqual(Comparer<double>.Default.Compare(Convert.ToDouble(a), Convert.ToDouble(b)), defaultResult);
            Assert.AreEqual(Comparer<double>.Default.Compare(Convert.ToDouble(b), Convert.ToDouble(a)), defaultOpposite);
			// Verify Visyn.NumberConverter .Default results... (note this works with char<->double)
			Assert.AreEqual(Comparer<int>.Default.Compare(visyn.ToInt32(a), visyn.ToInt32(b)), defaultResult);
            Assert.AreEqual(Comparer<int>.Default.Compare(visyn.ToInt32(b), visyn.ToInt32(a)), defaultOpposite);
			Assert.AreEqual(Comparer<double>.Default.Compare(visyn.ToDouble(a), visyn.ToDouble(b)), defaultResult);
            Assert.AreEqual(Comparer<double>.Default.Compare(visyn.ToDouble(b), visyn.ToDouble(a)), defaultOpposite);

            Assert.Zero(defaultResult + defaultOpposite);
			// Verify CustomComparer results...
            Assert.Zero(defaultResult + defaultOpposite);
			Assert.AreEqual(-1*defaultOpposite, custom.Compare(b,a));
            Assert.AreEqual(-1*defaultResult, custom.Compare(a,b));
        }

		public static void MatchesInvertedDefaultComparer_TypeT<T>(CustomComparer<T> custom, object oA, object oB, Int64 a,Int64 b)
        {
			Assert.AreEqual(Convert.ToInt32(oA),Convert.ToInt32(a),"Unit test parameter mis-match oA does not equal a");
			Assert.AreEqual(Convert.ToInt32(oB),Convert.ToInt32(b),"Unit test parameter mis-match oB does not equal b");
            var defaultComparer = Comparer<Int64>.Default;
            var defaultResult = defaultComparer.Compare(a, b);
			var defaultOpposite = defaultComparer.Compare(b, a);
            // Verify Comparer.Default results...
			Assert.AreEqual(Comparer<int>.Default.Compare(Convert.ToInt32(a), Convert.ToInt32(b)), defaultResult);
            Assert.AreEqual(Comparer<int>.Default.Compare(Convert.ToInt32(b), Convert.ToInt32(a)), defaultOpposite);
            Assert.AreEqual(Comparer<double>.Default.Compare(Convert.ToDouble(a), Convert.ToDouble(b)), defaultResult);
            Assert.AreEqual(Comparer<double>.Default.Compare(Convert.ToDouble(b), Convert.ToDouble(a)), defaultOpposite);
			// Verify Visyn.NumberConverter .Default results... (note this works with char<->double)
			Assert.AreEqual(Comparer<int>.Default.Compare(visyn.ToInt32(a), visyn.ToInt32(b)), defaultResult);
            Assert.AreEqual(Comparer<int>.Default.Compare(visyn.ToInt32(b), visyn.ToInt32(a)), defaultOpposite);
			Assert.AreEqual(Comparer<double>.Default.Compare(visyn.ToDouble(a), visyn.ToDouble(b)), defaultResult);
            Assert.AreEqual(Comparer<double>.Default.Compare(visyn.ToDouble(b), visyn.ToDouble(a)), defaultOpposite);

            Assert.Zero(defaultResult + defaultOpposite);
			// Verify CustomComparer results...
            Assert.AreEqual(-1*defaultResult,   custom.Compare(oA,oB));
            Assert.AreEqual(-1*defaultOpposite, custom.Compare(oB,oA));
        }
#endregion

#region Int16 // Int16
		public static void MatchesDefaultComparer(CustomComparer<Int16> custom, Int16 a,Int16 b)
        {
            var defaultComparer = Comparer<Int16>.Default;
            var defaultResult = defaultComparer.Compare(a, b);
			var defaultOpposite = defaultComparer.Compare(b, a);
			defaultResult = defaultResult == 0 ? 0 : (defaultResult > 0 ? 1 : -1);
			defaultOpposite = defaultOpposite == 0 ? 0 : (defaultOpposite > 0 ? 1 : -1);
            // Verify Comparer.Default results...
			Assert.AreEqual(Comparer<int>.Default.Compare(Convert.ToInt32(a), Convert.ToInt32(b)), defaultResult);
            Assert.AreEqual(Comparer<int>.Default.Compare(Convert.ToInt32(b), Convert.ToInt32(a)), defaultOpposite);
            Assert.AreEqual(Comparer<double>.Default.Compare(Convert.ToDouble(a), Convert.ToDouble(b)), defaultResult);
            Assert.AreEqual(Comparer<double>.Default.Compare(Convert.ToDouble(b), Convert.ToDouble(a)), defaultOpposite);
			// Verify Visyn.NumberConverter .Default results... (note this works with char<->double)
			Assert.AreEqual(Comparer<int>.Default.Compare(visyn.ToInt32(a), visyn.ToInt32(b)), defaultResult);
            Assert.AreEqual(Comparer<int>.Default.Compare(visyn.ToInt32(b), visyn.ToInt32(a)), defaultOpposite);
			Assert.AreEqual(Comparer<double>.Default.Compare(visyn.ToDouble(a), visyn.ToDouble(b)), defaultResult);
            Assert.AreEqual(Comparer<double>.Default.Compare(visyn.ToDouble(b), visyn.ToDouble(a)), defaultOpposite);

            Assert.Zero(defaultResult + defaultOpposite);
			// Verify CustomComparer results...
            Assert.Zero(defaultResult + defaultOpposite);
			Assert.AreEqual(defaultOpposite, custom.Compare(b,a));
            Assert.AreEqual(defaultResult, custom.Compare(a,b));
        }

		public static void MatchesDefaultComparer_TypeT<T>(CustomComparer<T> custom, object oA, object oB, Int16 a,Int16 b)
        {
			Assert.AreEqual(Convert.ToInt32(oA),Convert.ToInt32(a),"Unit test parameter mis-match oA does not equal a");
			Assert.AreEqual(Convert.ToInt32(oB),Convert.ToInt32(b),"Unit test parameter mis-match oB does not equal b");
            var defaultComparer = Comparer<Int16>.Default;
            var defaultResult = defaultComparer.Compare(a, b);
			var defaultOpposite = defaultComparer.Compare(b, a);
			defaultResult = defaultResult == 0 ? 0 : (defaultResult > 0 ? 1 : -1);
			defaultOpposite = defaultOpposite == 0 ? 0 : (defaultOpposite > 0 ? 1 : -1);
            // Verify Comparer.Default results...
			Assert.AreEqual(Comparer<int>.Default.Compare(Convert.ToInt32(a), Convert.ToInt32(b)), defaultResult);
            Assert.AreEqual(Comparer<int>.Default.Compare(Convert.ToInt32(b), Convert.ToInt32(a)), defaultOpposite);
            Assert.AreEqual(Comparer<double>.Default.Compare(Convert.ToDouble(a), Convert.ToDouble(b)), defaultResult);
            Assert.AreEqual(Comparer<double>.Default.Compare(Convert.ToDouble(b), Convert.ToDouble(a)), defaultOpposite);
			// Verify Visyn.NumberConverter .Default results... (note this works with char<->double)
			Assert.AreEqual(Comparer<int>.Default.Compare(visyn.ToInt32(a), visyn.ToInt32(b)), defaultResult);
            Assert.AreEqual(Comparer<int>.Default.Compare(visyn.ToInt32(b), visyn.ToInt32(a)), defaultOpposite);
			Assert.AreEqual(Comparer<double>.Default.Compare(visyn.ToDouble(a), visyn.ToDouble(b)), defaultResult);
            Assert.AreEqual(Comparer<double>.Default.Compare(visyn.ToDouble(b), visyn.ToDouble(a)), defaultOpposite);

            Assert.Zero(defaultResult + defaultOpposite);
			// Verify CustomComparer results...
            Assert.AreEqual(defaultResult,   custom.Compare(oA,oB));
            Assert.AreEqual(defaultOpposite, custom.Compare(oB,oA));
        }

		// Int16 - Default Comparer (inverted)
		public static void MatchesInvertedDefaultComparer(CustomComparer<Int16> custom, Int16 a,Int16 b)
        {
            var defaultComparer = Comparer<Int16>.Default;
            var defaultResult = defaultComparer.Compare(a, b);
			var defaultOpposite = defaultComparer.Compare(b, a);
			defaultResult = defaultResult == 0 ? 0 : (defaultResult > 0 ? 1 : -1);
			defaultOpposite = defaultOpposite == 0 ? 0 : (defaultOpposite > 0 ? 1 : -1);
            // Verify Comparer.Default results...
			Assert.AreEqual(Comparer<int>.Default.Compare(Convert.ToInt32(a), Convert.ToInt32(b)), defaultResult);
            Assert.AreEqual(Comparer<int>.Default.Compare(Convert.ToInt32(b), Convert.ToInt32(a)), defaultOpposite);
            Assert.AreEqual(Comparer<double>.Default.Compare(Convert.ToDouble(a), Convert.ToDouble(b)), defaultResult);
            Assert.AreEqual(Comparer<double>.Default.Compare(Convert.ToDouble(b), Convert.ToDouble(a)), defaultOpposite);
			// Verify Visyn.NumberConverter .Default results... (note this works with char<->double)
			Assert.AreEqual(Comparer<int>.Default.Compare(visyn.ToInt32(a), visyn.ToInt32(b)), defaultResult);
            Assert.AreEqual(Comparer<int>.Default.Compare(visyn.ToInt32(b), visyn.ToInt32(a)), defaultOpposite);
			Assert.AreEqual(Comparer<double>.Default.Compare(visyn.ToDouble(a), visyn.ToDouble(b)), defaultResult);
            Assert.AreEqual(Comparer<double>.Default.Compare(visyn.ToDouble(b), visyn.ToDouble(a)), defaultOpposite);

            Assert.Zero(defaultResult + defaultOpposite);
			// Verify CustomComparer results...
            Assert.Zero(defaultResult + defaultOpposite);
			Assert.AreEqual(-1*defaultOpposite, custom.Compare(b,a));
            Assert.AreEqual(-1*defaultResult, custom.Compare(a,b));
        }

		public static void MatchesInvertedDefaultComparer_TypeT<T>(CustomComparer<T> custom, object oA, object oB, Int16 a,Int16 b)
        {
			Assert.AreEqual(Convert.ToInt32(oA),Convert.ToInt32(a),"Unit test parameter mis-match oA does not equal a");
			Assert.AreEqual(Convert.ToInt32(oB),Convert.ToInt32(b),"Unit test parameter mis-match oB does not equal b");
            var defaultComparer = Comparer<Int16>.Default;
            var defaultResult = defaultComparer.Compare(a, b);
			var defaultOpposite = defaultComparer.Compare(b, a);
			defaultResult = defaultResult == 0 ? 0 : (defaultResult > 0 ? 1 : -1);
			defaultOpposite = defaultOpposite == 0 ? 0 : (defaultOpposite > 0 ? 1 : -1);
            // Verify Comparer.Default results...
			Assert.AreEqual(Comparer<int>.Default.Compare(Convert.ToInt32(a), Convert.ToInt32(b)), defaultResult);
            Assert.AreEqual(Comparer<int>.Default.Compare(Convert.ToInt32(b), Convert.ToInt32(a)), defaultOpposite);
            Assert.AreEqual(Comparer<double>.Default.Compare(Convert.ToDouble(a), Convert.ToDouble(b)), defaultResult);
            Assert.AreEqual(Comparer<double>.Default.Compare(Convert.ToDouble(b), Convert.ToDouble(a)), defaultOpposite);
			// Verify Visyn.NumberConverter .Default results... (note this works with char<->double)
			Assert.AreEqual(Comparer<int>.Default.Compare(visyn.ToInt32(a), visyn.ToInt32(b)), defaultResult);
            Assert.AreEqual(Comparer<int>.Default.Compare(visyn.ToInt32(b), visyn.ToInt32(a)), defaultOpposite);
			Assert.AreEqual(Comparer<double>.Default.Compare(visyn.ToDouble(a), visyn.ToDouble(b)), defaultResult);
            Assert.AreEqual(Comparer<double>.Default.Compare(visyn.ToDouble(b), visyn.ToDouble(a)), defaultOpposite);

            Assert.Zero(defaultResult + defaultOpposite);
			// Verify CustomComparer results...
            Assert.AreEqual(-1*defaultResult,   custom.Compare(oA,oB));
            Assert.AreEqual(-1*defaultOpposite, custom.Compare(oB,oA));
        }
#endregion

#region Char // Char
		public static void MatchesDefaultComparer(CustomComparer<Char> custom, Char a,Char b)
        {
            var defaultComparer = Comparer<Char>.Default;
            var defaultResult = defaultComparer.Compare(a, b);
			var defaultOpposite = defaultComparer.Compare(b, a);
			defaultResult = defaultResult == 0 ? 0 : (defaultResult > 0 ? 1 : -1);
			defaultOpposite = defaultOpposite == 0 ? 0 : (defaultOpposite > 0 ? 1 : -1);
            // Verify Comparer.Default results...
			Assert.AreEqual(Comparer<int>.Default.Compare(Convert.ToInt32(a), Convert.ToInt32(b)), defaultResult);
            Assert.AreEqual(Comparer<int>.Default.Compare(Convert.ToInt32(b), Convert.ToInt32(a)), defaultOpposite);
			// Verify Visyn.NumberConverter .Default results... (note this works with char<->double)
			Assert.AreEqual(Comparer<int>.Default.Compare(visyn.ToInt32(a), visyn.ToInt32(b)), defaultResult);
            Assert.AreEqual(Comparer<int>.Default.Compare(visyn.ToInt32(b), visyn.ToInt32(a)), defaultOpposite);
			Assert.AreEqual(Comparer<double>.Default.Compare(visyn.ToDouble(a), visyn.ToDouble(b)), defaultResult);
            Assert.AreEqual(Comparer<double>.Default.Compare(visyn.ToDouble(b), visyn.ToDouble(a)), defaultOpposite);

            Assert.Zero(defaultResult + defaultOpposite);
			// Verify CustomComparer results...
            Assert.Zero(defaultResult + defaultOpposite);
			Assert.AreEqual(defaultOpposite, custom.Compare(b,a));
            Assert.AreEqual(defaultResult, custom.Compare(a,b));
        }

		public static void MatchesDefaultComparer_TypeT<T>(CustomComparer<T> custom, object oA, object oB, Char a,Char b)
        {
			Assert.AreEqual(Convert.ToInt32(oA),Convert.ToInt32(a),"Unit test parameter mis-match oA does not equal a");
			Assert.AreEqual(Convert.ToInt32(oB),Convert.ToInt32(b),"Unit test parameter mis-match oB does not equal b");
            var defaultComparer = Comparer<Char>.Default;
            var defaultResult = defaultComparer.Compare(a, b);
			var defaultOpposite = defaultComparer.Compare(b, a);
			defaultResult = defaultResult == 0 ? 0 : (defaultResult > 0 ? 1 : -1);
			defaultOpposite = defaultOpposite == 0 ? 0 : (defaultOpposite > 0 ? 1 : -1);
            // Verify Comparer.Default results...
			Assert.AreEqual(Comparer<int>.Default.Compare(Convert.ToInt32(a), Convert.ToInt32(b)), defaultResult);
            Assert.AreEqual(Comparer<int>.Default.Compare(Convert.ToInt32(b), Convert.ToInt32(a)), defaultOpposite);
			// Verify Visyn.NumberConverter .Default results... (note this works with char<->double)
			Assert.AreEqual(Comparer<int>.Default.Compare(visyn.ToInt32(a), visyn.ToInt32(b)), defaultResult);
            Assert.AreEqual(Comparer<int>.Default.Compare(visyn.ToInt32(b), visyn.ToInt32(a)), defaultOpposite);
			Assert.AreEqual(Comparer<double>.Default.Compare(visyn.ToDouble(a), visyn.ToDouble(b)), defaultResult);
            Assert.AreEqual(Comparer<double>.Default.Compare(visyn.ToDouble(b), visyn.ToDouble(a)), defaultOpposite);

            Assert.Zero(defaultResult + defaultOpposite);
			// Verify CustomComparer results...
            Assert.AreEqual(defaultResult,   custom.Compare(oA,oB));
            Assert.AreEqual(defaultOpposite, custom.Compare(oB,oA));
        }

		// Char - Default Comparer (inverted)
		public static void MatchesInvertedDefaultComparer(CustomComparer<Char> custom, Char a,Char b)
        {
            var defaultComparer = Comparer<Char>.Default;
            var defaultResult = defaultComparer.Compare(a, b);
			var defaultOpposite = defaultComparer.Compare(b, a);
			defaultResult = defaultResult == 0 ? 0 : (defaultResult > 0 ? 1 : -1);
			defaultOpposite = defaultOpposite == 0 ? 0 : (defaultOpposite > 0 ? 1 : -1);
            // Verify Comparer.Default results...
			Assert.AreEqual(Comparer<int>.Default.Compare(Convert.ToInt32(a), Convert.ToInt32(b)), defaultResult);
            Assert.AreEqual(Comparer<int>.Default.Compare(Convert.ToInt32(b), Convert.ToInt32(a)), defaultOpposite);
			// Verify Visyn.NumberConverter .Default results... (note this works with char<->double)
			Assert.AreEqual(Comparer<int>.Default.Compare(visyn.ToInt32(a), visyn.ToInt32(b)), defaultResult);
            Assert.AreEqual(Comparer<int>.Default.Compare(visyn.ToInt32(b), visyn.ToInt32(a)), defaultOpposite);
			Assert.AreEqual(Comparer<double>.Default.Compare(visyn.ToDouble(a), visyn.ToDouble(b)), defaultResult);
            Assert.AreEqual(Comparer<double>.Default.Compare(visyn.ToDouble(b), visyn.ToDouble(a)), defaultOpposite);

            Assert.Zero(defaultResult + defaultOpposite);
			// Verify CustomComparer results...
            Assert.Zero(defaultResult + defaultOpposite);
			Assert.AreEqual(-1*defaultOpposite, custom.Compare(b,a));
            Assert.AreEqual(-1*defaultResult, custom.Compare(a,b));
        }

		public static void MatchesInvertedDefaultComparer_TypeT<T>(CustomComparer<T> custom, object oA, object oB, Char a,Char b)
        {
			Assert.AreEqual(Convert.ToInt32(oA),Convert.ToInt32(a),"Unit test parameter mis-match oA does not equal a");
			Assert.AreEqual(Convert.ToInt32(oB),Convert.ToInt32(b),"Unit test parameter mis-match oB does not equal b");
            var defaultComparer = Comparer<Char>.Default;
            var defaultResult = defaultComparer.Compare(a, b);
			var defaultOpposite = defaultComparer.Compare(b, a);
			defaultResult = defaultResult == 0 ? 0 : (defaultResult > 0 ? 1 : -1);
			defaultOpposite = defaultOpposite == 0 ? 0 : (defaultOpposite > 0 ? 1 : -1);
            // Verify Comparer.Default results...
			Assert.AreEqual(Comparer<int>.Default.Compare(Convert.ToInt32(a), Convert.ToInt32(b)), defaultResult);
            Assert.AreEqual(Comparer<int>.Default.Compare(Convert.ToInt32(b), Convert.ToInt32(a)), defaultOpposite);
			// Verify Visyn.NumberConverter .Default results... (note this works with char<->double)
			Assert.AreEqual(Comparer<int>.Default.Compare(visyn.ToInt32(a), visyn.ToInt32(b)), defaultResult);
            Assert.AreEqual(Comparer<int>.Default.Compare(visyn.ToInt32(b), visyn.ToInt32(a)), defaultOpposite);
			Assert.AreEqual(Comparer<double>.Default.Compare(visyn.ToDouble(a), visyn.ToDouble(b)), defaultResult);
            Assert.AreEqual(Comparer<double>.Default.Compare(visyn.ToDouble(b), visyn.ToDouble(a)), defaultOpposite);

            Assert.Zero(defaultResult + defaultOpposite);
			// Verify CustomComparer results...
            Assert.AreEqual(-1*defaultResult,   custom.Compare(oA,oB));
            Assert.AreEqual(-1*defaultOpposite, custom.Compare(oB,oA));
        }
#endregion

#region UInt32 // UInt32
		public static void MatchesDefaultComparer(CustomComparer<UInt32> custom, UInt32 a,UInt32 b)
        {
            var defaultComparer = Comparer<UInt32>.Default;
            var defaultResult = defaultComparer.Compare(a, b);
			var defaultOpposite = defaultComparer.Compare(b, a);
            // Verify Comparer.Default results...
			Assert.AreEqual(Comparer<int>.Default.Compare(Convert.ToInt32(a), Convert.ToInt32(b)), defaultResult);
            Assert.AreEqual(Comparer<int>.Default.Compare(Convert.ToInt32(b), Convert.ToInt32(a)), defaultOpposite);
            Assert.AreEqual(Comparer<double>.Default.Compare(Convert.ToDouble(a), Convert.ToDouble(b)), defaultResult);
            Assert.AreEqual(Comparer<double>.Default.Compare(Convert.ToDouble(b), Convert.ToDouble(a)), defaultOpposite);
			// Verify Visyn.NumberConverter .Default results... (note this works with char<->double)
			Assert.AreEqual(Comparer<int>.Default.Compare(visyn.ToInt32(a), visyn.ToInt32(b)), defaultResult);
            Assert.AreEqual(Comparer<int>.Default.Compare(visyn.ToInt32(b), visyn.ToInt32(a)), defaultOpposite);
			Assert.AreEqual(Comparer<double>.Default.Compare(visyn.ToDouble(a), visyn.ToDouble(b)), defaultResult);
            Assert.AreEqual(Comparer<double>.Default.Compare(visyn.ToDouble(b), visyn.ToDouble(a)), defaultOpposite);

            Assert.Zero(defaultResult + defaultOpposite);
			// Verify CustomComparer results...
            Assert.Zero(defaultResult + defaultOpposite);
			Assert.AreEqual(defaultOpposite, custom.Compare(b,a));
            Assert.AreEqual(defaultResult, custom.Compare(a,b));
        }

		public static void MatchesDefaultComparer_TypeT<T>(CustomComparer<T> custom, object oA, object oB, UInt32 a,UInt32 b)
        {
			Assert.AreEqual(Convert.ToInt32(oA),Convert.ToInt32(a),"Unit test parameter mis-match oA does not equal a");
			Assert.AreEqual(Convert.ToInt32(oB),Convert.ToInt32(b),"Unit test parameter mis-match oB does not equal b");
            var defaultComparer = Comparer<UInt32>.Default;
            var defaultResult = defaultComparer.Compare(a, b);
			var defaultOpposite = defaultComparer.Compare(b, a);
            // Verify Comparer.Default results...
			Assert.AreEqual(Comparer<int>.Default.Compare(Convert.ToInt32(a), Convert.ToInt32(b)), defaultResult);
            Assert.AreEqual(Comparer<int>.Default.Compare(Convert.ToInt32(b), Convert.ToInt32(a)), defaultOpposite);
            Assert.AreEqual(Comparer<double>.Default.Compare(Convert.ToDouble(a), Convert.ToDouble(b)), defaultResult);
            Assert.AreEqual(Comparer<double>.Default.Compare(Convert.ToDouble(b), Convert.ToDouble(a)), defaultOpposite);
			// Verify Visyn.NumberConverter .Default results... (note this works with char<->double)
			Assert.AreEqual(Comparer<int>.Default.Compare(visyn.ToInt32(a), visyn.ToInt32(b)), defaultResult);
            Assert.AreEqual(Comparer<int>.Default.Compare(visyn.ToInt32(b), visyn.ToInt32(a)), defaultOpposite);
			Assert.AreEqual(Comparer<double>.Default.Compare(visyn.ToDouble(a), visyn.ToDouble(b)), defaultResult);
            Assert.AreEqual(Comparer<double>.Default.Compare(visyn.ToDouble(b), visyn.ToDouble(a)), defaultOpposite);

            Assert.Zero(defaultResult + defaultOpposite);
			// Verify CustomComparer results...
            Assert.AreEqual(defaultResult,   custom.Compare(oA,oB));
            Assert.AreEqual(defaultOpposite, custom.Compare(oB,oA));
        }

		// UInt32 - Default Comparer (inverted)
		public static void MatchesInvertedDefaultComparer(CustomComparer<UInt32> custom, UInt32 a,UInt32 b)
        {
            var defaultComparer = Comparer<UInt32>.Default;
            var defaultResult = defaultComparer.Compare(a, b);
			var defaultOpposite = defaultComparer.Compare(b, a);
            // Verify Comparer.Default results...
			Assert.AreEqual(Comparer<int>.Default.Compare(Convert.ToInt32(a), Convert.ToInt32(b)), defaultResult);
            Assert.AreEqual(Comparer<int>.Default.Compare(Convert.ToInt32(b), Convert.ToInt32(a)), defaultOpposite);
            Assert.AreEqual(Comparer<double>.Default.Compare(Convert.ToDouble(a), Convert.ToDouble(b)), defaultResult);
            Assert.AreEqual(Comparer<double>.Default.Compare(Convert.ToDouble(b), Convert.ToDouble(a)), defaultOpposite);
			// Verify Visyn.NumberConverter .Default results... (note this works with char<->double)
			Assert.AreEqual(Comparer<int>.Default.Compare(visyn.ToInt32(a), visyn.ToInt32(b)), defaultResult);
            Assert.AreEqual(Comparer<int>.Default.Compare(visyn.ToInt32(b), visyn.ToInt32(a)), defaultOpposite);
			Assert.AreEqual(Comparer<double>.Default.Compare(visyn.ToDouble(a), visyn.ToDouble(b)), defaultResult);
            Assert.AreEqual(Comparer<double>.Default.Compare(visyn.ToDouble(b), visyn.ToDouble(a)), defaultOpposite);

            Assert.Zero(defaultResult + defaultOpposite);
			// Verify CustomComparer results...
            Assert.Zero(defaultResult + defaultOpposite);
			Assert.AreEqual(-1*defaultOpposite, custom.Compare(b,a));
            Assert.AreEqual(-1*defaultResult, custom.Compare(a,b));
        }

		public static void MatchesInvertedDefaultComparer_TypeT<T>(CustomComparer<T> custom, object oA, object oB, UInt32 a,UInt32 b)
        {
			Assert.AreEqual(Convert.ToInt32(oA),Convert.ToInt32(a),"Unit test parameter mis-match oA does not equal a");
			Assert.AreEqual(Convert.ToInt32(oB),Convert.ToInt32(b),"Unit test parameter mis-match oB does not equal b");
            var defaultComparer = Comparer<UInt32>.Default;
            var defaultResult = defaultComparer.Compare(a, b);
			var defaultOpposite = defaultComparer.Compare(b, a);
            // Verify Comparer.Default results...
			Assert.AreEqual(Comparer<int>.Default.Compare(Convert.ToInt32(a), Convert.ToInt32(b)), defaultResult);
            Assert.AreEqual(Comparer<int>.Default.Compare(Convert.ToInt32(b), Convert.ToInt32(a)), defaultOpposite);
            Assert.AreEqual(Comparer<double>.Default.Compare(Convert.ToDouble(a), Convert.ToDouble(b)), defaultResult);
            Assert.AreEqual(Comparer<double>.Default.Compare(Convert.ToDouble(b), Convert.ToDouble(a)), defaultOpposite);
			// Verify Visyn.NumberConverter .Default results... (note this works with char<->double)
			Assert.AreEqual(Comparer<int>.Default.Compare(visyn.ToInt32(a), visyn.ToInt32(b)), defaultResult);
            Assert.AreEqual(Comparer<int>.Default.Compare(visyn.ToInt32(b), visyn.ToInt32(a)), defaultOpposite);
			Assert.AreEqual(Comparer<double>.Default.Compare(visyn.ToDouble(a), visyn.ToDouble(b)), defaultResult);
            Assert.AreEqual(Comparer<double>.Default.Compare(visyn.ToDouble(b), visyn.ToDouble(a)), defaultOpposite);

            Assert.Zero(defaultResult + defaultOpposite);
			// Verify CustomComparer results...
            Assert.AreEqual(-1*defaultResult,   custom.Compare(oA,oB));
            Assert.AreEqual(-1*defaultOpposite, custom.Compare(oB,oA));
        }
#endregion

#region UInt64 // UInt64
		public static void MatchesDefaultComparer(CustomComparer<UInt64> custom, UInt64 a,UInt64 b)
        {
            var defaultComparer = Comparer<UInt64>.Default;
            var defaultResult = defaultComparer.Compare(a, b);
			var defaultOpposite = defaultComparer.Compare(b, a);
            // Verify Comparer.Default results...
			Assert.AreEqual(Comparer<int>.Default.Compare(Convert.ToInt32(a), Convert.ToInt32(b)), defaultResult);
            Assert.AreEqual(Comparer<int>.Default.Compare(Convert.ToInt32(b), Convert.ToInt32(a)), defaultOpposite);
            Assert.AreEqual(Comparer<double>.Default.Compare(Convert.ToDouble(a), Convert.ToDouble(b)), defaultResult);
            Assert.AreEqual(Comparer<double>.Default.Compare(Convert.ToDouble(b), Convert.ToDouble(a)), defaultOpposite);
			// Verify Visyn.NumberConverter .Default results... (note this works with char<->double)
			Assert.AreEqual(Comparer<int>.Default.Compare(visyn.ToInt32(a), visyn.ToInt32(b)), defaultResult);
            Assert.AreEqual(Comparer<int>.Default.Compare(visyn.ToInt32(b), visyn.ToInt32(a)), defaultOpposite);
			Assert.AreEqual(Comparer<double>.Default.Compare(visyn.ToDouble(a), visyn.ToDouble(b)), defaultResult);
            Assert.AreEqual(Comparer<double>.Default.Compare(visyn.ToDouble(b), visyn.ToDouble(a)), defaultOpposite);

            Assert.Zero(defaultResult + defaultOpposite);
			// Verify CustomComparer results...
            Assert.Zero(defaultResult + defaultOpposite);
			Assert.AreEqual(defaultOpposite, custom.Compare(b,a));
            Assert.AreEqual(defaultResult, custom.Compare(a,b));
        }

		public static void MatchesDefaultComparer_TypeT<T>(CustomComparer<T> custom, object oA, object oB, UInt64 a,UInt64 b)
        {
			Assert.AreEqual(Convert.ToInt32(oA),Convert.ToInt32(a),"Unit test parameter mis-match oA does not equal a");
			Assert.AreEqual(Convert.ToInt32(oB),Convert.ToInt32(b),"Unit test parameter mis-match oB does not equal b");
            var defaultComparer = Comparer<UInt64>.Default;
            var defaultResult = defaultComparer.Compare(a, b);
			var defaultOpposite = defaultComparer.Compare(b, a);
            // Verify Comparer.Default results...
			Assert.AreEqual(Comparer<int>.Default.Compare(Convert.ToInt32(a), Convert.ToInt32(b)), defaultResult);
            Assert.AreEqual(Comparer<int>.Default.Compare(Convert.ToInt32(b), Convert.ToInt32(a)), defaultOpposite);
            Assert.AreEqual(Comparer<double>.Default.Compare(Convert.ToDouble(a), Convert.ToDouble(b)), defaultResult);
            Assert.AreEqual(Comparer<double>.Default.Compare(Convert.ToDouble(b), Convert.ToDouble(a)), defaultOpposite);
			// Verify Visyn.NumberConverter .Default results... (note this works with char<->double)
			Assert.AreEqual(Comparer<int>.Default.Compare(visyn.ToInt32(a), visyn.ToInt32(b)), defaultResult);
            Assert.AreEqual(Comparer<int>.Default.Compare(visyn.ToInt32(b), visyn.ToInt32(a)), defaultOpposite);
			Assert.AreEqual(Comparer<double>.Default.Compare(visyn.ToDouble(a), visyn.ToDouble(b)), defaultResult);
            Assert.AreEqual(Comparer<double>.Default.Compare(visyn.ToDouble(b), visyn.ToDouble(a)), defaultOpposite);

            Assert.Zero(defaultResult + defaultOpposite);
			// Verify CustomComparer results...
            Assert.AreEqual(defaultResult,   custom.Compare(oA,oB));
            Assert.AreEqual(defaultOpposite, custom.Compare(oB,oA));
        }

		// UInt64 - Default Comparer (inverted)
		public static void MatchesInvertedDefaultComparer(CustomComparer<UInt64> custom, UInt64 a,UInt64 b)
        {
            var defaultComparer = Comparer<UInt64>.Default;
            var defaultResult = defaultComparer.Compare(a, b);
			var defaultOpposite = defaultComparer.Compare(b, a);
            // Verify Comparer.Default results...
			Assert.AreEqual(Comparer<int>.Default.Compare(Convert.ToInt32(a), Convert.ToInt32(b)), defaultResult);
            Assert.AreEqual(Comparer<int>.Default.Compare(Convert.ToInt32(b), Convert.ToInt32(a)), defaultOpposite);
            Assert.AreEqual(Comparer<double>.Default.Compare(Convert.ToDouble(a), Convert.ToDouble(b)), defaultResult);
            Assert.AreEqual(Comparer<double>.Default.Compare(Convert.ToDouble(b), Convert.ToDouble(a)), defaultOpposite);
			// Verify Visyn.NumberConverter .Default results... (note this works with char<->double)
			Assert.AreEqual(Comparer<int>.Default.Compare(visyn.ToInt32(a), visyn.ToInt32(b)), defaultResult);
            Assert.AreEqual(Comparer<int>.Default.Compare(visyn.ToInt32(b), visyn.ToInt32(a)), defaultOpposite);
			Assert.AreEqual(Comparer<double>.Default.Compare(visyn.ToDouble(a), visyn.ToDouble(b)), defaultResult);
            Assert.AreEqual(Comparer<double>.Default.Compare(visyn.ToDouble(b), visyn.ToDouble(a)), defaultOpposite);

            Assert.Zero(defaultResult + defaultOpposite);
			// Verify CustomComparer results...
            Assert.Zero(defaultResult + defaultOpposite);
			Assert.AreEqual(-1*defaultOpposite, custom.Compare(b,a));
            Assert.AreEqual(-1*defaultResult, custom.Compare(a,b));
        }

		public static void MatchesInvertedDefaultComparer_TypeT<T>(CustomComparer<T> custom, object oA, object oB, UInt64 a,UInt64 b)
        {
			Assert.AreEqual(Convert.ToInt32(oA),Convert.ToInt32(a),"Unit test parameter mis-match oA does not equal a");
			Assert.AreEqual(Convert.ToInt32(oB),Convert.ToInt32(b),"Unit test parameter mis-match oB does not equal b");
            var defaultComparer = Comparer<UInt64>.Default;
            var defaultResult = defaultComparer.Compare(a, b);
			var defaultOpposite = defaultComparer.Compare(b, a);
            // Verify Comparer.Default results...
			Assert.AreEqual(Comparer<int>.Default.Compare(Convert.ToInt32(a), Convert.ToInt32(b)), defaultResult);
            Assert.AreEqual(Comparer<int>.Default.Compare(Convert.ToInt32(b), Convert.ToInt32(a)), defaultOpposite);
            Assert.AreEqual(Comparer<double>.Default.Compare(Convert.ToDouble(a), Convert.ToDouble(b)), defaultResult);
            Assert.AreEqual(Comparer<double>.Default.Compare(Convert.ToDouble(b), Convert.ToDouble(a)), defaultOpposite);
			// Verify Visyn.NumberConverter .Default results... (note this works with char<->double)
			Assert.AreEqual(Comparer<int>.Default.Compare(visyn.ToInt32(a), visyn.ToInt32(b)), defaultResult);
            Assert.AreEqual(Comparer<int>.Default.Compare(visyn.ToInt32(b), visyn.ToInt32(a)), defaultOpposite);
			Assert.AreEqual(Comparer<double>.Default.Compare(visyn.ToDouble(a), visyn.ToDouble(b)), defaultResult);
            Assert.AreEqual(Comparer<double>.Default.Compare(visyn.ToDouble(b), visyn.ToDouble(a)), defaultOpposite);

            Assert.Zero(defaultResult + defaultOpposite);
			// Verify CustomComparer results...
            Assert.AreEqual(-1*defaultResult,   custom.Compare(oA,oB));
            Assert.AreEqual(-1*defaultOpposite, custom.Compare(oB,oA));
        }
#endregion

#region UInt16 // UInt16
		public static void MatchesDefaultComparer(CustomComparer<UInt16> custom, UInt16 a,UInt16 b)
        {
            var defaultComparer = Comparer<UInt16>.Default;
            var defaultResult = defaultComparer.Compare(a, b);
			var defaultOpposite = defaultComparer.Compare(b, a);
			defaultResult = defaultResult == 0 ? 0 : (defaultResult > 0 ? 1 : -1);
			defaultOpposite = defaultOpposite == 0 ? 0 : (defaultOpposite > 0 ? 1 : -1);
            // Verify Comparer.Default results...
			Assert.AreEqual(Comparer<int>.Default.Compare(Convert.ToInt32(a), Convert.ToInt32(b)), defaultResult);
            Assert.AreEqual(Comparer<int>.Default.Compare(Convert.ToInt32(b), Convert.ToInt32(a)), defaultOpposite);
            Assert.AreEqual(Comparer<double>.Default.Compare(Convert.ToDouble(a), Convert.ToDouble(b)), defaultResult);
            Assert.AreEqual(Comparer<double>.Default.Compare(Convert.ToDouble(b), Convert.ToDouble(a)), defaultOpposite);
			// Verify Visyn.NumberConverter .Default results... (note this works with char<->double)
			Assert.AreEqual(Comparer<int>.Default.Compare(visyn.ToInt32(a), visyn.ToInt32(b)), defaultResult);
            Assert.AreEqual(Comparer<int>.Default.Compare(visyn.ToInt32(b), visyn.ToInt32(a)), defaultOpposite);
			Assert.AreEqual(Comparer<double>.Default.Compare(visyn.ToDouble(a), visyn.ToDouble(b)), defaultResult);
            Assert.AreEqual(Comparer<double>.Default.Compare(visyn.ToDouble(b), visyn.ToDouble(a)), defaultOpposite);

            Assert.Zero(defaultResult + defaultOpposite);
			// Verify CustomComparer results...
            Assert.Zero(defaultResult + defaultOpposite);
			Assert.AreEqual(defaultOpposite, custom.Compare(b,a));
            Assert.AreEqual(defaultResult, custom.Compare(a,b));
        }

		public static void MatchesDefaultComparer_TypeT<T>(CustomComparer<T> custom, object oA, object oB, UInt16 a,UInt16 b)
        {
			Assert.AreEqual(Convert.ToInt32(oA),Convert.ToInt32(a),"Unit test parameter mis-match oA does not equal a");
			Assert.AreEqual(Convert.ToInt32(oB),Convert.ToInt32(b),"Unit test parameter mis-match oB does not equal b");
            var defaultComparer = Comparer<UInt16>.Default;
            var defaultResult = defaultComparer.Compare(a, b);
			var defaultOpposite = defaultComparer.Compare(b, a);
			defaultResult = defaultResult == 0 ? 0 : (defaultResult > 0 ? 1 : -1);
			defaultOpposite = defaultOpposite == 0 ? 0 : (defaultOpposite > 0 ? 1 : -1);
            // Verify Comparer.Default results...
			Assert.AreEqual(Comparer<int>.Default.Compare(Convert.ToInt32(a), Convert.ToInt32(b)), defaultResult);
            Assert.AreEqual(Comparer<int>.Default.Compare(Convert.ToInt32(b), Convert.ToInt32(a)), defaultOpposite);
            Assert.AreEqual(Comparer<double>.Default.Compare(Convert.ToDouble(a), Convert.ToDouble(b)), defaultResult);
            Assert.AreEqual(Comparer<double>.Default.Compare(Convert.ToDouble(b), Convert.ToDouble(a)), defaultOpposite);
			// Verify Visyn.NumberConverter .Default results... (note this works with char<->double)
			Assert.AreEqual(Comparer<int>.Default.Compare(visyn.ToInt32(a), visyn.ToInt32(b)), defaultResult);
            Assert.AreEqual(Comparer<int>.Default.Compare(visyn.ToInt32(b), visyn.ToInt32(a)), defaultOpposite);
			Assert.AreEqual(Comparer<double>.Default.Compare(visyn.ToDouble(a), visyn.ToDouble(b)), defaultResult);
            Assert.AreEqual(Comparer<double>.Default.Compare(visyn.ToDouble(b), visyn.ToDouble(a)), defaultOpposite);

            Assert.Zero(defaultResult + defaultOpposite);
			// Verify CustomComparer results...
            Assert.AreEqual(defaultResult,   custom.Compare(oA,oB));
            Assert.AreEqual(defaultOpposite, custom.Compare(oB,oA));
        }

		// UInt16 - Default Comparer (inverted)
		public static void MatchesInvertedDefaultComparer(CustomComparer<UInt16> custom, UInt16 a,UInt16 b)
        {
            var defaultComparer = Comparer<UInt16>.Default;
            var defaultResult = defaultComparer.Compare(a, b);
			var defaultOpposite = defaultComparer.Compare(b, a);
			defaultResult = defaultResult == 0 ? 0 : (defaultResult > 0 ? 1 : -1);
			defaultOpposite = defaultOpposite == 0 ? 0 : (defaultOpposite > 0 ? 1 : -1);
            // Verify Comparer.Default results...
			Assert.AreEqual(Comparer<int>.Default.Compare(Convert.ToInt32(a), Convert.ToInt32(b)), defaultResult);
            Assert.AreEqual(Comparer<int>.Default.Compare(Convert.ToInt32(b), Convert.ToInt32(a)), defaultOpposite);
            Assert.AreEqual(Comparer<double>.Default.Compare(Convert.ToDouble(a), Convert.ToDouble(b)), defaultResult);
            Assert.AreEqual(Comparer<double>.Default.Compare(Convert.ToDouble(b), Convert.ToDouble(a)), defaultOpposite);
			// Verify Visyn.NumberConverter .Default results... (note this works with char<->double)
			Assert.AreEqual(Comparer<int>.Default.Compare(visyn.ToInt32(a), visyn.ToInt32(b)), defaultResult);
            Assert.AreEqual(Comparer<int>.Default.Compare(visyn.ToInt32(b), visyn.ToInt32(a)), defaultOpposite);
			Assert.AreEqual(Comparer<double>.Default.Compare(visyn.ToDouble(a), visyn.ToDouble(b)), defaultResult);
            Assert.AreEqual(Comparer<double>.Default.Compare(visyn.ToDouble(b), visyn.ToDouble(a)), defaultOpposite);

            Assert.Zero(defaultResult + defaultOpposite);
			// Verify CustomComparer results...
            Assert.Zero(defaultResult + defaultOpposite);
			Assert.AreEqual(-1*defaultOpposite, custom.Compare(b,a));
            Assert.AreEqual(-1*defaultResult, custom.Compare(a,b));
        }

		public static void MatchesInvertedDefaultComparer_TypeT<T>(CustomComparer<T> custom, object oA, object oB, UInt16 a,UInt16 b)
        {
			Assert.AreEqual(Convert.ToInt32(oA),Convert.ToInt32(a),"Unit test parameter mis-match oA does not equal a");
			Assert.AreEqual(Convert.ToInt32(oB),Convert.ToInt32(b),"Unit test parameter mis-match oB does not equal b");
            var defaultComparer = Comparer<UInt16>.Default;
            var defaultResult = defaultComparer.Compare(a, b);
			var defaultOpposite = defaultComparer.Compare(b, a);
			defaultResult = defaultResult == 0 ? 0 : (defaultResult > 0 ? 1 : -1);
			defaultOpposite = defaultOpposite == 0 ? 0 : (defaultOpposite > 0 ? 1 : -1);
            // Verify Comparer.Default results...
			Assert.AreEqual(Comparer<int>.Default.Compare(Convert.ToInt32(a), Convert.ToInt32(b)), defaultResult);
            Assert.AreEqual(Comparer<int>.Default.Compare(Convert.ToInt32(b), Convert.ToInt32(a)), defaultOpposite);
            Assert.AreEqual(Comparer<double>.Default.Compare(Convert.ToDouble(a), Convert.ToDouble(b)), defaultResult);
            Assert.AreEqual(Comparer<double>.Default.Compare(Convert.ToDouble(b), Convert.ToDouble(a)), defaultOpposite);
			// Verify Visyn.NumberConverter .Default results... (note this works with char<->double)
			Assert.AreEqual(Comparer<int>.Default.Compare(visyn.ToInt32(a), visyn.ToInt32(b)), defaultResult);
            Assert.AreEqual(Comparer<int>.Default.Compare(visyn.ToInt32(b), visyn.ToInt32(a)), defaultOpposite);
			Assert.AreEqual(Comparer<double>.Default.Compare(visyn.ToDouble(a), visyn.ToDouble(b)), defaultResult);
            Assert.AreEqual(Comparer<double>.Default.Compare(visyn.ToDouble(b), visyn.ToDouble(a)), defaultOpposite);

            Assert.Zero(defaultResult + defaultOpposite);
			// Verify CustomComparer results...
            Assert.AreEqual(-1*defaultResult,   custom.Compare(oA,oB));
            Assert.AreEqual(-1*defaultOpposite, custom.Compare(oB,oA));
        }
#endregion

#region Byte // Byte
		public static void MatchesDefaultComparer(CustomComparer<Byte> custom, Byte a,Byte b)
        {
            var defaultComparer = Comparer<Byte>.Default;
            var defaultResult = defaultComparer.Compare(a, b);
			var defaultOpposite = defaultComparer.Compare(b, a);
			defaultResult = defaultResult == 0 ? 0 : (defaultResult > 0 ? 1 : -1);
			defaultOpposite = defaultOpposite == 0 ? 0 : (defaultOpposite > 0 ? 1 : -1);
            // Verify Comparer.Default results...
			Assert.AreEqual(Comparer<int>.Default.Compare(Convert.ToInt32(a), Convert.ToInt32(b)), defaultResult);
            Assert.AreEqual(Comparer<int>.Default.Compare(Convert.ToInt32(b), Convert.ToInt32(a)), defaultOpposite);
            Assert.AreEqual(Comparer<double>.Default.Compare(Convert.ToDouble(a), Convert.ToDouble(b)), defaultResult);
            Assert.AreEqual(Comparer<double>.Default.Compare(Convert.ToDouble(b), Convert.ToDouble(a)), defaultOpposite);
			// Verify Visyn.NumberConverter .Default results... (note this works with char<->double)
			Assert.AreEqual(Comparer<int>.Default.Compare(visyn.ToInt32(a), visyn.ToInt32(b)), defaultResult);
            Assert.AreEqual(Comparer<int>.Default.Compare(visyn.ToInt32(b), visyn.ToInt32(a)), defaultOpposite);
			Assert.AreEqual(Comparer<double>.Default.Compare(visyn.ToDouble(a), visyn.ToDouble(b)), defaultResult);
            Assert.AreEqual(Comparer<double>.Default.Compare(visyn.ToDouble(b), visyn.ToDouble(a)), defaultOpposite);

            Assert.Zero(defaultResult + defaultOpposite);
			// Verify CustomComparer results...
            Assert.Zero(defaultResult + defaultOpposite);
			Assert.AreEqual(defaultOpposite, custom.Compare(b,a));
            Assert.AreEqual(defaultResult, custom.Compare(a,b));
        }

		public static void MatchesDefaultComparer_TypeT<T>(CustomComparer<T> custom, object oA, object oB, Byte a,Byte b)
        {
			Assert.AreEqual(Convert.ToInt32(oA),Convert.ToInt32(a),"Unit test parameter mis-match oA does not equal a");
			Assert.AreEqual(Convert.ToInt32(oB),Convert.ToInt32(b),"Unit test parameter mis-match oB does not equal b");
            var defaultComparer = Comparer<Byte>.Default;
            var defaultResult = defaultComparer.Compare(a, b);
			var defaultOpposite = defaultComparer.Compare(b, a);
			defaultResult = defaultResult == 0 ? 0 : (defaultResult > 0 ? 1 : -1);
			defaultOpposite = defaultOpposite == 0 ? 0 : (defaultOpposite > 0 ? 1 : -1);
            // Verify Comparer.Default results...
			Assert.AreEqual(Comparer<int>.Default.Compare(Convert.ToInt32(a), Convert.ToInt32(b)), defaultResult);
            Assert.AreEqual(Comparer<int>.Default.Compare(Convert.ToInt32(b), Convert.ToInt32(a)), defaultOpposite);
            Assert.AreEqual(Comparer<double>.Default.Compare(Convert.ToDouble(a), Convert.ToDouble(b)), defaultResult);
            Assert.AreEqual(Comparer<double>.Default.Compare(Convert.ToDouble(b), Convert.ToDouble(a)), defaultOpposite);
			// Verify Visyn.NumberConverter .Default results... (note this works with char<->double)
			Assert.AreEqual(Comparer<int>.Default.Compare(visyn.ToInt32(a), visyn.ToInt32(b)), defaultResult);
            Assert.AreEqual(Comparer<int>.Default.Compare(visyn.ToInt32(b), visyn.ToInt32(a)), defaultOpposite);
			Assert.AreEqual(Comparer<double>.Default.Compare(visyn.ToDouble(a), visyn.ToDouble(b)), defaultResult);
            Assert.AreEqual(Comparer<double>.Default.Compare(visyn.ToDouble(b), visyn.ToDouble(a)), defaultOpposite);

            Assert.Zero(defaultResult + defaultOpposite);
			// Verify CustomComparer results...
            Assert.AreEqual(defaultResult,   custom.Compare(oA,oB));
            Assert.AreEqual(defaultOpposite, custom.Compare(oB,oA));
        }

		// Byte - Default Comparer (inverted)
		public static void MatchesInvertedDefaultComparer(CustomComparer<Byte> custom, Byte a,Byte b)
        {
            var defaultComparer = Comparer<Byte>.Default;
            var defaultResult = defaultComparer.Compare(a, b);
			var defaultOpposite = defaultComparer.Compare(b, a);
			defaultResult = defaultResult == 0 ? 0 : (defaultResult > 0 ? 1 : -1);
			defaultOpposite = defaultOpposite == 0 ? 0 : (defaultOpposite > 0 ? 1 : -1);
            // Verify Comparer.Default results...
			Assert.AreEqual(Comparer<int>.Default.Compare(Convert.ToInt32(a), Convert.ToInt32(b)), defaultResult);
            Assert.AreEqual(Comparer<int>.Default.Compare(Convert.ToInt32(b), Convert.ToInt32(a)), defaultOpposite);
            Assert.AreEqual(Comparer<double>.Default.Compare(Convert.ToDouble(a), Convert.ToDouble(b)), defaultResult);
            Assert.AreEqual(Comparer<double>.Default.Compare(Convert.ToDouble(b), Convert.ToDouble(a)), defaultOpposite);
			// Verify Visyn.NumberConverter .Default results... (note this works with char<->double)
			Assert.AreEqual(Comparer<int>.Default.Compare(visyn.ToInt32(a), visyn.ToInt32(b)), defaultResult);
            Assert.AreEqual(Comparer<int>.Default.Compare(visyn.ToInt32(b), visyn.ToInt32(a)), defaultOpposite);
			Assert.AreEqual(Comparer<double>.Default.Compare(visyn.ToDouble(a), visyn.ToDouble(b)), defaultResult);
            Assert.AreEqual(Comparer<double>.Default.Compare(visyn.ToDouble(b), visyn.ToDouble(a)), defaultOpposite);

            Assert.Zero(defaultResult + defaultOpposite);
			// Verify CustomComparer results...
            Assert.Zero(defaultResult + defaultOpposite);
			Assert.AreEqual(-1*defaultOpposite, custom.Compare(b,a));
            Assert.AreEqual(-1*defaultResult, custom.Compare(a,b));
        }

		public static void MatchesInvertedDefaultComparer_TypeT<T>(CustomComparer<T> custom, object oA, object oB, Byte a,Byte b)
        {
			Assert.AreEqual(Convert.ToInt32(oA),Convert.ToInt32(a),"Unit test parameter mis-match oA does not equal a");
			Assert.AreEqual(Convert.ToInt32(oB),Convert.ToInt32(b),"Unit test parameter mis-match oB does not equal b");
            var defaultComparer = Comparer<Byte>.Default;
            var defaultResult = defaultComparer.Compare(a, b);
			var defaultOpposite = defaultComparer.Compare(b, a);
			defaultResult = defaultResult == 0 ? 0 : (defaultResult > 0 ? 1 : -1);
			defaultOpposite = defaultOpposite == 0 ? 0 : (defaultOpposite > 0 ? 1 : -1);
            // Verify Comparer.Default results...
			Assert.AreEqual(Comparer<int>.Default.Compare(Convert.ToInt32(a), Convert.ToInt32(b)), defaultResult);
            Assert.AreEqual(Comparer<int>.Default.Compare(Convert.ToInt32(b), Convert.ToInt32(a)), defaultOpposite);
            Assert.AreEqual(Comparer<double>.Default.Compare(Convert.ToDouble(a), Convert.ToDouble(b)), defaultResult);
            Assert.AreEqual(Comparer<double>.Default.Compare(Convert.ToDouble(b), Convert.ToDouble(a)), defaultOpposite);
			// Verify Visyn.NumberConverter .Default results... (note this works with char<->double)
			Assert.AreEqual(Comparer<int>.Default.Compare(visyn.ToInt32(a), visyn.ToInt32(b)), defaultResult);
            Assert.AreEqual(Comparer<int>.Default.Compare(visyn.ToInt32(b), visyn.ToInt32(a)), defaultOpposite);
			Assert.AreEqual(Comparer<double>.Default.Compare(visyn.ToDouble(a), visyn.ToDouble(b)), defaultResult);
            Assert.AreEqual(Comparer<double>.Default.Compare(visyn.ToDouble(b), visyn.ToDouble(a)), defaultOpposite);

            Assert.Zero(defaultResult + defaultOpposite);
			// Verify CustomComparer results...
            Assert.AreEqual(-1*defaultResult,   custom.Compare(oA,oB));
            Assert.AreEqual(-1*defaultOpposite, custom.Compare(oB,oA));
        }
#endregion

#region Double // Double
		public static void MatchesDefaultComparer(CustomComparer<Double> custom, Double a,Double b)
        {
            var defaultComparer = Comparer<Double>.Default;
            var defaultResult = defaultComparer.Compare(a, b);
			var defaultOpposite = defaultComparer.Compare(b, a);
            // Verify Comparer.Default results...
			Assert.AreEqual(Comparer<int>.Default.Compare(Convert.ToInt32(a), Convert.ToInt32(b)), defaultResult);
            Assert.AreEqual(Comparer<int>.Default.Compare(Convert.ToInt32(b), Convert.ToInt32(a)), defaultOpposite);
            Assert.AreEqual(Comparer<double>.Default.Compare(Convert.ToDouble(a), Convert.ToDouble(b)), defaultResult);
            Assert.AreEqual(Comparer<double>.Default.Compare(Convert.ToDouble(b), Convert.ToDouble(a)), defaultOpposite);
			// Verify Visyn.NumberConverter .Default results... (note this works with char<->double)
			Assert.AreEqual(Comparer<int>.Default.Compare(visyn.ToInt32(a), visyn.ToInt32(b)), defaultResult);
            Assert.AreEqual(Comparer<int>.Default.Compare(visyn.ToInt32(b), visyn.ToInt32(a)), defaultOpposite);
			Assert.AreEqual(Comparer<double>.Default.Compare(visyn.ToDouble(a), visyn.ToDouble(b)), defaultResult);
            Assert.AreEqual(Comparer<double>.Default.Compare(visyn.ToDouble(b), visyn.ToDouble(a)), defaultOpposite);

            Assert.Zero(defaultResult + defaultOpposite);
			// Verify CustomComparer results...
            Assert.Zero(defaultResult + defaultOpposite);
			Assert.AreEqual(defaultOpposite, custom.Compare(b,a));
            Assert.AreEqual(defaultResult, custom.Compare(a,b));
        }

		public static void MatchesDefaultComparer_TypeT<T>(CustomComparer<T> custom, object oA, object oB, Double a,Double b)
        {
			Assert.AreEqual(Convert.ToInt32(oA),Convert.ToInt32(a),"Unit test parameter mis-match oA does not equal a");
			Assert.AreEqual(Convert.ToInt32(oB),Convert.ToInt32(b),"Unit test parameter mis-match oB does not equal b");
            var defaultComparer = Comparer<Double>.Default;
            var defaultResult = defaultComparer.Compare(a, b);
			var defaultOpposite = defaultComparer.Compare(b, a);
            // Verify Comparer.Default results...
			Assert.AreEqual(Comparer<int>.Default.Compare(Convert.ToInt32(a), Convert.ToInt32(b)), defaultResult);
            Assert.AreEqual(Comparer<int>.Default.Compare(Convert.ToInt32(b), Convert.ToInt32(a)), defaultOpposite);
            Assert.AreEqual(Comparer<double>.Default.Compare(Convert.ToDouble(a), Convert.ToDouble(b)), defaultResult);
            Assert.AreEqual(Comparer<double>.Default.Compare(Convert.ToDouble(b), Convert.ToDouble(a)), defaultOpposite);
			// Verify Visyn.NumberConverter .Default results... (note this works with char<->double)
			Assert.AreEqual(Comparer<int>.Default.Compare(visyn.ToInt32(a), visyn.ToInt32(b)), defaultResult);
            Assert.AreEqual(Comparer<int>.Default.Compare(visyn.ToInt32(b), visyn.ToInt32(a)), defaultOpposite);
			Assert.AreEqual(Comparer<double>.Default.Compare(visyn.ToDouble(a), visyn.ToDouble(b)), defaultResult);
            Assert.AreEqual(Comparer<double>.Default.Compare(visyn.ToDouble(b), visyn.ToDouble(a)), defaultOpposite);

            Assert.Zero(defaultResult + defaultOpposite);
			// Verify CustomComparer results...
            Assert.AreEqual(defaultResult,   custom.Compare(oA,oB));
            Assert.AreEqual(defaultOpposite, custom.Compare(oB,oA));
        }

		// Double - Default Comparer (inverted)
		public static void MatchesInvertedDefaultComparer(CustomComparer<Double> custom, Double a,Double b)
        {
            var defaultComparer = Comparer<Double>.Default;
            var defaultResult = defaultComparer.Compare(a, b);
			var defaultOpposite = defaultComparer.Compare(b, a);
            // Verify Comparer.Default results...
			Assert.AreEqual(Comparer<int>.Default.Compare(Convert.ToInt32(a), Convert.ToInt32(b)), defaultResult);
            Assert.AreEqual(Comparer<int>.Default.Compare(Convert.ToInt32(b), Convert.ToInt32(a)), defaultOpposite);
            Assert.AreEqual(Comparer<double>.Default.Compare(Convert.ToDouble(a), Convert.ToDouble(b)), defaultResult);
            Assert.AreEqual(Comparer<double>.Default.Compare(Convert.ToDouble(b), Convert.ToDouble(a)), defaultOpposite);
			// Verify Visyn.NumberConverter .Default results... (note this works with char<->double)
			Assert.AreEqual(Comparer<int>.Default.Compare(visyn.ToInt32(a), visyn.ToInt32(b)), defaultResult);
            Assert.AreEqual(Comparer<int>.Default.Compare(visyn.ToInt32(b), visyn.ToInt32(a)), defaultOpposite);
			Assert.AreEqual(Comparer<double>.Default.Compare(visyn.ToDouble(a), visyn.ToDouble(b)), defaultResult);
            Assert.AreEqual(Comparer<double>.Default.Compare(visyn.ToDouble(b), visyn.ToDouble(a)), defaultOpposite);

            Assert.Zero(defaultResult + defaultOpposite);
			// Verify CustomComparer results...
            Assert.Zero(defaultResult + defaultOpposite);
			Assert.AreEqual(-1*defaultOpposite, custom.Compare(b,a));
            Assert.AreEqual(-1*defaultResult, custom.Compare(a,b));
        }

		public static void MatchesInvertedDefaultComparer_TypeT<T>(CustomComparer<T> custom, object oA, object oB, Double a,Double b)
        {
			Assert.AreEqual(Convert.ToInt32(oA),Convert.ToInt32(a),"Unit test parameter mis-match oA does not equal a");
			Assert.AreEqual(Convert.ToInt32(oB),Convert.ToInt32(b),"Unit test parameter mis-match oB does not equal b");
            var defaultComparer = Comparer<Double>.Default;
            var defaultResult = defaultComparer.Compare(a, b);
			var defaultOpposite = defaultComparer.Compare(b, a);
            // Verify Comparer.Default results...
			Assert.AreEqual(Comparer<int>.Default.Compare(Convert.ToInt32(a), Convert.ToInt32(b)), defaultResult);
            Assert.AreEqual(Comparer<int>.Default.Compare(Convert.ToInt32(b), Convert.ToInt32(a)), defaultOpposite);
            Assert.AreEqual(Comparer<double>.Default.Compare(Convert.ToDouble(a), Convert.ToDouble(b)), defaultResult);
            Assert.AreEqual(Comparer<double>.Default.Compare(Convert.ToDouble(b), Convert.ToDouble(a)), defaultOpposite);
			// Verify Visyn.NumberConverter .Default results... (note this works with char<->double)
			Assert.AreEqual(Comparer<int>.Default.Compare(visyn.ToInt32(a), visyn.ToInt32(b)), defaultResult);
            Assert.AreEqual(Comparer<int>.Default.Compare(visyn.ToInt32(b), visyn.ToInt32(a)), defaultOpposite);
			Assert.AreEqual(Comparer<double>.Default.Compare(visyn.ToDouble(a), visyn.ToDouble(b)), defaultResult);
            Assert.AreEqual(Comparer<double>.Default.Compare(visyn.ToDouble(b), visyn.ToDouble(a)), defaultOpposite);

            Assert.Zero(defaultResult + defaultOpposite);
			// Verify CustomComparer results...
            Assert.AreEqual(-1*defaultResult,   custom.Compare(oA,oB));
            Assert.AreEqual(-1*defaultOpposite, custom.Compare(oB,oA));
        }
#endregion

#region Single // Single
		public static void MatchesDefaultComparer(CustomComparer<Single> custom, Single a,Single b)
        {
            var defaultComparer = Comparer<Single>.Default;
            var defaultResult = defaultComparer.Compare(a, b);
			var defaultOpposite = defaultComparer.Compare(b, a);
            // Verify Comparer.Default results...
			Assert.AreEqual(Comparer<int>.Default.Compare(Convert.ToInt32(a), Convert.ToInt32(b)), defaultResult);
            Assert.AreEqual(Comparer<int>.Default.Compare(Convert.ToInt32(b), Convert.ToInt32(a)), defaultOpposite);
            Assert.AreEqual(Comparer<double>.Default.Compare(Convert.ToDouble(a), Convert.ToDouble(b)), defaultResult);
            Assert.AreEqual(Comparer<double>.Default.Compare(Convert.ToDouble(b), Convert.ToDouble(a)), defaultOpposite);
			// Verify Visyn.NumberConverter .Default results... (note this works with char<->double)
			Assert.AreEqual(Comparer<int>.Default.Compare(visyn.ToInt32(a), visyn.ToInt32(b)), defaultResult);
            Assert.AreEqual(Comparer<int>.Default.Compare(visyn.ToInt32(b), visyn.ToInt32(a)), defaultOpposite);
			Assert.AreEqual(Comparer<double>.Default.Compare(visyn.ToDouble(a), visyn.ToDouble(b)), defaultResult);
            Assert.AreEqual(Comparer<double>.Default.Compare(visyn.ToDouble(b), visyn.ToDouble(a)), defaultOpposite);

            Assert.Zero(defaultResult + defaultOpposite);
			// Verify CustomComparer results...
            Assert.Zero(defaultResult + defaultOpposite);
			Assert.AreEqual(defaultOpposite, custom.Compare(b,a));
            Assert.AreEqual(defaultResult, custom.Compare(a,b));
        }

		public static void MatchesDefaultComparer_TypeT<T>(CustomComparer<T> custom, object oA, object oB, Single a,Single b)
        {
			Assert.AreEqual(Convert.ToInt32(oA),Convert.ToInt32(a),"Unit test parameter mis-match oA does not equal a");
			Assert.AreEqual(Convert.ToInt32(oB),Convert.ToInt32(b),"Unit test parameter mis-match oB does not equal b");
            var defaultComparer = Comparer<Single>.Default;
            var defaultResult = defaultComparer.Compare(a, b);
			var defaultOpposite = defaultComparer.Compare(b, a);
            // Verify Comparer.Default results...
			Assert.AreEqual(Comparer<int>.Default.Compare(Convert.ToInt32(a), Convert.ToInt32(b)), defaultResult);
            Assert.AreEqual(Comparer<int>.Default.Compare(Convert.ToInt32(b), Convert.ToInt32(a)), defaultOpposite);
            Assert.AreEqual(Comparer<double>.Default.Compare(Convert.ToDouble(a), Convert.ToDouble(b)), defaultResult);
            Assert.AreEqual(Comparer<double>.Default.Compare(Convert.ToDouble(b), Convert.ToDouble(a)), defaultOpposite);
			// Verify Visyn.NumberConverter .Default results... (note this works with char<->double)
			Assert.AreEqual(Comparer<int>.Default.Compare(visyn.ToInt32(a), visyn.ToInt32(b)), defaultResult);
            Assert.AreEqual(Comparer<int>.Default.Compare(visyn.ToInt32(b), visyn.ToInt32(a)), defaultOpposite);
			Assert.AreEqual(Comparer<double>.Default.Compare(visyn.ToDouble(a), visyn.ToDouble(b)), defaultResult);
            Assert.AreEqual(Comparer<double>.Default.Compare(visyn.ToDouble(b), visyn.ToDouble(a)), defaultOpposite);

            Assert.Zero(defaultResult + defaultOpposite);
			// Verify CustomComparer results...
            Assert.AreEqual(defaultResult,   custom.Compare(oA,oB));
            Assert.AreEqual(defaultOpposite, custom.Compare(oB,oA));
        }

		// Single - Default Comparer (inverted)
		public static void MatchesInvertedDefaultComparer(CustomComparer<Single> custom, Single a,Single b)
        {
            var defaultComparer = Comparer<Single>.Default;
            var defaultResult = defaultComparer.Compare(a, b);
			var defaultOpposite = defaultComparer.Compare(b, a);
            // Verify Comparer.Default results...
			Assert.AreEqual(Comparer<int>.Default.Compare(Convert.ToInt32(a), Convert.ToInt32(b)), defaultResult);
            Assert.AreEqual(Comparer<int>.Default.Compare(Convert.ToInt32(b), Convert.ToInt32(a)), defaultOpposite);
            Assert.AreEqual(Comparer<double>.Default.Compare(Convert.ToDouble(a), Convert.ToDouble(b)), defaultResult);
            Assert.AreEqual(Comparer<double>.Default.Compare(Convert.ToDouble(b), Convert.ToDouble(a)), defaultOpposite);
			// Verify Visyn.NumberConverter .Default results... (note this works with char<->double)
			Assert.AreEqual(Comparer<int>.Default.Compare(visyn.ToInt32(a), visyn.ToInt32(b)), defaultResult);
            Assert.AreEqual(Comparer<int>.Default.Compare(visyn.ToInt32(b), visyn.ToInt32(a)), defaultOpposite);
			Assert.AreEqual(Comparer<double>.Default.Compare(visyn.ToDouble(a), visyn.ToDouble(b)), defaultResult);
            Assert.AreEqual(Comparer<double>.Default.Compare(visyn.ToDouble(b), visyn.ToDouble(a)), defaultOpposite);

            Assert.Zero(defaultResult + defaultOpposite);
			// Verify CustomComparer results...
            Assert.Zero(defaultResult + defaultOpposite);
			Assert.AreEqual(-1*defaultOpposite, custom.Compare(b,a));
            Assert.AreEqual(-1*defaultResult, custom.Compare(a,b));
        }

		public static void MatchesInvertedDefaultComparer_TypeT<T>(CustomComparer<T> custom, object oA, object oB, Single a,Single b)
        {
			Assert.AreEqual(Convert.ToInt32(oA),Convert.ToInt32(a),"Unit test parameter mis-match oA does not equal a");
			Assert.AreEqual(Convert.ToInt32(oB),Convert.ToInt32(b),"Unit test parameter mis-match oB does not equal b");
            var defaultComparer = Comparer<Single>.Default;
            var defaultResult = defaultComparer.Compare(a, b);
			var defaultOpposite = defaultComparer.Compare(b, a);
            // Verify Comparer.Default results...
			Assert.AreEqual(Comparer<int>.Default.Compare(Convert.ToInt32(a), Convert.ToInt32(b)), defaultResult);
            Assert.AreEqual(Comparer<int>.Default.Compare(Convert.ToInt32(b), Convert.ToInt32(a)), defaultOpposite);
            Assert.AreEqual(Comparer<double>.Default.Compare(Convert.ToDouble(a), Convert.ToDouble(b)), defaultResult);
            Assert.AreEqual(Comparer<double>.Default.Compare(Convert.ToDouble(b), Convert.ToDouble(a)), defaultOpposite);
			// Verify Visyn.NumberConverter .Default results... (note this works with char<->double)
			Assert.AreEqual(Comparer<int>.Default.Compare(visyn.ToInt32(a), visyn.ToInt32(b)), defaultResult);
            Assert.AreEqual(Comparer<int>.Default.Compare(visyn.ToInt32(b), visyn.ToInt32(a)), defaultOpposite);
			Assert.AreEqual(Comparer<double>.Default.Compare(visyn.ToDouble(a), visyn.ToDouble(b)), defaultResult);
            Assert.AreEqual(Comparer<double>.Default.Compare(visyn.ToDouble(b), visyn.ToDouble(a)), defaultOpposite);

            Assert.Zero(defaultResult + defaultOpposite);
			// Verify CustomComparer results...
            Assert.AreEqual(-1*defaultResult,   custom.Compare(oA,oB));
            Assert.AreEqual(-1*defaultOpposite, custom.Compare(oB,oA));
        }
#endregion

#region Decimal // Decimal
		public static void MatchesDefaultComparer(CustomComparer<Decimal> custom, Decimal a,Decimal b)
        {
            var defaultComparer = Comparer<Decimal>.Default;
            var defaultResult = defaultComparer.Compare(a, b);
			var defaultOpposite = defaultComparer.Compare(b, a);
            // Verify Comparer.Default results...
			Assert.AreEqual(Comparer<int>.Default.Compare(Convert.ToInt32(a), Convert.ToInt32(b)), defaultResult);
            Assert.AreEqual(Comparer<int>.Default.Compare(Convert.ToInt32(b), Convert.ToInt32(a)), defaultOpposite);
            Assert.AreEqual(Comparer<double>.Default.Compare(Convert.ToDouble(a), Convert.ToDouble(b)), defaultResult);
            Assert.AreEqual(Comparer<double>.Default.Compare(Convert.ToDouble(b), Convert.ToDouble(a)), defaultOpposite);
			// Verify Visyn.NumberConverter .Default results... (note this works with char<->double)
			Assert.AreEqual(Comparer<int>.Default.Compare(visyn.ToInt32(a), visyn.ToInt32(b)), defaultResult);
            Assert.AreEqual(Comparer<int>.Default.Compare(visyn.ToInt32(b), visyn.ToInt32(a)), defaultOpposite);
			Assert.AreEqual(Comparer<double>.Default.Compare(visyn.ToDouble(a), visyn.ToDouble(b)), defaultResult);
            Assert.AreEqual(Comparer<double>.Default.Compare(visyn.ToDouble(b), visyn.ToDouble(a)), defaultOpposite);

            Assert.Zero(defaultResult + defaultOpposite);
			// Verify CustomComparer results...
            Assert.Zero(defaultResult + defaultOpposite);
			Assert.AreEqual(defaultOpposite, custom.Compare(b,a));
            Assert.AreEqual(defaultResult, custom.Compare(a,b));
        }

		public static void MatchesDefaultComparer_TypeT<T>(CustomComparer<T> custom, object oA, object oB, Decimal a,Decimal b)
        {
			Assert.AreEqual(Convert.ToInt32(oA),Convert.ToInt32(a),"Unit test parameter mis-match oA does not equal a");
			Assert.AreEqual(Convert.ToInt32(oB),Convert.ToInt32(b),"Unit test parameter mis-match oB does not equal b");
            var defaultComparer = Comparer<Decimal>.Default;
            var defaultResult = defaultComparer.Compare(a, b);
			var defaultOpposite = defaultComparer.Compare(b, a);
            // Verify Comparer.Default results...
			Assert.AreEqual(Comparer<int>.Default.Compare(Convert.ToInt32(a), Convert.ToInt32(b)), defaultResult);
            Assert.AreEqual(Comparer<int>.Default.Compare(Convert.ToInt32(b), Convert.ToInt32(a)), defaultOpposite);
            Assert.AreEqual(Comparer<double>.Default.Compare(Convert.ToDouble(a), Convert.ToDouble(b)), defaultResult);
            Assert.AreEqual(Comparer<double>.Default.Compare(Convert.ToDouble(b), Convert.ToDouble(a)), defaultOpposite);
			// Verify Visyn.NumberConverter .Default results... (note this works with char<->double)
			Assert.AreEqual(Comparer<int>.Default.Compare(visyn.ToInt32(a), visyn.ToInt32(b)), defaultResult);
            Assert.AreEqual(Comparer<int>.Default.Compare(visyn.ToInt32(b), visyn.ToInt32(a)), defaultOpposite);
			Assert.AreEqual(Comparer<double>.Default.Compare(visyn.ToDouble(a), visyn.ToDouble(b)), defaultResult);
            Assert.AreEqual(Comparer<double>.Default.Compare(visyn.ToDouble(b), visyn.ToDouble(a)), defaultOpposite);

            Assert.Zero(defaultResult + defaultOpposite);
			// Verify CustomComparer results...
            Assert.AreEqual(defaultResult,   custom.Compare(oA,oB));
            Assert.AreEqual(defaultOpposite, custom.Compare(oB,oA));
        }

		// Decimal - Default Comparer (inverted)
		public static void MatchesInvertedDefaultComparer(CustomComparer<Decimal> custom, Decimal a,Decimal b)
        {
            var defaultComparer = Comparer<Decimal>.Default;
            var defaultResult = defaultComparer.Compare(a, b);
			var defaultOpposite = defaultComparer.Compare(b, a);
            // Verify Comparer.Default results...
			Assert.AreEqual(Comparer<int>.Default.Compare(Convert.ToInt32(a), Convert.ToInt32(b)), defaultResult);
            Assert.AreEqual(Comparer<int>.Default.Compare(Convert.ToInt32(b), Convert.ToInt32(a)), defaultOpposite);
            Assert.AreEqual(Comparer<double>.Default.Compare(Convert.ToDouble(a), Convert.ToDouble(b)), defaultResult);
            Assert.AreEqual(Comparer<double>.Default.Compare(Convert.ToDouble(b), Convert.ToDouble(a)), defaultOpposite);
			// Verify Visyn.NumberConverter .Default results... (note this works with char<->double)
			Assert.AreEqual(Comparer<int>.Default.Compare(visyn.ToInt32(a), visyn.ToInt32(b)), defaultResult);
            Assert.AreEqual(Comparer<int>.Default.Compare(visyn.ToInt32(b), visyn.ToInt32(a)), defaultOpposite);
			Assert.AreEqual(Comparer<double>.Default.Compare(visyn.ToDouble(a), visyn.ToDouble(b)), defaultResult);
            Assert.AreEqual(Comparer<double>.Default.Compare(visyn.ToDouble(b), visyn.ToDouble(a)), defaultOpposite);

            Assert.Zero(defaultResult + defaultOpposite);
			// Verify CustomComparer results...
            Assert.Zero(defaultResult + defaultOpposite);
			Assert.AreEqual(-1*defaultOpposite, custom.Compare(b,a));
            Assert.AreEqual(-1*defaultResult, custom.Compare(a,b));
        }

		public static void MatchesInvertedDefaultComparer_TypeT<T>(CustomComparer<T> custom, object oA, object oB, Decimal a,Decimal b)
        {
			Assert.AreEqual(Convert.ToInt32(oA),Convert.ToInt32(a),"Unit test parameter mis-match oA does not equal a");
			Assert.AreEqual(Convert.ToInt32(oB),Convert.ToInt32(b),"Unit test parameter mis-match oB does not equal b");
            var defaultComparer = Comparer<Decimal>.Default;
            var defaultResult = defaultComparer.Compare(a, b);
			var defaultOpposite = defaultComparer.Compare(b, a);
            // Verify Comparer.Default results...
			Assert.AreEqual(Comparer<int>.Default.Compare(Convert.ToInt32(a), Convert.ToInt32(b)), defaultResult);
            Assert.AreEqual(Comparer<int>.Default.Compare(Convert.ToInt32(b), Convert.ToInt32(a)), defaultOpposite);
            Assert.AreEqual(Comparer<double>.Default.Compare(Convert.ToDouble(a), Convert.ToDouble(b)), defaultResult);
            Assert.AreEqual(Comparer<double>.Default.Compare(Convert.ToDouble(b), Convert.ToDouble(a)), defaultOpposite);
			// Verify Visyn.NumberConverter .Default results... (note this works with char<->double)
			Assert.AreEqual(Comparer<int>.Default.Compare(visyn.ToInt32(a), visyn.ToInt32(b)), defaultResult);
            Assert.AreEqual(Comparer<int>.Default.Compare(visyn.ToInt32(b), visyn.ToInt32(a)), defaultOpposite);
			Assert.AreEqual(Comparer<double>.Default.Compare(visyn.ToDouble(a), visyn.ToDouble(b)), defaultResult);
            Assert.AreEqual(Comparer<double>.Default.Compare(visyn.ToDouble(b), visyn.ToDouble(a)), defaultOpposite);

            Assert.Zero(defaultResult + defaultOpposite);
			// Verify CustomComparer results...
            Assert.AreEqual(-1*defaultResult,   custom.Compare(oA,oB));
            Assert.AreEqual(-1*defaultOpposite, custom.Compare(oB,oA));
        }
#endregion
	}
}